URL: https://www.codewars.com/kata/670031c78cc02fa6c28ba28a
–ó–∞–¥–∞—á–∞:
In this kata, you are given the sum of the number of vertices, edges, and faces of an
N-sided prism, which is equal to s. Your task is to 
determine and return a tuple containing four values: the number of vertices, edges, 
faces, and the number of sides of the base of the prism.
A prism is a polyhedron with two parallel, congruent bases and rectangular lateral 
faces connecting the corresponding sides of the bases.

 triangular prism example:

For an N-sided prism:
Vertices (V): The total number of vertices.
Edges (E): The total number of edges.
Faces (F): The total number of faces.
Base sides (B): The number of sides of the base of the prism.
Given the sum s = V + E + F return the tuple (V ,E ,F ,B).
Constraints:
1. The number of sides of the base B is an integer greater than or equal to 3.

2. The sum s is an integer in the range 4 ‚â§ ùë† ‚â§ 1000
========================================
URL: https://www.codewars.com/kata/66fc9ca2e6d1d0e9cc2e4a4c
–ó–∞–¥–∞—á–∞:
In this kata, you are given the sum of the number of vertices, edges, and faces of an
N-sided prism, which is equal to s. Your task is to 
determine and return a tuple containing four values: the number of vertices, edges, 
faces, and the number of sides of the base of the prism.
A prism is a polyhedron with two parallel, congruent bases and rectangular lateral 
faces connecting the corresponding sides of the bases.

 triangular prism example:

For an N-sided prism:
Vertices (V): The total number of vertices.
Edges (E): The total number of edges.
Faces (F): The total number of faces.
Base sides (B): The number of sides of the base of the prism.
Given the sum s = V + E + F return the tuple (V ,E ,F ,B).
Constraints:
1. The number of sides of the base B is an integer greater than or equal to 3.

2. The sum s is an integer in the range 4 ‚â§ ùë† ‚â§ 1000
========================================
URL: https://www.codewars.com/kata/66e793bba4b1a6f2e8f890e5
–ó–∞–¥–∞—á–∞:
In this kata, you are given the sum of the number of vertices, edges, and faces of an
N-sided prism, which is equal to s. Your task is to 
determine and return a tuple containing four values: the number of vertices, edges, 
faces, and the number of sides of the base of the prism.
A prism is a polyhedron with two parallel, congruent bases and rectangular lateral 
faces connecting the corresponding sides of the bases.

 triangular prism example:

For an N-sided prism:
Vertices (V): The total number of vertices.
Edges (E): The total number of edges.
Faces (F): The total number of faces.
Base sides (B): The number of sides of the base of the prism.
Given the sum s = V + E + F return the tuple (V ,E ,F ,B).
Constraints:
1. The number of sides of the base B is an integer greater than or equal to 3.

2. The sum s is an integer in the range 4 ‚â§ ùë† ‚â§ 1000
========================================
URL: https://www.codewars.com/kata/66e7c0628a394dd74feb99ca
–ó–∞–¥–∞—á–∞:
In this kata, you are given the sum of the number of vertices, edges, and faces of an
N-sided prism, which is equal to s. Your task is to 
determine and return a tuple containing four values: the number of vertices, edges, 
faces, and the number of sides of the base of the prism.
A prism is a polyhedron with two parallel, congruent bases and rectangular lateral 
faces connecting the corresponding sides of the bases.

 triangular prism example:

For an N-sided prism:
Vertices (V): The total number of vertices.
Edges (E): The total number of edges.
Faces (F): The total number of faces.
Base sides (B): The number of sides of the base of the prism.
Given the sum s = V + E + F return the tuple (V ,E ,F ,B).
Constraints:
1. The number of sides of the base B is an integer greater than or equal to 3.

2. The sum s is an integer in the range 4 ‚â§ ùë† ‚â§ 1000
========================================
URL: https://www.codewars.com/kata/66d850a79527635a782dc26c
–ó–∞–¥–∞—á–∞:
In this kata, you are given the sum of the number of vertices, edges, and faces of an
N-sided prism, which is equal to s. Your task is to 
determine and return a tuple containing four values: the number of vertices, edges, 
faces, and the number of sides of the base of the prism.
A prism is a polyhedron with two parallel, congruent bases and rectangular lateral 
faces connecting the corresponding sides of the bases.

 triangular prism example:

For an N-sided prism:
Vertices (V): The total number of vertices.
Edges (E): The total number of edges.
Faces (F): The total number of faces.
Base sides (B): The number of sides of the base of the prism.
Given the sum s = V + E + F return the tuple (V ,E ,F ,B).
Constraints:
1. The number of sides of the base B is an integer greater than or equal to 3.

2. The sum s is an integer in the range 4 ‚â§ ùë† ‚â§ 1000
========================================
URL: https://www.codewars.com/kata/66d518a02ad747208baefcba
–ó–∞–¥–∞—á–∞:
Inputs:
A n √ó n grid with 1 ‚â§ n ‚â§ 9, and 2 integers row,col with 1 ‚â§ row,col ‚â§ n, indicating the starting position of the treasure hunt. 
Clues:
Every cell of the grid contains a number between 11 and n2. These values provide the coordinates of the next cell to search. The treasure is found in a cell whose value matches its location. (The clue says "stay where you are"!) There will always be treasure reachable from the starting position.
Output: 
The value in the treasure cell reached by following the clues from the starting position.
Example:
Consider the grid below, with starting position row=3,col=4.
 
34 21 32 44 25 
21 41 43 14 31 
31 45 52 42 23 
33 15 51 44 35 
21 52 33 13 44 

Indexes start from 1, so the value in cell 3,4 is 42. Thus the next clue is found in cell 4,2. The value there is 15. Seeking in cell 1,5 uncovers the clue 25, and cell 2,5 contains 31. Since the value in cell 3,1 is 31, that is the location of the treasure. 
Source: This kata extends a problem found on GitHub.
Other Treasure-Hunt Kata: 
Bob's Treasure Map
Treasure Map
Pirate treasure chest codes
Treasure hunt
========================================
URL: https://www.codewars.com/kata/66c79a67213a3a4e1486c364
–ó–∞–¥–∞—á–∞:
Inputs:
A n √ó n grid with 1 ‚â§ n ‚â§ 9, and 2 integers row,col with 1 ‚â§ row,col ‚â§ n, indicating the starting position of the treasure hunt. 
Clues:
Every cell of the grid contains a number between 11 and n2. These values provide the coordinates of the next cell to search. The treasure is found in a cell whose value matches its location. (The clue says "stay where you are"!) There will always be treasure reachable from the starting position.
Output: 
The value in the treasure cell reached by following the clues from the starting position.
Example:
Consider the grid below, with starting position row=3,col=4.
 
34 21 32 44 25 
21 41 43 14 31 
31 45 52 42 23 
33 15 51 44 35 
21 52 33 13 44 

Indexes start from 1, so the value in cell 3,4 is 42. Thus the next clue is found in cell 4,2. The value there is 15. Seeking in cell 1,5 uncovers the clue 25, and cell 2,5 contains 31. Since the value in cell 3,1 is 31, that is the location of the treasure. 
Source: This kata extends a problem found on GitHub.
Other Treasure-Hunt Kata: 
Bob's Treasure Map
Treasure Map
Pirate treasure chest codes
Treasure hunt
========================================
URL: https://www.codewars.com/kata/66cdc6ab9e7a9f009e0ca8f6
–ó–∞–¥–∞—á–∞:
Inputs:
A n √ó n grid with 1 ‚â§ n ‚â§ 9, and 2 integers row,col with 1 ‚â§ row,col ‚â§ n, indicating the starting position of the treasure hunt. 
Clues:
Every cell of the grid contains a number between 11 and n2. These values provide the coordinates of the next cell to search. The treasure is found in a cell whose value matches its location. (The clue says "stay where you are"!) There will always be treasure reachable from the starting position.
Output: 
The value in the treasure cell reached by following the clues from the starting position.
Example:
Consider the grid below, with starting position row=3,col=4.
 
34 21 32 44 25 
21 41 43 14 31 
31 45 52 42 23 
33 15 51 44 35 
21 52 33 13 44 

Indexes start from 1, so the value in cell 3,4 is 42. Thus the next clue is found in cell 4,2. The value there is 15. Seeking in cell 1,5 uncovers the clue 25, and cell 2,5 contains 31. Since the value in cell 3,1 is 31, that is the location of the treasure. 
Source: This kata extends a problem found on GitHub.
Other Treasure-Hunt Kata: 
Bob's Treasure Map
Treasure Map
Pirate treasure chest codes
Treasure hunt
========================================
URL: https://www.codewars.com/kata/66c0fec80a2a28b2a451d408
–ó–∞–¥–∞—á–∞:
Inputs:
A n √ó n grid with 1 ‚â§ n ‚â§ 9, and 2 integers row,col with 1 ‚â§ row,col ‚â§ n, indicating the starting position of the treasure hunt. 
Clues:
Every cell of the grid contains a number between 11 and n2. These values provide the coordinates of the next cell to search. The treasure is found in a cell whose value matches its location. (The clue says "stay where you are"!) There will always be treasure reachable from the starting position.
Output: 
The value in the treasure cell reached by following the clues from the starting position.
Example:
Consider the grid below, with starting position row=3,col=4.
 
34 21 32 44 25 
21 41 43 14 31 
31 45 52 42 23 
33 15 51 44 35 
21 52 33 13 44 

Indexes start from 1, so the value in cell 3,4 is 42. Thus the next clue is found in cell 4,2. The value there is 15. Seeking in cell 1,5 uncovers the clue 25, and cell 2,5 contains 31. Since the value in cell 3,1 is 31, that is the location of the treasure. 
Source: This kata extends a problem found on GitHub.
Other Treasure-Hunt Kata: 
Bob's Treasure Map
Treasure Map
Pirate treasure chest codes
Treasure hunt
========================================
URL: https://www.codewars.com/kata/66c9186bb01defccbd40449d
–ó–∞–¥–∞—á–∞:
Inputs:
A n √ó n grid with 1 ‚â§ n ‚â§ 9, and 2 integers row,col with 1 ‚â§ row,col ‚â§ n, indicating the starting position of the treasure hunt. 
Clues:
Every cell of the grid contains a number between 11 and n2. These values provide the coordinates of the next cell to search. The treasure is found in a cell whose value matches its location. (The clue says "stay where you are"!) There will always be treasure reachable from the starting position.
Output: 
The value in the treasure cell reached by following the clues from the starting position.
Example:
Consider the grid below, with starting position row=3,col=4.
 
34 21 32 44 25 
21 41 43 14 31 
31 45 52 42 23 
33 15 51 44 35 
21 52 33 13 44 

Indexes start from 1, so the value in cell 3,4 is 42. Thus the next clue is found in cell 4,2. The value there is 15. Seeking in cell 1,5 uncovers the clue 25, and cell 2,5 contains 31. Since the value in cell 3,1 is 31, that is the location of the treasure. 
Source: This kata extends a problem found on GitHub.
Other Treasure-Hunt Kata: 
Bob's Treasure Map
Treasure Map
Pirate treasure chest codes
Treasure hunt
========================================
URL: https://www.codewars.com/kata/66bb6583ac1620f505a8e31b
–ó–∞–¥–∞—á–∞:
Task
Given any positive integer x ‚â§ 4000, find the smallest positive integer m such that mx consists of all 9's. Return -1 if no such m exists.
Examples:
11 -> 9, because 11 * 9 == 99.
12 -> -1, because 12 is even, so no multiple of it can contain only nines.
13 -> 76923, because 13 * 76923 == 999999, and no smaller positive integer, when multiplied by 13, generates an integer containing only nines.
NOTE: Although x ‚â§ 4000, m can be very very LARGE. Where necessary, the way of handling big integers appropriate to the language should be used.
========================================
URL: https://www.codewars.com/kata/664b9dd610985cc3b6784111
–ó–∞–¥–∞—á–∞:
Task
Given any positive integer x ‚â§ 4000, find the smallest positive integer m such that mx consists of all 9's. Return -1 if no such m exists.
Examples:
11 -> 9, because 11 * 9 == 99.
12 -> -1, because 12 is even, so no multiple of it can contain only nines.
13 -> 76923, because 13 * 76923 == 999999, and no smaller positive integer, when multiplied by 13, generates an integer containing only nines.
NOTE: Although x ‚â§ 4000, m can be very very LARGE. Where necessary, the way of handling big integers appropriate to the language should be used.
========================================
URL: https://www.codewars.com/kata/667dfbaa4570b2db26aedc8c
–ó–∞–¥–∞—á–∞:
Task
Given any positive integer x ‚â§ 4000, find the smallest positive integer m such that mx consists of all 9's. Return -1 if no such m exists.
Examples:
11 -> 9, because 11 * 9 == 99.
12 -> -1, because 12 is even, so no multiple of it can contain only nines.
13 -> 76923, because 13 * 76923 == 999999, and no smaller positive integer, when multiplied by 13, generates an integer containing only nines.
NOTE: Although x ‚â§ 4000, m can be very very LARGE. Where necessary, the way of handling big integers appropriate to the language should be used.
========================================
URL: https://www.codewars.com/kata/66939247fc2af275cd8a82d3
–ó–∞–¥–∞—á–∞:
Task
Given any positive integer x ‚â§ 4000, find the smallest positive integer m such that mx consists of all 9's. Return -1 if no such m exists.
Examples:
11 -> 9, because 11 * 9 == 99.
12 -> -1, because 12 is even, so no multiple of it can contain only nines.
13 -> 76923, because 13 * 76923 == 999999, and no smaller positive integer, when multiplied by 13, generates an integer containing only nines.
NOTE: Although x ‚â§ 4000, m can be very very LARGE. Where necessary, the way of handling big integers appropriate to the language should be used.
========================================
URL: https://www.codewars.com/kata/664e4f5b12b1b20182ea3e3a
–ó–∞–¥–∞—á–∞:
Task
Given any positive integer x ‚â§ 4000, find the smallest positive integer m such that mx consists of all 9's. Return -1 if no such m exists.
Examples:
11 -> 9, because 11 * 9 == 99.
12 -> -1, because 12 is even, so no multiple of it can contain only nines.
13 -> 76923, because 13 * 76923 == 999999, and no smaller positive integer, when multiplied by 13, generates an integer containing only nines.
NOTE: Although x ‚â§ 4000, m can be very very LARGE. Where necessary, the way of handling big integers appropriate to the language should be used.
========================================
URL: https://www.codewars.com/kata/6632593a3c54be1ed7852b15
–ó–∞–¥–∞—á–∞:
Inspired by the emojify custom Python module.
You are given a string made up of chains of emotes separated by 1 space each, with chains having 2 spaces in-between each.
Each emote represents a digit:
:)  | 0
:D  | 1
>(  | 2
>:C | 3
:/  | 4
:|  | 5
:O  | 6
;)  | 7
^.^ | 8
:(  | 9

Each emote chain represents the digits of the ASCII/Unicode code for a character, e.g. :( ;) is 97, which is the ASCII code for 'a'.
Given a such string of emotes, find the string it represents. Example:
':D :) :/  :D :) :|' is 2 chains: ':D :) :/' and ':D :) :|'.
These represent ASCII codes 104 and 105 respectively, translating to 'hi'.
Input will always be valid. Chains may start with leading zeroes; these are valid and do not change the chain's value.
hobovsky if you're reading this, you're welcome for the emoji kata idea
========================================
URL: https://www.codewars.com/kata/6630da20f925eb3007c5a498
–ó–∞–¥–∞—á–∞:
Inspired by the emojify custom Python module.
You are given a string made up of chains of emotes separated by 1 space each, with chains having 2 spaces in-between each.
Each emote represents a digit:
:)  | 0
:D  | 1
>(  | 2
>:C | 3
:/  | 4
:|  | 5
:O  | 6
;)  | 7
^.^ | 8
:(  | 9

Each emote chain represents the digits of the ASCII/Unicode code for a character, e.g. :( ;) is 97, which is the ASCII code for 'a'.
Given a such string of emotes, find the string it represents. Example:
':D :) :/  :D :) :|' is 2 chains: ':D :) :/' and ':D :) :|'.
These represent ASCII codes 104 and 105 respectively, translating to 'hi'.
Input will always be valid. Chains may start with leading zeroes; these are valid and do not change the chain's value.
hobovsky if you're reading this, you're welcome for the emoji kata idea
========================================
URL: https://www.codewars.com/kata/66314d6b7cb7030393dddf8a
–ó–∞–¥–∞—á–∞:
Inspired by the emojify custom Python module.
You are given a string made up of chains of emotes separated by 1 space each, with chains having 2 spaces in-between each.
Each emote represents a digit:
:)  | 0
:D  | 1
>(  | 2
>:C | 3
:/  | 4
:|  | 5
:O  | 6
;)  | 7
^.^ | 8
:(  | 9

Each emote chain represents the digits of the ASCII/Unicode code for a character, e.g. :( ;) is 97, which is the ASCII code for 'a'.
Given a such string of emotes, find the string it represents. Example:
':D :) :/  :D :) :|' is 2 chains: ':D :) :/' and ':D :) :|'.
These represent ASCII codes 104 and 105 respectively, translating to 'hi'.
Input will always be valid. Chains may start with leading zeroes; these are valid and do not change the chain's value.
hobovsky if you're reading this, you're welcome for the emoji kata idea
========================================
URL: https://www.codewars.com/kata/6627696c86b953001280675e
–ó–∞–¥–∞—á–∞:
Inspired by the emojify custom Python module.
You are given a string made up of chains of emotes separated by 1 space each, with chains having 2 spaces in-between each.
Each emote represents a digit:
:)  | 0
:D  | 1
>(  | 2
>:C | 3
:/  | 4
:|  | 5
:O  | 6
;)  | 7
^.^ | 8
:(  | 9

Each emote chain represents the digits of the ASCII/Unicode code for a character, e.g. :( ;) is 97, which is the ASCII code for 'a'.
Given a such string of emotes, find the string it represents. Example:
':D :) :/  :D :) :|' is 2 chains: ':D :) :/' and ':D :) :|'.
These represent ASCII codes 104 and 105 respectively, translating to 'hi'.
Input will always be valid. Chains may start with leading zeroes; these are valid and do not change the chain's value.
hobovsky if you're reading this, you're welcome for the emoji kata idea
========================================
URL: https://www.codewars.com/kata/662f64adf925ebceb6c5a4e4
–ó–∞–¥–∞—á–∞:
Inspired by the emojify custom Python module.
You are given a string made up of chains of emotes separated by 1 space each, with chains having 2 spaces in-between each.
Each emote represents a digit:
:)  | 0
:D  | 1
>(  | 2
>:C | 3
:/  | 4
:|  | 5
:O  | 6
;)  | 7
^.^ | 8
:(  | 9

Each emote chain represents the digits of the ASCII/Unicode code for a character, e.g. :( ;) is 97, which is the ASCII code for 'a'.
Given a such string of emotes, find the string it represents. Example:
':D :) :/  :D :) :|' is 2 chains: ':D :) :/' and ':D :) :|'.
These represent ASCII codes 104 and 105 respectively, translating to 'hi'.
Input will always be valid. Chains may start with leading zeroes; these are valid and do not change the chain's value.
hobovsky if you're reading this, you're welcome for the emoji kata idea
========================================
URL: https://www.codewars.com/kata/65f361be2b30ec19b78d758f
–ó–∞–¥–∞—á–∞:
You order a shirt for your friend that has a word written in sign language on it, you would like to fool your friend into thinking it says something other than what it actually says.
Your friend is smart, but he can't know what he doesn't already know, he only knows a certain amount of letters in sign language. Given the word on the shirt, the word you are attempting to make your friend believe is on the shirt, and the letters in sign language your friends knows, figure out if he can tell that you are fooling him. Return true if your friend can figure out you are fooling him, otherwise return false.
It is guaranteed that both words will be the same length and will be in lowercase letters (a-z)
Example 1:
Word on shirt: snack
Word you said: snake
Letters your friend knows: [c]

return true
Your friend knows the 4th letter is a c rather than a k.

If the word on the shirt and the word you told your friend is the same then you aren't fooling your friend, so you should return false
Example 2:
Word on shirt: snack
Word you said: snack
Letters your friend knows: [s, n, a, c, k]

return false 
Since you are not fooling your friend

Example 3:
Word on shirt: snake
Word you said: snack
Letters your friend knows: [c]

return true 
Your friend knows that the 4th letter is not a c

Example 4:
Word on shirt: smile
Word you said: smirk
Letters your friend knows: [s, m, i]

return false
Your friend doesn't know what the letters l and e from smi(le) look like in sign language.
So he cannot say that those letters are not r or k from smi(rk) because he wouldn't know
So your friend cannot figure out if you are fooling him.
========================================
URL: https://www.codewars.com/kata/65e594c5a93ef700294ced80
–ó–∞–¥–∞—á–∞:
You order a shirt for your friend that has a word written in sign language on it, you would like to fool your friend into thinking it says something other than what it actually says.
Your friend is smart, but he can't know what he doesn't already know, he only knows a certain amount of letters in sign language. Given the word on the shirt, the word you are attempting to make your friend believe is on the shirt, and the letters in sign language your friends knows, figure out if he can tell that you are fooling him. Return true if your friend can figure out you are fooling him, otherwise return false.
It is guaranteed that both words will be the same length and will be in lowercase letters (a-z)
Example 1:
Word on shirt: snack
Word you said: snake
Letters your friend knows: [c]

return true
Your friend knows the 4th letter is a c rather than a k.

If the word on the shirt and the word you told your friend is the same then you aren't fooling your friend, so you should return false
Example 2:
Word on shirt: snack
Word you said: snack
Letters your friend knows: [s, n, a, c, k]

return false 
Since you are not fooling your friend

Example 3:
Word on shirt: snake
Word you said: snack
Letters your friend knows: [c]

return true 
Your friend knows that the 4th letter is not a c

Example 4:
Word on shirt: smile
Word you said: smirk
Letters your friend knows: [s, m, i]

return false
Your friend doesn't know what the letters l and e from smi(le) look like in sign language.
So he cannot say that those letters are not r or k from smi(rk) because he wouldn't know
So your friend cannot figure out if you are fooling him.
========================================
URL: https://www.codewars.com/kata/65e0fa45446dba00143d3744
–ó–∞–¥–∞—á–∞:
You order a shirt for your friend that has a word written in sign language on it, you would like to fool your friend into thinking it says something other than what it actually says.
Your friend is smart, but he can't know what he doesn't already know, he only knows a certain amount of letters in sign language. Given the word on the shirt, the word you are attempting to make your friend believe is on the shirt, and the letters in sign language your friends knows, figure out if he can tell that you are fooling him. Return true if your friend can figure out you are fooling him, otherwise return false.
It is guaranteed that both words will be the same length and will be in lowercase letters (a-z)
Example 1:
Word on shirt: snack
Word you said: snake
Letters your friend knows: [c]

return true
Your friend knows the 4th letter is a c rather than a k.

If the word on the shirt and the word you told your friend is the same then you aren't fooling your friend, so you should return false
Example 2:
Word on shirt: snack
Word you said: snack
Letters your friend knows: [s, n, a, c, k]

return false 
Since you are not fooling your friend

Example 3:
Word on shirt: snake
Word you said: snack
Letters your friend knows: [c]

return true 
Your friend knows that the 4th letter is not a c

Example 4:
Word on shirt: smile
Word you said: smirk
Letters your friend knows: [s, m, i]

return false
Your friend doesn't know what the letters l and e from smi(le) look like in sign language.
So he cannot say that those letters are not r or k from smi(rk) because he wouldn't know
So your friend cannot figure out if you are fooling him.
========================================
URL: https://www.codewars.com/kata/65e2df8302b29a005831eace
–ó–∞–¥–∞—á–∞:
You order a shirt for your friend that has a word written in sign language on it, you would like to fool your friend into thinking it says something other than what it actually says.
Your friend is smart, but he can't know what he doesn't already know, he only knows a certain amount of letters in sign language. Given the word on the shirt, the word you are attempting to make your friend believe is on the shirt, and the letters in sign language your friends knows, figure out if he can tell that you are fooling him. Return true if your friend can figure out you are fooling him, otherwise return false.
It is guaranteed that both words will be the same length and will be in lowercase letters (a-z)
Example 1:
Word on shirt: snack
Word you said: snake
Letters your friend knows: [c]

return true
Your friend knows the 4th letter is a c rather than a k.

If the word on the shirt and the word you told your friend is the same then you aren't fooling your friend, so you should return false
Example 2:
Word on shirt: snack
Word you said: snack
Letters your friend knows: [s, n, a, c, k]

return false 
Since you are not fooling your friend

Example 3:
Word on shirt: snake
Word you said: snack
Letters your friend knows: [c]

return true 
Your friend knows that the 4th letter is not a c

Example 4:
Word on shirt: smile
Word you said: smirk
Letters your friend knows: [s, m, i]

return false
Your friend doesn't know what the letters l and e from smi(le) look like in sign language.
So he cannot say that those letters are not r or k from smi(rk) because he wouldn't know
So your friend cannot figure out if you are fooling him.
========================================
URL: https://www.codewars.com/kata/65dd5b414ccda60a4be32c2a
–ó–∞–¥–∞—á–∞:
You order a shirt for your friend that has a word written in sign language on it, you would like to fool your friend into thinking it says something other than what it actually says.
Your friend is smart, but he can't know what he doesn't already know, he only knows a certain amount of letters in sign language. Given the word on the shirt, the word you are attempting to make your friend believe is on the shirt, and the letters in sign language your friends knows, figure out if he can tell that you are fooling him. Return true if your friend can figure out you are fooling him, otherwise return false.
It is guaranteed that both words will be the same length and will be in lowercase letters (a-z)
Example 1:
Word on shirt: snack
Word you said: snake
Letters your friend knows: [c]

return true
Your friend knows the 4th letter is a c rather than a k.

If the word on the shirt and the word you told your friend is the same then you aren't fooling your friend, so you should return false
Example 2:
Word on shirt: snack
Word you said: snack
Letters your friend knows: [s, n, a, c, k]

return false 
Since you are not fooling your friend

Example 3:
Word on shirt: snake
Word you said: snack
Letters your friend knows: [c]

return true 
Your friend knows that the 4th letter is not a c

Example 4:
Word on shirt: smile
Word you said: smirk
Letters your friend knows: [s, m, i]

return false
Your friend doesn't know what the letters l and e from smi(le) look like in sign language.
So he cannot say that those letters are not r or k from smi(rk) because he wouldn't know
So your friend cannot figure out if you are fooling him.
========================================
URL: https://www.codewars.com/kata/65d5cf1eac0d2a6c4f6c60e6
–ó–∞–¥–∞—á–∞:
ISBN
An ISBN (International Standard Book Number) is a ten digit code which uniquely identifies a book. The first nine digits represent the book and the last digit is used to make sure the ISBN is correct. To verify an ISBN you calculate 10 times the first digit, plus 9 times the second digit, plus 8 times the third... all the way until you add 1 times the last digit. If the final number leaves no remainder when divided by 11 the code is a valid ISBN.
For example 0201103311 is a valid ISBN, since 10*0 + 9*2 + 8*0 + 7*1 + 6*1 + 5*0 + 4*3 + 3*3 + 2*1 + 1*1 = 55.
Each of the first nine digits can take a value between 0 and 9. Sometimes it is necessary to make the last digit equal to ten; this is done by writing the last digit as X. For example, 156881111X.
Write a program that reads in an ISBN code (will always be valid) with a single missing digit, marked with a ?, and outputs the correct value for the missing digit. 
Example:
15688?111X => "1"
020161586? => "X"

Input/Output

[input] string representing the 10-digit ISBN code 15688?111X
[output] string representing the missing digit '1'

Source: 2003 British Informatics Olympiad
========================================
URL: https://www.codewars.com/kata/65c0161a2380ae78052e5731
–ó–∞–¥–∞—á–∞:
ISBN
An ISBN (International Standard Book Number) is a ten digit code which uniquely identifies a book. The first nine digits represent the book and the last digit is used to make sure the ISBN is correct. To verify an ISBN you calculate 10 times the first digit, plus 9 times the second digit, plus 8 times the third... all the way until you add 1 times the last digit. If the final number leaves no remainder when divided by 11 the code is a valid ISBN.
For example 0201103311 is a valid ISBN, since 10*0 + 9*2 + 8*0 + 7*1 + 6*1 + 5*0 + 4*3 + 3*3 + 2*1 + 1*1 = 55.
Each of the first nine digits can take a value between 0 and 9. Sometimes it is necessary to make the last digit equal to ten; this is done by writing the last digit as X. For example, 156881111X.
Write a program that reads in an ISBN code (will always be valid) with a single missing digit, marked with a ?, and outputs the correct value for the missing digit. 
Example:
15688?111X => "1"
020161586? => "X"

Input/Output

[input] string representing the 10-digit ISBN code 15688?111X
[output] string representing the missing digit '1'

Source: 2003 British Informatics Olympiad
========================================
URL: https://www.codewars.com/kata/6584b7cac29ca91dd9124009
–ó–∞–¥–∞—á–∞:
ISBN
An ISBN (International Standard Book Number) is a ten digit code which uniquely identifies a book. The first nine digits represent the book and the last digit is used to make sure the ISBN is correct. To verify an ISBN you calculate 10 times the first digit, plus 9 times the second digit, plus 8 times the third... all the way until you add 1 times the last digit. If the final number leaves no remainder when divided by 11 the code is a valid ISBN.
For example 0201103311 is a valid ISBN, since 10*0 + 9*2 + 8*0 + 7*1 + 6*1 + 5*0 + 4*3 + 3*3 + 2*1 + 1*1 = 55.
Each of the first nine digits can take a value between 0 and 9. Sometimes it is necessary to make the last digit equal to ten; this is done by writing the last digit as X. For example, 156881111X.
Write a program that reads in an ISBN code (will always be valid) with a single missing digit, marked with a ?, and outputs the correct value for the missing digit. 
Example:
15688?111X => "1"
020161586? => "X"

Input/Output

[input] string representing the 10-digit ISBN code 15688?111X
[output] string representing the missing digit '1'

Source: 2003 British Informatics Olympiad
========================================
URL: https://www.codewars.com/kata/65a024af6063fb0ac8c0f0b5
–ó–∞–¥–∞—á–∞:
ISBN
An ISBN (International Standard Book Number) is a ten digit code which uniquely identifies a book. The first nine digits represent the book and the last digit is used to make sure the ISBN is correct. To verify an ISBN you calculate 10 times the first digit, plus 9 times the second digit, plus 8 times the third... all the way until you add 1 times the last digit. If the final number leaves no remainder when divided by 11 the code is a valid ISBN.
For example 0201103311 is a valid ISBN, since 10*0 + 9*2 + 8*0 + 7*1 + 6*1 + 5*0 + 4*3 + 3*3 + 2*1 + 1*1 = 55.
Each of the first nine digits can take a value between 0 and 9. Sometimes it is necessary to make the last digit equal to ten; this is done by writing the last digit as X. For example, 156881111X.
Write a program that reads in an ISBN code (will always be valid) with a single missing digit, marked with a ?, and outputs the correct value for the missing digit. 
Example:
15688?111X => "1"
020161586? => "X"

Input/Output

[input] string representing the 10-digit ISBN code 15688?111X
[output] string representing the missing digit '1'

Source: 2003 British Informatics Olympiad
========================================
URL: https://www.codewars.com/kata/6582206efbfb3a604cb0a6fe
–ó–∞–¥–∞—á–∞:
ISBN
An ISBN (International Standard Book Number) is a ten digit code which uniquely identifies a book. The first nine digits represent the book and the last digit is used to make sure the ISBN is correct. To verify an ISBN you calculate 10 times the first digit, plus 9 times the second digit, plus 8 times the third... all the way until you add 1 times the last digit. If the final number leaves no remainder when divided by 11 the code is a valid ISBN.
For example 0201103311 is a valid ISBN, since 10*0 + 9*2 + 8*0 + 7*1 + 6*1 + 5*0 + 4*3 + 3*3 + 2*1 + 1*1 = 55.
Each of the first nine digits can take a value between 0 and 9. Sometimes it is necessary to make the last digit equal to ten; this is done by writing the last digit as X. For example, 156881111X.
Write a program that reads in an ISBN code (will always be valid) with a single missing digit, marked with a ?, and outputs the correct value for the missing digit. 
Example:
15688?111X => "1"
020161586? => "X"

Input/Output

[input] string representing the 10-digit ISBN code 15688?111X
[output] string representing the missing digit '1'

Source: 2003 British Informatics Olympiad
========================================
URL: https://www.codewars.com/kata/6523a71df7666800170a1954
–ó–∞–¥–∞—á–∞:
A number is Esthetic if, in any base from base2 up to base10, the absolute difference between every pair of its adjacent digits is constantly equal to 1.
num = 441 (base10)
// Adjacent pairs of digits:
// |4, 4|, |4, 1|
// The absolute difference is not constant
// 441 is not Esthetic in base10

441 in base4 = 12321
// Adjacent pairs of digits:
// |1, 2|, |2, 3|, |3, 2|, |2, 1|
// The absolute difference is constant and is equal to 1
// 441 is Esthetic in base4

Given a positive integer num, implement a function that returns an array containing the bases (as integers from 2 up to 10) in which num results to be Esthetic, or an empty array [] if no base makes num Esthetic.
Examples
10 ‚ûû [2, 3, 8, 10]
// 10 in base2 = 1010
// 10 in base3 = 101
// 10 in base8 = 12
// 10 in base10 = 10

23 ‚ûû [3, 5, 7, 10]
// 23 in base3 = 212
// 23 in base5 = 43
// 23 in base7 = 32
// 23 in base10 = 23

666 ‚ûû [8]
// 666 in base8 = 1232
========================================
URL: https://www.codewars.com/kata/6545283611df271da7f8418c
–ó–∞–¥–∞—á–∞:
A number is Esthetic if, in any base from base2 up to base10, the absolute difference between every pair of its adjacent digits is constantly equal to 1.
num = 441 (base10)
// Adjacent pairs of digits:
// |4, 4|, |4, 1|
// The absolute difference is not constant
// 441 is not Esthetic in base10

441 in base4 = 12321
// Adjacent pairs of digits:
// |1, 2|, |2, 3|, |3, 2|, |2, 1|
// The absolute difference is constant and is equal to 1
// 441 is Esthetic in base4

Given a positive integer num, implement a function that returns an array containing the bases (as integers from 2 up to 10) in which num results to be Esthetic, or an empty array [] if no base makes num Esthetic.
Examples
10 ‚ûû [2, 3, 8, 10]
// 10 in base2 = 1010
// 10 in base3 = 101
// 10 in base8 = 12
// 10 in base10 = 10

23 ‚ûû [3, 5, 7, 10]
// 23 in base3 = 212
// 23 in base5 = 43
// 23 in base7 = 32
// 23 in base10 = 23

666 ‚ûû [8]
// 666 in base8 = 1232
========================================
URL: https://www.codewars.com/kata/653db02b1eca91b474817307
–ó–∞–¥–∞—á–∞:
A number is Esthetic if, in any base from base2 up to base10, the absolute difference between every pair of its adjacent digits is constantly equal to 1.
num = 441 (base10)
// Adjacent pairs of digits:
// |4, 4|, |4, 1|
// The absolute difference is not constant
// 441 is not Esthetic in base10

441 in base4 = 12321
// Adjacent pairs of digits:
// |1, 2|, |2, 3|, |3, 2|, |2, 1|
// The absolute difference is constant and is equal to 1
// 441 is Esthetic in base4

Given a positive integer num, implement a function that returns an array containing the bases (as integers from 2 up to 10) in which num results to be Esthetic, or an empty array [] if no base makes num Esthetic.
Examples
10 ‚ûû [2, 3, 8, 10]
// 10 in base2 = 1010
// 10 in base3 = 101
// 10 in base8 = 12
// 10 in base10 = 10

23 ‚ûû [3, 5, 7, 10]
// 23 in base3 = 212
// 23 in base5 = 43
// 23 in base7 = 32
// 23 in base10 = 23

666 ‚ûû [8]
// 666 in base8 = 1232
========================================
URL: https://www.codewars.com/kata/6525caefd77c582baf678ddf
–ó–∞–¥–∞—á–∞:
A number is Esthetic if, in any base from base2 up to base10, the absolute difference between every pair of its adjacent digits is constantly equal to 1.
num = 441 (base10)
// Adjacent pairs of digits:
// |4, 4|, |4, 1|
// The absolute difference is not constant
// 441 is not Esthetic in base10

441 in base4 = 12321
// Adjacent pairs of digits:
// |1, 2|, |2, 3|, |3, 2|, |2, 1|
// The absolute difference is constant and is equal to 1
// 441 is Esthetic in base4

Given a positive integer num, implement a function that returns an array containing the bases (as integers from 2 up to 10) in which num results to be Esthetic, or an empty array [] if no base makes num Esthetic.
Examples
10 ‚ûû [2, 3, 8, 10]
// 10 in base2 = 1010
// 10 in base3 = 101
// 10 in base8 = 12
// 10 in base10 = 10

23 ‚ûû [3, 5, 7, 10]
// 23 in base3 = 212
// 23 in base5 = 43
// 23 in base7 = 32
// 23 in base10 = 23

666 ‚ûû [8]
// 666 in base8 = 1232
========================================
URL: https://www.codewars.com/kata/65553172219a8c8e263b58ff
–ó–∞–¥–∞—á–∞:
A number is Esthetic if, in any base from base2 up to base10, the absolute difference between every pair of its adjacent digits is constantly equal to 1.
num = 441 (base10)
// Adjacent pairs of digits:
// |4, 4|, |4, 1|
// The absolute difference is not constant
// 441 is not Esthetic in base10

441 in base4 = 12321
// Adjacent pairs of digits:
// |1, 2|, |2, 3|, |3, 2|, |2, 1|
// The absolute difference is constant and is equal to 1
// 441 is Esthetic in base4

Given a positive integer num, implement a function that returns an array containing the bases (as integers from 2 up to 10) in which num results to be Esthetic, or an empty array [] if no base makes num Esthetic.
Examples
10 ‚ûû [2, 3, 8, 10]
// 10 in base2 = 1010
// 10 in base3 = 101
// 10 in base8 = 12
// 10 in base10 = 10

23 ‚ûû [3, 5, 7, 10]
// 23 in base3 = 212
// 23 in base5 = 43
// 23 in base7 = 32
// 23 in base10 = 23

666 ‚ûû [8]
// 666 in base8 = 1232
========================================
URL: https://www.codewars.com/kata/6515e6788f32503cd5b1ee51
–ó–∞–¥–∞—á–∞:
Two players draw a pair of numbered cards so that both players can form a 2 digit number. A winner can be decided if one player's number is larger than the other.
However, there is a rule where a player can swap any one of their cards with any one of the other player's cards in a gamble to get a higher number! Note that it is illegal to swap the order of your own cards. That means if you draw a 1 then a 9, you cannot swap them to get 91.

Paul's strategy is to always swap his lowest number with the opponent's ten's digit. Return whether this results in Paul winning the round.

n1 is Paul's number
n2 is his opponent's number

Worked Example
(41, 79) ‚ûû true
# Paul's lowest number is 1
# The opponent's ten's digit is 7
# After the swap: 47 > 19
# Paul wins the round

Examples
(41, 98) ‚ûû true

(12, 28) ‚ûû true

(67, 53) ‚ûû false

(77, 54) ‚ûû false

Notes

If both of Paul's digits are the same, swap the ten's digit with the opponent's (paul likes to live riskily).
The cards don't include the number 0.
11 <= All numbers <= 99 (excluding numbers containing 0)
========================================
URL: https://www.codewars.com/kata/6512c786a07f6a000fe7a274
–ó–∞–¥–∞—á–∞:
Two players draw a pair of numbered cards so that both players can form a 2 digit number. A winner can be decided if one player's number is larger than the other.
However, there is a rule where a player can swap any one of their cards with any one of the other player's cards in a gamble to get a higher number! Note that it is illegal to swap the order of your own cards. That means if you draw a 1 then a 9, you cannot swap them to get 91.

Paul's strategy is to always swap his lowest number with the opponent's ten's digit. Return whether this results in Paul winning the round.

n1 is Paul's number
n2 is his opponent's number

Worked Example
(41, 79) ‚ûû true
# Paul's lowest number is 1
# The opponent's ten's digit is 7
# After the swap: 47 > 19
# Paul wins the round

Examples
(41, 98) ‚ûû true

(12, 28) ‚ûû true

(67, 53) ‚ûû false

(77, 54) ‚ûû false

Notes

If both of Paul's digits are the same, swap the ten's digit with the opponent's (paul likes to live riskily).
The cards don't include the number 0.
11 <= All numbers <= 99 (excluding numbers containing 0)
========================================
URL: https://www.codewars.com/kata/65128d27a5de2b3539408d83
–ó–∞–¥–∞—á–∞:
Two players draw a pair of numbered cards so that both players can form a 2 digit number. A winner can be decided if one player's number is larger than the other.
However, there is a rule where a player can swap any one of their cards with any one of the other player's cards in a gamble to get a higher number! Note that it is illegal to swap the order of your own cards. That means if you draw a 1 then a 9, you cannot swap them to get 91.

Paul's strategy is to always swap his lowest number with the opponent's ten's digit. Return whether this results in Paul winning the round.

n1 is Paul's number
n2 is his opponent's number

Worked Example
(41, 79) ‚ûû true
# Paul's lowest number is 1
# The opponent's ten's digit is 7
# After the swap: 47 > 19
# Paul wins the round

Examples
(41, 98) ‚ûû true

(12, 28) ‚ûû true

(67, 53) ‚ûû false

(77, 54) ‚ûû false

Notes

If both of Paul's digits are the same, swap the ten's digit with the opponent's (paul likes to live riskily).
The cards don't include the number 0.
11 <= All numbers <= 99 (excluding numbers containing 0)
========================================
URL: https://www.codewars.com/kata/65127302a5de2b11c940973d
–ó–∞–¥–∞—á–∞:
Two players draw a pair of numbered cards so that both players can form a 2 digit number. A winner can be decided if one player's number is larger than the other.
However, there is a rule where a player can swap any one of their cards with any one of the other player's cards in a gamble to get a higher number! Note that it is illegal to swap the order of your own cards. That means if you draw a 1 then a 9, you cannot swap them to get 91.

Paul's strategy is to always swap his lowest number with the opponent's ten's digit. Return whether this results in Paul winning the round.

n1 is Paul's number
n2 is his opponent's number

Worked Example
(41, 79) ‚ûû true
# Paul's lowest number is 1
# The opponent's ten's digit is 7
# After the swap: 47 > 19
# Paul wins the round

Examples
(41, 98) ‚ûû true

(12, 28) ‚ûû true

(67, 53) ‚ûû false

(77, 54) ‚ûû false

Notes

If both of Paul's digits are the same, swap the ten's digit with the opponent's (paul likes to live riskily).
The cards don't include the number 0.
11 <= All numbers <= 99 (excluding numbers containing 0)
========================================
URL: https://www.codewars.com/kata/6512b3775bf8500baea77663
–ó–∞–¥–∞—á–∞:
Two players draw a pair of numbered cards so that both players can form a 2 digit number. A winner can be decided if one player's number is larger than the other.
However, there is a rule where a player can swap any one of their cards with any one of the other player's cards in a gamble to get a higher number! Note that it is illegal to swap the order of your own cards. That means if you draw a 1 then a 9, you cannot swap them to get 91.

Paul's strategy is to always swap his lowest number with the opponent's ten's digit. Return whether this results in Paul winning the round.

n1 is Paul's number
n2 is his opponent's number

Worked Example
(41, 79) ‚ûû true
# Paul's lowest number is 1
# The opponent's ten's digit is 7
# After the swap: 47 > 19
# Paul wins the round

Examples
(41, 98) ‚ûû true

(12, 28) ‚ûû true

(67, 53) ‚ûû false

(77, 54) ‚ûû false

Notes

If both of Paul's digits are the same, swap the ten's digit with the opponent's (paul likes to live riskily).
The cards don't include the number 0.
11 <= All numbers <= 99 (excluding numbers containing 0)
========================================
URL: https://www.codewars.com/kata/65127141a5de2b1dcb40927e
–ó–∞–¥–∞—á–∞:
Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Similarly, we can nest lists by placing smaller lists into larger ones, following specific rules.
Rules for Nesting:

List A can be nested inside List B if:
The minimum value in List A is greater than the minimum value in List B.
The maximum value in List A is smaller than the maximum value in List B.



Example 1:

List A: [2, 3, 9, 5]
List B: [10, 2, 1]
Explanation:
min(A) = 2 > 1 = min(B)
max(A) = 9 < 10 = max(B)


Result: A can be nested inside B.

Example 2:

List A: [4, 5]
List B: [6, 3]
Explanation:
min(A) = 4 > 3 = min(B)
max(A) = 5 < 6 = max(B)


Result: A can be nested inside B.

Example 3:

List A: [7, 1]
List B: [7, 6, 5, 4, 3, 2]
Explanation:
Both lists share the same maximum value (7).


Result: A cannot be nested properly inside B.

Example 4:

List A: [1, 5]
List B: [2, 6]
Explanation:
Elements in the lists overlap, making nesting impossible.


Result: A cannot be nested inside B.

Example 5:

List A: [1,2,3,4]
List B: [0,3,5]
List C: [2,2,3]]
Explanation:
List C and List A meet the criteria because 2 > 1 and 3 < 4.
List A and List B also meet the criteria because 1 > 0 and 4 < 5.


Result: List B can be nested inside List A, and List A can be nested inside List C.

Additional Notes:

Sublists can be nested in either ascending (smallest to largest) or descending (largest to smallest) order.
Strict nesting is required; no two lists can share the same maximum or minimum values.
========================================
URL: https://www.codewars.com/kata/65126a26597b8597d809de48
–ó–∞–¥–∞—á–∞:
Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Similarly, we can nest lists by placing smaller lists into larger ones, following specific rules.
Rules for Nesting:

List A can be nested inside List B if:
The minimum value in List A is greater than the minimum value in List B.
The maximum value in List A is smaller than the maximum value in List B.



Example 1:

List A: [2, 3, 9, 5]
List B: [10, 2, 1]
Explanation:
min(A) = 2 > 1 = min(B)
max(A) = 9 < 10 = max(B)


Result: A can be nested inside B.

Example 2:

List A: [4, 5]
List B: [6, 3]
Explanation:
min(A) = 4 > 3 = min(B)
max(A) = 5 < 6 = max(B)


Result: A can be nested inside B.

Example 3:

List A: [7, 1]
List B: [7, 6, 5, 4, 3, 2]
Explanation:
Both lists share the same maximum value (7).


Result: A cannot be nested properly inside B.

Example 4:

List A: [1, 5]
List B: [2, 6]
Explanation:
Elements in the lists overlap, making nesting impossible.


Result: A cannot be nested inside B.

Example 5:

List A: [1,2,3,4]
List B: [0,3,5]
List C: [2,2,3]]
Explanation:
List C and List A meet the criteria because 2 > 1 and 3 < 4.
List A and List B also meet the criteria because 1 > 0 and 4 < 5.


Result: List B can be nested inside List A, and List A can be nested inside List C.

Additional Notes:

Sublists can be nested in either ascending (smallest to largest) or descending (largest to smallest) order.
Strict nesting is required; no two lists can share the same maximum or minimum values.
========================================
URL: https://www.codewars.com/kata/65112af7056ad6004b5672f8
–ó–∞–¥–∞—á–∞:
Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Similarly, we can nest lists by placing smaller lists into larger ones, following specific rules.
Rules for Nesting:

List A can be nested inside List B if:
The minimum value in List A is greater than the minimum value in List B.
The maximum value in List A is smaller than the maximum value in List B.



Example 1:

List A: [2, 3, 9, 5]
List B: [10, 2, 1]
Explanation:
min(A) = 2 > 1 = min(B)
max(A) = 9 < 10 = max(B)


Result: A can be nested inside B.

Example 2:

List A: [4, 5]
List B: [6, 3]
Explanation:
min(A) = 4 > 3 = min(B)
max(A) = 5 < 6 = max(B)


Result: A can be nested inside B.

Example 3:

List A: [7, 1]
List B: [7, 6, 5, 4, 3, 2]
Explanation:
Both lists share the same maximum value (7).


Result: A cannot be nested properly inside B.

Example 4:

List A: [1, 5]
List B: [2, 6]
Explanation:
Elements in the lists overlap, making nesting impossible.


Result: A cannot be nested inside B.

Example 5:

List A: [1,2,3,4]
List B: [0,3,5]
List C: [2,2,3]]
Explanation:
List C and List A meet the criteria because 2 > 1 and 3 < 4.
List A and List B also meet the criteria because 1 > 0 and 4 < 5.


Result: List B can be nested inside List A, and List A can be nested inside List C.

Additional Notes:

Sublists can be nested in either ascending (smallest to largest) or descending (largest to smallest) order.
Strict nesting is required; no two lists can share the same maximum or minimum values.
========================================
URL: https://www.codewars.com/kata/6510238b4840140017234427
–ó–∞–¥–∞—á–∞:
Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Similarly, we can nest lists by placing smaller lists into larger ones, following specific rules.
Rules for Nesting:

List A can be nested inside List B if:
The minimum value in List A is greater than the minimum value in List B.
The maximum value in List A is smaller than the maximum value in List B.



Example 1:

List A: [2, 3, 9, 5]
List B: [10, 2, 1]
Explanation:
min(A) = 2 > 1 = min(B)
max(A) = 9 < 10 = max(B)


Result: A can be nested inside B.

Example 2:

List A: [4, 5]
List B: [6, 3]
Explanation:
min(A) = 4 > 3 = min(B)
max(A) = 5 < 6 = max(B)


Result: A can be nested inside B.

Example 3:

List A: [7, 1]
List B: [7, 6, 5, 4, 3, 2]
Explanation:
Both lists share the same maximum value (7).


Result: A cannot be nested properly inside B.

Example 4:

List A: [1, 5]
List B: [2, 6]
Explanation:
Elements in the lists overlap, making nesting impossible.


Result: A cannot be nested inside B.

Example 5:

List A: [1,2,3,4]
List B: [0,3,5]
List C: [2,2,3]]
Explanation:
List C and List A meet the criteria because 2 > 1 and 3 < 4.
List A and List B also meet the criteria because 1 > 0 and 4 < 5.


Result: List B can be nested inside List A, and List A can be nested inside List C.

Additional Notes:

Sublists can be nested in either ascending (smallest to largest) or descending (largest to smallest) order.
Strict nesting is required; no two lists can share the same maximum or minimum values.
========================================
URL: https://www.codewars.com/kata/65126d52a5de2b11c94096d2
–ó–∞–¥–∞—á–∞:
Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Similarly, we can nest lists by placing smaller lists into larger ones, following specific rules.
Rules for Nesting:

List A can be nested inside List B if:
The minimum value in List A is greater than the minimum value in List B.
The maximum value in List A is smaller than the maximum value in List B.



Example 1:

List A: [2, 3, 9, 5]
List B: [10, 2, 1]
Explanation:
min(A) = 2 > 1 = min(B)
max(A) = 9 < 10 = max(B)


Result: A can be nested inside B.

Example 2:

List A: [4, 5]
List B: [6, 3]
Explanation:
min(A) = 4 > 3 = min(B)
max(A) = 5 < 6 = max(B)


Result: A can be nested inside B.

Example 3:

List A: [7, 1]
List B: [7, 6, 5, 4, 3, 2]
Explanation:
Both lists share the same maximum value (7).


Result: A cannot be nested properly inside B.

Example 4:

List A: [1, 5]
List B: [2, 6]
Explanation:
Elements in the lists overlap, making nesting impossible.


Result: A cannot be nested inside B.

Example 5:

List A: [1,2,3,4]
List B: [0,3,5]
List C: [2,2,3]]
Explanation:
List C and List A meet the criteria because 2 > 1 and 3 < 4.
List A and List B also meet the criteria because 1 > 0 and 4 < 5.


Result: List B can be nested inside List A, and List A can be nested inside List C.

Additional Notes:

Sublists can be nested in either ascending (smallest to largest) or descending (largest to smallest) order.
Strict nesting is required; no two lists can share the same maximum or minimum values.
========================================
URL: https://www.codewars.com/kata/650a86e8404241005fc744ca
–ó–∞–¥–∞—á–∞:
Traditional safes use a three-wheel locking mechanism, with the safe combination entered using a dial on the door of the safe. The dial is marked with clockwise increments between 0 and 99. The three-number combination is entered by first dialling to the right (clockwise), then to the left (anti-clockwise), and then to the right (clockwise) again. Combination numbers are read from the top of the dial:

Given the starting (top) position of the dial and the increments used for each turn of the dial, return a tuple containing the combination of the safe.
Step-By-Step Example
(0, (3, 10, 5)) ‚ûû (97, 7, 2)

Starting dial position of 0 (same as the diagram above).

First turn (rightward) of 3 increments:
0 -> 99, 98, 97
First number of combination = 97

Second turn (leftward) of 10 increments:
97 -> 98, 99, 0, 1, 2, 3, 4, 5, 6, 7
Second number of combination = 7

Third turn (rightward) of 5 increments:
7 -> 6, 5, 4, 3, 2
Third number of combination = 2

The final combination is (97, 7, 2)

Other Examples
(96, (54, 48, 77)) ‚ûû (42, 90, 13)

(43, (51, 38, 46)) ‚ûû (92, 30, 84)

(4, (69, 88, 55)) ‚ûû (35, 23, 68)

Notes

Two consecutive numbers will equal
Values greater than 100 may be provided
========================================
URL: https://www.codewars.com/kata/65080590b6b5ee01db990ca1
–ó–∞–¥–∞—á–∞:
Traditional safes use a three-wheel locking mechanism, with the safe combination entered using a dial on the door of the safe. The dial is marked with clockwise increments between 0 and 99. The three-number combination is entered by first dialling to the right (clockwise), then to the left (anti-clockwise), and then to the right (clockwise) again. Combination numbers are read from the top of the dial:

Given the starting (top) position of the dial and the increments used for each turn of the dial, return a tuple containing the combination of the safe.
Step-By-Step Example
(0, (3, 10, 5)) ‚ûû (97, 7, 2)

Starting dial position of 0 (same as the diagram above).

First turn (rightward) of 3 increments:
0 -> 99, 98, 97
First number of combination = 97

Second turn (leftward) of 10 increments:
97 -> 98, 99, 0, 1, 2, 3, 4, 5, 6, 7
Second number of combination = 7

Third turn (rightward) of 5 increments:
7 -> 6, 5, 4, 3, 2
Third number of combination = 2

The final combination is (97, 7, 2)

Other Examples
(96, (54, 48, 77)) ‚ûû (42, 90, 13)

(43, (51, 38, 46)) ‚ûû (92, 30, 84)

(4, (69, 88, 55)) ‚ûû (35, 23, 68)

Notes

Two consecutive numbers will equal
Values greater than 100 may be provided
========================================
URL: https://www.codewars.com/kata/6507e3170b7009117e0c7865
–ó–∞–¥–∞—á–∞:
Traditional safes use a three-wheel locking mechanism, with the safe combination entered using a dial on the door of the safe. The dial is marked with clockwise increments between 0 and 99. The three-number combination is entered by first dialling to the right (clockwise), then to the left (anti-clockwise), and then to the right (clockwise) again. Combination numbers are read from the top of the dial:

Given the starting (top) position of the dial and the increments used for each turn of the dial, return a tuple containing the combination of the safe.
Step-By-Step Example
(0, (3, 10, 5)) ‚ûû (97, 7, 2)

Starting dial position of 0 (same as the diagram above).

First turn (rightward) of 3 increments:
0 -> 99, 98, 97
First number of combination = 97

Second turn (leftward) of 10 increments:
97 -> 98, 99, 0, 1, 2, 3, 4, 5, 6, 7
Second number of combination = 7

Third turn (rightward) of 5 increments:
7 -> 6, 5, 4, 3, 2
Third number of combination = 2

The final combination is (97, 7, 2)

Other Examples
(96, (54, 48, 77)) ‚ûû (42, 90, 13)

(43, (51, 38, 46)) ‚ûû (92, 30, 84)

(4, (69, 88, 55)) ‚ûû (35, 23, 68)

Notes

Two consecutive numbers will equal
Values greater than 100 may be provided
========================================
URL: https://www.codewars.com/kata/6502ea6bd504f305f3badbe3
–ó–∞–¥–∞—á–∞:
Traditional safes use a three-wheel locking mechanism, with the safe combination entered using a dial on the door of the safe. The dial is marked with clockwise increments between 0 and 99. The three-number combination is entered by first dialling to the right (clockwise), then to the left (anti-clockwise), and then to the right (clockwise) again. Combination numbers are read from the top of the dial:

Given the starting (top) position of the dial and the increments used for each turn of the dial, return a tuple containing the combination of the safe.
Step-By-Step Example
(0, (3, 10, 5)) ‚ûû (97, 7, 2)

Starting dial position of 0 (same as the diagram above).

First turn (rightward) of 3 increments:
0 -> 99, 98, 97
First number of combination = 97

Second turn (leftward) of 10 increments:
97 -> 98, 99, 0, 1, 2, 3, 4, 5, 6, 7
Second number of combination = 7

Third turn (rightward) of 5 increments:
7 -> 6, 5, 4, 3, 2
Third number of combination = 2

The final combination is (97, 7, 2)

Other Examples
(96, (54, 48, 77)) ‚ûû (42, 90, 13)

(43, (51, 38, 46)) ‚ûû (92, 30, 84)

(4, (69, 88, 55)) ‚ûû (35, 23, 68)

Notes

Two consecutive numbers will equal
Values greater than 100 may be provided
========================================
URL: https://www.codewars.com/kata/6501aa820038a6b0bd098afb
–ó–∞–¥–∞—á–∞:
Traditional safes use a three-wheel locking mechanism, with the safe combination entered using a dial on the door of the safe. The dial is marked with clockwise increments between 0 and 99. The three-number combination is entered by first dialling to the right (clockwise), then to the left (anti-clockwise), and then to the right (clockwise) again. Combination numbers are read from the top of the dial:

Given the starting (top) position of the dial and the increments used for each turn of the dial, return a tuple containing the combination of the safe.
Step-By-Step Example
(0, (3, 10, 5)) ‚ûû (97, 7, 2)

Starting dial position of 0 (same as the diagram above).

First turn (rightward) of 3 increments:
0 -> 99, 98, 97
First number of combination = 97

Second turn (leftward) of 10 increments:
97 -> 98, 99, 0, 1, 2, 3, 4, 5, 6, 7
Second number of combination = 7

Third turn (rightward) of 5 increments:
7 -> 6, 5, 4, 3, 2
Third number of combination = 2

The final combination is (97, 7, 2)

Other Examples
(96, (54, 48, 77)) ‚ûû (42, 90, 13)

(43, (51, 38, 46)) ‚ûû (92, 30, 84)

(4, (69, 88, 55)) ‚ûû (35, 23, 68)

Notes

Two consecutive numbers will equal
Values greater than 100 may be provided
========================================
URL: https://www.codewars.com/kata/65013fc50038a68939098dcf
–ó–∞–¥–∞—á–∞:
Task
Heading off to the Tree Arboretum of Various Heights, I bring along my camera to snap up a few photos. Ideally, I'd want to take a picture of as many trees as possible, but the taller trees may cover up the shorter trees behind it.
A tree is hidden if it is shorter than or the same height as a ( any ) tree in front of it, as seen in a particular direction.
Given a list of tree heights, create a function which returns "left" or "right", depending on which side allows me to see as many trees as possible.
Worked Example
[1, 3, 1, 6, 5] ‚ûû "left"
// If I stand on the left, I can see trees of heights 1, 3 and 6.
// If I stand on the right, I can see trees of heights 5 and 6.
// Return "left" because I would see more trees.

Examples
[5, 6, 5, 4] ‚ûû "right"

[1, 2, 3, 3, 3, 3, 3] ‚ûû "left"

[3, 1, 4, 1, 5, 9, 2, 6] ‚ûû "left"

Notes
There will always be a best side.
========================================
URL: https://www.codewars.com/kata/65001dd40038a647480989c8
–ó–∞–¥–∞—á–∞:
Task
Heading off to the Tree Arboretum of Various Heights, I bring along my camera to snap up a few photos. Ideally, I'd want to take a picture of as many trees as possible, but the taller trees may cover up the shorter trees behind it.
A tree is hidden if it is shorter than or the same height as a ( any ) tree in front of it, as seen in a particular direction.
Given a list of tree heights, create a function which returns "left" or "right", depending on which side allows me to see as many trees as possible.
Worked Example
[1, 3, 1, 6, 5] ‚ûû "left"
// If I stand on the left, I can see trees of heights 1, 3 and 6.
// If I stand on the right, I can see trees of heights 5 and 6.
// Return "left" because I would see more trees.

Examples
[5, 6, 5, 4] ‚ûû "right"

[1, 2, 3, 3, 3, 3, 3] ‚ûû "left"

[3, 1, 4, 1, 5, 9, 2, 6] ‚ûû "left"

Notes
There will always be a best side.
========================================
URL: https://www.codewars.com/kata/65006177f534f65b2594df05
–ó–∞–¥–∞—á–∞:
Task
Heading off to the Tree Arboretum of Various Heights, I bring along my camera to snap up a few photos. Ideally, I'd want to take a picture of as many trees as possible, but the taller trees may cover up the shorter trees behind it.
A tree is hidden if it is shorter than or the same height as a ( any ) tree in front of it, as seen in a particular direction.
Given a list of tree heights, create a function which returns "left" or "right", depending on which side allows me to see as many trees as possible.
Worked Example
[1, 3, 1, 6, 5] ‚ûû "left"
// If I stand on the left, I can see trees of heights 1, 3 and 6.
// If I stand on the right, I can see trees of heights 5 and 6.
// Return "left" because I would see more trees.

Examples
[5, 6, 5, 4] ‚ûû "right"

[1, 2, 3, 3, 3, 3, 3] ‚ûû "left"

[3, 1, 4, 1, 5, 9, 2, 6] ‚ûû "left"

Notes
There will always be a best side.
========================================
URL: https://www.codewars.com/kata/650017e142964e000f19cac3
–ó–∞–¥–∞—á–∞:
Task
Heading off to the Tree Arboretum of Various Heights, I bring along my camera to snap up a few photos. Ideally, I'd want to take a picture of as many trees as possible, but the taller trees may cover up the shorter trees behind it.
A tree is hidden if it is shorter than or the same height as a ( any ) tree in front of it, as seen in a particular direction.
Given a list of tree heights, create a function which returns "left" or "right", depending on which side allows me to see as many trees as possible.
Worked Example
[1, 3, 1, 6, 5] ‚ûû "left"
// If I stand on the left, I can see trees of heights 1, 3 and 6.
// If I stand on the right, I can see trees of heights 5 and 6.
// Return "left" because I would see more trees.

Examples
[5, 6, 5, 4] ‚ûû "right"

[1, 2, 3, 3, 3, 3, 3] ‚ûû "left"

[3, 1, 4, 1, 5, 9, 2, 6] ‚ûû "left"

Notes
There will always be a best side.
========================================
URL: https://www.codewars.com/kata/64fd5072fa88ae669bf15342
–ó–∞–¥–∞—á–∞:
Task
Heading off to the Tree Arboretum of Various Heights, I bring along my camera to snap up a few photos. Ideally, I'd want to take a picture of as many trees as possible, but the taller trees may cover up the shorter trees behind it.
A tree is hidden if it is shorter than or the same height as a ( any ) tree in front of it, as seen in a particular direction.
Given a list of tree heights, create a function which returns "left" or "right", depending on which side allows me to see as many trees as possible.
Worked Example
[1, 3, 1, 6, 5] ‚ûû "left"
// If I stand on the left, I can see trees of heights 1, 3 and 6.
// If I stand on the right, I can see trees of heights 5 and 6.
// Return "left" because I would see more trees.

Examples
[5, 6, 5, 4] ‚ûû "right"

[1, 2, 3, 3, 3, 3, 3] ‚ûû "left"

[3, 1, 4, 1, 5, 9, 2, 6] ‚ûû "left"

Notes
There will always be a best side.
========================================
URL: https://www.codewars.com/kata/64fc03a318692c1333ebc04c
–ó–∞–¥–∞—á–∞:
Task
Imagine you have a list of integers. You start at the first item and use each value as a guide to decide where to go next.
Create a function that determines whether the input list forms a complete cycle or not.

Examples
[1, 4, 3, 0, 2] ‚ûû True

# When you follow the list [1, 4, 3, 0, 2] as shown in the image,
# you visit every item once and return to the starting point, making it a "full cycle."

[1, 4, 0, 3, 2] ‚ûû False

[5, 3, 4, 2, 0, 1] ‚ûû True

Notes

The list will not contain any duplicate values.
All values are less than the length of the list (i.e., they are valid indices).
2 <= len(lst) <= 100
========================================
URL: https://www.codewars.com/kata/64fc00392b610b1901ff0f17
–ó–∞–¥–∞—á–∞:
Task
Imagine you have a list of integers. You start at the first item and use each value as a guide to decide where to go next.
Create a function that determines whether the input list forms a complete cycle or not.

Examples
[1, 4, 3, 0, 2] ‚ûû True

# When you follow the list [1, 4, 3, 0, 2] as shown in the image,
# you visit every item once and return to the starting point, making it a "full cycle."

[1, 4, 0, 3, 2] ‚ûû False

[5, 3, 4, 2, 0, 1] ‚ûû True

Notes

The list will not contain any duplicate values.
All values are less than the length of the list (i.e., they are valid indices).
2 <= len(lst) <= 100
========================================
URL: https://www.codewars.com/kata/64f41ad92b610b64c1067590
–ó–∞–¥–∞—á–∞:
Task
Imagine you have a list of integers. You start at the first item and use each value as a guide to decide where to go next.
Create a function that determines whether the input list forms a complete cycle or not.

Examples
[1, 4, 3, 0, 2] ‚ûû True

# When you follow the list [1, 4, 3, 0, 2] as shown in the image,
# you visit every item once and return to the starting point, making it a "full cycle."

[1, 4, 0, 3, 2] ‚ûû False

[5, 3, 4, 2, 0, 1] ‚ûû True

Notes

The list will not contain any duplicate values.
All values are less than the length of the list (i.e., they are valid indices).
2 <= len(lst) <= 100
========================================
URL: https://www.codewars.com/kata/64fbfa3518692c2ed0ebbaa2
–ó–∞–¥–∞—á–∞:
Task
Imagine you have a list of integers. You start at the first item and use each value as a guide to decide where to go next.
Create a function that determines whether the input list forms a complete cycle or not.

Examples
[1, 4, 3, 0, 2] ‚ûû True

# When you follow the list [1, 4, 3, 0, 2] as shown in the image,
# you visit every item once and return to the starting point, making it a "full cycle."

[1, 4, 0, 3, 2] ‚ûû False

[5, 3, 4, 2, 0, 1] ‚ûû True

Notes

The list will not contain any duplicate values.
All values are less than the length of the list (i.e., they are valid indices).
2 <= len(lst) <= 100
========================================
URL: https://www.codewars.com/kata/64ef45cbcb89751e91ddbf9f
–ó–∞–¥–∞—á–∞:
Spark plugs, distributor wires, and firing order.
Your car's engine operates by containing tiny explosions caused by gas being ignited by spark plugs, which compresses a pistion, causing the engine to turn. Spark plugs are sparked by receiving electrical signal through a wire connected to a distributing system.  If you're curious, here's an explanation of the whole process. If you watch the video, you can ignore the formulas, as this kata is about firing order, and not combustion physics. 

  In short, to make sure that this process is balanced, and engine rotation is maintained constantly, each cylinder of an engine is fired in an order determined by the manufacturer. There are a few cases where optimal order is very well documented. For example, with an inline 4-cylinder engine, 'I4' the optimal firing order is 1-3-4-2. Because of this, most (but not all...) manufacturers use this order. With different engine layouts, and sizes, sometimes manufacturers will change the order slightly to give more power but less balance, or less power and more engine longevity.
Please note: This is not car repair advice. If you think your car has a misfire, please look up the exact engine your car uses before attempting any of these sequences. AKA have fun, trust the mechanic instead of random internet man.
Your task is relatively simple
Write a function helps us diagnose where a misfire is located. A misfire is typically caused by a faulty wire, or old spark plug. This causes the engine to fire on every cylinder except the one that is bad. For example, with our typical inline 4 engine, if cylinder #3 has a misfire, the engine would receive full rotation in #1, #4, and #2, but #3 would give no rotation at all, causing major issues. For our case, we are assuming that an engine needs at least 1 cylinder functioning for us to diagnose the bad cylinders.
Your function should take one argument, which is a string with the following syntax:
                MAKE | ENGINE SIZE  |  CURRENT ORDER
                -----+--------------+----------------
                Ford |      V8      | 1-X-4-2-X-3-X-8

An "X" indicates a cylinder that has not fired. Your goal is to return a string with the correct cylinder number, in the correct sequence for that make and engine size. In the example above, the correct return value is: "5-6-7". If there are no misfires, return an empty string. You have been provided with a python nested dictionary named CARS that you can call as you please. All elements of CARS are strings. The maker is the first key, the engine size is the second key. Below examples that will be included in the test cases.
INPUT: 'Ford V8 1-X-4-2-X-3-X-8' |  OUTPUT: '5-6-7'
INPUT: 'Cadillac V6 1-2-3-4-5-6' |  OUTPUT: ''
INPUT: 'GMC I4 1-X-4-2' |  OUTPUT: '3'
INPUT: 'Dodge V10 1-X-X-4-3-6-5-X-X-2' |  OUTPUT: '10-9-8-7'
========================================
URL: https://www.codewars.com/kata/64ef24b0679cdc004d08169e
–ó–∞–¥–∞—á–∞:
Spark plugs, distributor wires, and firing order.
Your car's engine operates by containing tiny explosions caused by gas being ignited by spark plugs, which compresses a pistion, causing the engine to turn. Spark plugs are sparked by receiving electrical signal through a wire connected to a distributing system.  If you're curious, here's an explanation of the whole process. If you watch the video, you can ignore the formulas, as this kata is about firing order, and not combustion physics. 

  In short, to make sure that this process is balanced, and engine rotation is maintained constantly, each cylinder of an engine is fired in an order determined by the manufacturer. There are a few cases where optimal order is very well documented. For example, with an inline 4-cylinder engine, 'I4' the optimal firing order is 1-3-4-2. Because of this, most (but not all...) manufacturers use this order. With different engine layouts, and sizes, sometimes manufacturers will change the order slightly to give more power but less balance, or less power and more engine longevity.
Please note: This is not car repair advice. If you think your car has a misfire, please look up the exact engine your car uses before attempting any of these sequences. AKA have fun, trust the mechanic instead of random internet man.
Your task is relatively simple
Write a function helps us diagnose where a misfire is located. A misfire is typically caused by a faulty wire, or old spark plug. This causes the engine to fire on every cylinder except the one that is bad. For example, with our typical inline 4 engine, if cylinder #3 has a misfire, the engine would receive full rotation in #1, #4, and #2, but #3 would give no rotation at all, causing major issues. For our case, we are assuming that an engine needs at least 1 cylinder functioning for us to diagnose the bad cylinders.
Your function should take one argument, which is a string with the following syntax:
                MAKE | ENGINE SIZE  |  CURRENT ORDER
                -----+--------------+----------------
                Ford |      V8      | 1-X-4-2-X-3-X-8

An "X" indicates a cylinder that has not fired. Your goal is to return a string with the correct cylinder number, in the correct sequence for that make and engine size. In the example above, the correct return value is: "5-6-7". If there are no misfires, return an empty string. You have been provided with a python nested dictionary named CARS that you can call as you please. All elements of CARS are strings. The maker is the first key, the engine size is the second key. Below examples that will be included in the test cases.
INPUT: 'Ford V8 1-X-4-2-X-3-X-8' |  OUTPUT: '5-6-7'
INPUT: 'Cadillac V6 1-2-3-4-5-6' |  OUTPUT: ''
INPUT: 'GMC I4 1-X-4-2' |  OUTPUT: '3'
INPUT: 'Dodge V10 1-X-X-4-3-6-5-X-X-2' |  OUTPUT: '10-9-8-7'
========================================
URL: https://www.codewars.com/kata/64dbfcbcf9ab18004d15d17e
–ó–∞–¥–∞—á–∞:
Spark plugs, distributor wires, and firing order.
Your car's engine operates by containing tiny explosions caused by gas being ignited by spark plugs, which compresses a pistion, causing the engine to turn. Spark plugs are sparked by receiving electrical signal through a wire connected to a distributing system.  If you're curious, here's an explanation of the whole process. If you watch the video, you can ignore the formulas, as this kata is about firing order, and not combustion physics. 

  In short, to make sure that this process is balanced, and engine rotation is maintained constantly, each cylinder of an engine is fired in an order determined by the manufacturer. There are a few cases where optimal order is very well documented. For example, with an inline 4-cylinder engine, 'I4' the optimal firing order is 1-3-4-2. Because of this, most (but not all...) manufacturers use this order. With different engine layouts, and sizes, sometimes manufacturers will change the order slightly to give more power but less balance, or less power and more engine longevity.
Please note: This is not car repair advice. If you think your car has a misfire, please look up the exact engine your car uses before attempting any of these sequences. AKA have fun, trust the mechanic instead of random internet man.
Your task is relatively simple
Write a function helps us diagnose where a misfire is located. A misfire is typically caused by a faulty wire, or old spark plug. This causes the engine to fire on every cylinder except the one that is bad. For example, with our typical inline 4 engine, if cylinder #3 has a misfire, the engine would receive full rotation in #1, #4, and #2, but #3 would give no rotation at all, causing major issues. For our case, we are assuming that an engine needs at least 1 cylinder functioning for us to diagnose the bad cylinders.
Your function should take one argument, which is a string with the following syntax:
                MAKE | ENGINE SIZE  |  CURRENT ORDER
                -----+--------------+----------------
                Ford |      V8      | 1-X-4-2-X-3-X-8

An "X" indicates a cylinder that has not fired. Your goal is to return a string with the correct cylinder number, in the correct sequence for that make and engine size. In the example above, the correct return value is: "5-6-7". If there are no misfires, return an empty string. You have been provided with a python nested dictionary named CARS that you can call as you please. All elements of CARS are strings. The maker is the first key, the engine size is the second key. Below examples that will be included in the test cases.
INPUT: 'Ford V8 1-X-4-2-X-3-X-8' |  OUTPUT: '5-6-7'
INPUT: 'Cadillac V6 1-2-3-4-5-6' |  OUTPUT: ''
INPUT: 'GMC I4 1-X-4-2' |  OUTPUT: '3'
INPUT: 'Dodge V10 1-X-X-4-3-6-5-X-X-2' |  OUTPUT: '10-9-8-7'
========================================
URL: https://www.codewars.com/kata/64eca9a7bc3127082b0bc7dc
–ó–∞–¥–∞—á–∞:
Spark plugs, distributor wires, and firing order.
Your car's engine operates by containing tiny explosions caused by gas being ignited by spark plugs, which compresses a pistion, causing the engine to turn. Spark plugs are sparked by receiving electrical signal through a wire connected to a distributing system.  If you're curious, here's an explanation of the whole process. If you watch the video, you can ignore the formulas, as this kata is about firing order, and not combustion physics. 

  In short, to make sure that this process is balanced, and engine rotation is maintained constantly, each cylinder of an engine is fired in an order determined by the manufacturer. There are a few cases where optimal order is very well documented. For example, with an inline 4-cylinder engine, 'I4' the optimal firing order is 1-3-4-2. Because of this, most (but not all...) manufacturers use this order. With different engine layouts, and sizes, sometimes manufacturers will change the order slightly to give more power but less balance, or less power and more engine longevity.
Please note: This is not car repair advice. If you think your car has a misfire, please look up the exact engine your car uses before attempting any of these sequences. AKA have fun, trust the mechanic instead of random internet man.
Your task is relatively simple
Write a function helps us diagnose where a misfire is located. A misfire is typically caused by a faulty wire, or old spark plug. This causes the engine to fire on every cylinder except the one that is bad. For example, with our typical inline 4 engine, if cylinder #3 has a misfire, the engine would receive full rotation in #1, #4, and #2, but #3 would give no rotation at all, causing major issues. For our case, we are assuming that an engine needs at least 1 cylinder functioning for us to diagnose the bad cylinders.
Your function should take one argument, which is a string with the following syntax:
                MAKE | ENGINE SIZE  |  CURRENT ORDER
                -----+--------------+----------------
                Ford |      V8      | 1-X-4-2-X-3-X-8

An "X" indicates a cylinder that has not fired. Your goal is to return a string with the correct cylinder number, in the correct sequence for that make and engine size. In the example above, the correct return value is: "5-6-7". If there are no misfires, return an empty string. You have been provided with a python nested dictionary named CARS that you can call as you please. All elements of CARS are strings. The maker is the first key, the engine size is the second key. Below examples that will be included in the test cases.
INPUT: 'Ford V8 1-X-4-2-X-3-X-8' |  OUTPUT: '5-6-7'
INPUT: 'Cadillac V6 1-2-3-4-5-6' |  OUTPUT: ''
INPUT: 'GMC I4 1-X-4-2' |  OUTPUT: '3'
INPUT: 'Dodge V10 1-X-X-4-3-6-5-X-X-2' |  OUTPUT: '10-9-8-7'
========================================
URL: https://www.codewars.com/kata/64e06b8f55bbb752ac2e66f5
–ó–∞–¥–∞—á–∞:
Spark plugs, distributor wires, and firing order.
Your car's engine operates by containing tiny explosions caused by gas being ignited by spark plugs, which compresses a pistion, causing the engine to turn. Spark plugs are sparked by receiving electrical signal through a wire connected to a distributing system.  If you're curious, here's an explanation of the whole process. If you watch the video, you can ignore the formulas, as this kata is about firing order, and not combustion physics. 

  In short, to make sure that this process is balanced, and engine rotation is maintained constantly, each cylinder of an engine is fired in an order determined by the manufacturer. There are a few cases where optimal order is very well documented. For example, with an inline 4-cylinder engine, 'I4' the optimal firing order is 1-3-4-2. Because of this, most (but not all...) manufacturers use this order. With different engine layouts, and sizes, sometimes manufacturers will change the order slightly to give more power but less balance, or less power and more engine longevity.
Please note: This is not car repair advice. If you think your car has a misfire, please look up the exact engine your car uses before attempting any of these sequences. AKA have fun, trust the mechanic instead of random internet man.
Your task is relatively simple
Write a function helps us diagnose where a misfire is located. A misfire is typically caused by a faulty wire, or old spark plug. This causes the engine to fire on every cylinder except the one that is bad. For example, with our typical inline 4 engine, if cylinder #3 has a misfire, the engine would receive full rotation in #1, #4, and #2, but #3 would give no rotation at all, causing major issues. For our case, we are assuming that an engine needs at least 1 cylinder functioning for us to diagnose the bad cylinders.
Your function should take one argument, which is a string with the following syntax:
                MAKE | ENGINE SIZE  |  CURRENT ORDER
                -----+--------------+----------------
                Ford |      V8      | 1-X-4-2-X-3-X-8

An "X" indicates a cylinder that has not fired. Your goal is to return a string with the correct cylinder number, in the correct sequence for that make and engine size. In the example above, the correct return value is: "5-6-7". If there are no misfires, return an empty string. You have been provided with a python nested dictionary named CARS that you can call as you please. All elements of CARS are strings. The maker is the first key, the engine size is the second key. Below examples that will be included in the test cases.
INPUT: 'Ford V8 1-X-4-2-X-3-X-8' |  OUTPUT: '5-6-7'
INPUT: 'Cadillac V6 1-2-3-4-5-6' |  OUTPUT: ''
INPUT: 'GMC I4 1-X-4-2' |  OUTPUT: '3'
INPUT: 'Dodge V10 1-X-X-4-3-6-5-X-X-2' |  OUTPUT: '10-9-8-7'
========================================
URL: https://www.codewars.com/kata/64d16a4d8a9c272bb4f3316c
–ó–∞–¥–∞—á–∞:
Task
Create a class that imitates a select screen. The cursor can move to left or right!
In the display method, return a string representation of the list, but with square brackets around the currently selected element. Also, create the methods to_the_right and to_the_left which moves the cursor.
The cursor should start at index 0.
Examples
menu = Menu([1, 2, 3])

menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, [2], 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_right()
menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_left()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_left()
menu.display() ‚ûû "[1, [2], 3]"

Notes
The cursor should wrap back round to the start once it reaches the end.
========================================
URL: https://www.codewars.com/kata/64c766dd16982000173d5ba1
–ó–∞–¥–∞—á–∞:
Task
Create a class that imitates a select screen. The cursor can move to left or right!
In the display method, return a string representation of the list, but with square brackets around the currently selected element. Also, create the methods to_the_right and to_the_left which moves the cursor.
The cursor should start at index 0.
Examples
menu = Menu([1, 2, 3])

menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, [2], 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_right()
menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_left()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_left()
menu.display() ‚ûû "[1, [2], 3]"

Notes
The cursor should wrap back round to the start once it reaches the end.
========================================
URL: https://www.codewars.com/kata/64cf34314e8a905162e32ff5
–ó–∞–¥–∞—á–∞:
Task
Create a class that imitates a select screen. The cursor can move to left or right!
In the display method, return a string representation of the list, but with square brackets around the currently selected element. Also, create the methods to_the_right and to_the_left which moves the cursor.
The cursor should start at index 0.
Examples
menu = Menu([1, 2, 3])

menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, [2], 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_right()
menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_left()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_left()
menu.display() ‚ûû "[1, [2], 3]"

Notes
The cursor should wrap back round to the start once it reaches the end.
========================================
URL: https://www.codewars.com/kata/64cac86333ab6a14f70c6fb6
–ó–∞–¥–∞—á–∞:
Task
Create a class that imitates a select screen. The cursor can move to left or right!
In the display method, return a string representation of the list, but with square brackets around the currently selected element. Also, create the methods to_the_right and to_the_left which moves the cursor.
The cursor should start at index 0.
Examples
menu = Menu([1, 2, 3])

menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, [2], 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_right()
menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_left()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_left()
menu.display() ‚ûû "[1, [2], 3]"

Notes
The cursor should wrap back round to the start once it reaches the end.
========================================
URL: https://www.codewars.com/kata/64c7bbad0a2a00198657013d
–ó–∞–¥–∞—á–∞:
Task
Create a class that imitates a select screen. The cursor can move to left or right!
In the display method, return a string representation of the list, but with square brackets around the currently selected element. Also, create the methods to_the_right and to_the_left which moves the cursor.
The cursor should start at index 0.
Examples
menu = Menu([1, 2, 3])

menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, [2], 3]"

menu.to_the_right()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_right()
menu.display() ‚ûû "[[1], 2, 3]"

menu.to_the_left()
menu.display() ‚ûû "[1, 2, [3]]"

menu.to_the_left()
menu.display() ‚ûû "[1, [2], 3]"

Notes
The cursor should wrap back round to the start once it reaches the end.
========================================
URL: https://www.codewars.com/kata/64c743cb0a2a00002856ff73
–ó–∞–¥–∞—á–∞:
Task
Find pairs of elements from two input lists such that swapping these pairs results in equal sums for both lists. If no such pair exists, return an empty set.
Input
Two lists of integers, list1 and list2, with the same length.
Output
A set of tuples, each containing two elements (num_from_list1, num_from_list2). These tuples represent the pairs of elements that can be swapped to make the sums of the lists equal.
Examples
fair_swap([1, 1], [2, 2]) ‚ûû {(1, 2)}

fair_swap([1, 2], [2, 3]) ‚ûû {(1, 2), (2, 3)}

fair_swap([2], [1, 3]) ‚ûû {(2, 3)}

fair_swap([2, 3, 4], [11, 4, 1]) ‚ûû set()
========================================
URL: https://www.codewars.com/kata/64b7c3e6e0abed000f6cad6c
–ó–∞–¥–∞—á–∞:
Task
Find pairs of elements from two input lists such that swapping these pairs results in equal sums for both lists. If no such pair exists, return an empty set.
Input
Two lists of integers, list1 and list2, with the same length.
Output
A set of tuples, each containing two elements (num_from_list1, num_from_list2). These tuples represent the pairs of elements that can be swapped to make the sums of the lists equal.
Examples
fair_swap([1, 1], [2, 2]) ‚ûû {(1, 2)}

fair_swap([1, 2], [2, 3]) ‚ûû {(1, 2), (2, 3)}

fair_swap([2], [1, 3]) ‚ûû {(2, 3)}

fair_swap([2, 3, 4], [11, 4, 1]) ‚ûû set()
========================================
URL: https://www.codewars.com/kata/64b7bcfb0ca7392eca9f8e47
–ó–∞–¥–∞—á–∞:
Task
Find pairs of elements from two input lists such that swapping these pairs results in equal sums for both lists. If no such pair exists, return an empty set.
Input
Two lists of integers, list1 and list2, with the same length.
Output
A set of tuples, each containing two elements (num_from_list1, num_from_list2). These tuples represent the pairs of elements that can be swapped to make the sums of the lists equal.
Examples
fair_swap([1, 1], [2, 2]) ‚ûû {(1, 2)}

fair_swap([1, 2], [2, 3]) ‚ûû {(1, 2), (2, 3)}

fair_swap([2], [1, 3]) ‚ûû {(2, 3)}

fair_swap([2, 3, 4], [11, 4, 1]) ‚ûû set()
========================================
URL: https://www.codewars.com/kata/64bd5ff1bb8f1006708e545e
–ó–∞–¥–∞—á–∞:
Task
Find pairs of elements from two input lists such that swapping these pairs results in equal sums for both lists. If no such pair exists, return an empty set.
Input
Two lists of integers, list1 and list2, with the same length.
Output
A set of tuples, each containing two elements (num_from_list1, num_from_list2). These tuples represent the pairs of elements that can be swapped to make the sums of the lists equal.
Examples
fair_swap([1, 1], [2, 2]) ‚ûû {(1, 2)}

fair_swap([1, 2], [2, 3]) ‚ûû {(1, 2), (2, 3)}

fair_swap([2], [1, 3]) ‚ûû {(2, 3)}

fair_swap([2, 3, 4], [11, 4, 1]) ‚ûû set()
========================================
URL: https://www.codewars.com/kata/64b8c6c09416795eb9fbdcbf
–ó–∞–¥–∞—á–∞:
Task
Find pairs of elements from two input lists such that swapping these pairs results in equal sums for both lists. If no such pair exists, return an empty set.
Input
Two lists of integers, list1 and list2, with the same length.
Output
A set of tuples, each containing two elements (num_from_list1, num_from_list2). These tuples represent the pairs of elements that can be swapped to make the sums of the lists equal.
Examples
fair_swap([1, 1], [2, 2]) ‚ûû {(1, 2)}

fair_swap([1, 2], [2, 3]) ‚ûû {(1, 2), (2, 3)}

fair_swap([2], [1, 3]) ‚ûû {(2, 3)}

fair_swap([2, 3, 4], [11, 4, 1]) ‚ûû set()
========================================
URL: https://www.codewars.com/kata/64b779a194167920ebfbdd2e
–ó–∞–¥–∞—á–∞:
Task
Write a function which when given a non-negative integer n and an arbitrary base b, returns the number reversed in that base.
Examples

n=12 and b=2 return 3, because 12 in binary is "1100", which reverses to "0011", equivalent to 3 in decimal.
n=10 and b=5 return 2, because 10 in base-5 is "20", which reverses to "02", equivalent to 2 in decimal.
n=45 and b=30 return 451, because 45 in base-30 is "1F", which reverses to "F1", equivalent to 451 in decimal.
n=3 and b=4 return 3, because 3 in base-4 is "3", which reverses to "3", equivalent to 3 in decimal.
n=5 and b=1 return 5, because 5 in unary is "|||||", which reverses to "|||||", equivalent to 5 in decimal.

Note

The function should return an integer.
The base b will be greater or equal to 1.
Edge case: Base-1 is also used in this kata to represent the unary numeral system. Think of it as a system of tally marks. For example: 
3 (decimal) -> ||| (unary)
5 (decimal) -> ||||| (unary)
========================================
URL: https://www.codewars.com/kata/649c4012aaad69003f1299c1
–ó–∞–¥–∞—á–∞:
Task
Write a function which when given a non-negative integer n and an arbitrary base b, returns the number reversed in that base.
Examples

n=12 and b=2 return 3, because 12 in binary is "1100", which reverses to "0011", equivalent to 3 in decimal.
n=10 and b=5 return 2, because 10 in base-5 is "20", which reverses to "02", equivalent to 2 in decimal.
n=45 and b=30 return 451, because 45 in base-30 is "1F", which reverses to "F1", equivalent to 451 in decimal.
n=3 and b=4 return 3, because 3 in base-4 is "3", which reverses to "3", equivalent to 3 in decimal.
n=5 and b=1 return 5, because 5 in unary is "|||||", which reverses to "|||||", equivalent to 5 in decimal.

Note

The function should return an integer.
The base b will be greater or equal to 1.
Edge case: Base-1 is also used in this kata to represent the unary numeral system. Think of it as a system of tally marks. For example: 
3 (decimal) -> ||| (unary)
5 (decimal) -> ||||| (unary)
========================================
URL: https://www.codewars.com/kata/6469e4c905eaefffd44b6504
–ó–∞–¥–∞—á–∞:
Task
Write a function which when given a non-negative integer n and an arbitrary base b, returns the number reversed in that base.
Examples

n=12 and b=2 return 3, because 12 in binary is "1100", which reverses to "0011", equivalent to 3 in decimal.
n=10 and b=5 return 2, because 10 in base-5 is "20", which reverses to "02", equivalent to 2 in decimal.
n=45 and b=30 return 451, because 45 in base-30 is "1F", which reverses to "F1", equivalent to 451 in decimal.
n=3 and b=4 return 3, because 3 in base-4 is "3", which reverses to "3", equivalent to 3 in decimal.
n=5 and b=1 return 5, because 5 in unary is "|||||", which reverses to "|||||", equivalent to 5 in decimal.

Note

The function should return an integer.
The base b will be greater or equal to 1.
Edge case: Base-1 is also used in this kata to represent the unary numeral system. Think of it as a system of tally marks. For example: 
3 (decimal) -> ||| (unary)
5 (decimal) -> ||||| (unary)
========================================
URL: https://www.codewars.com/kata/64915dc9d40f96004319379a
–ó–∞–¥–∞—á–∞:
Task
Write a function which when given a non-negative integer n and an arbitrary base b, returns the number reversed in that base.
Examples

n=12 and b=2 return 3, because 12 in binary is "1100", which reverses to "0011", equivalent to 3 in decimal.
n=10 and b=5 return 2, because 10 in base-5 is "20", which reverses to "02", equivalent to 2 in decimal.
n=45 and b=30 return 451, because 45 in base-30 is "1F", which reverses to "F1", equivalent to 451 in decimal.
n=3 and b=4 return 3, because 3 in base-4 is "3", which reverses to "3", equivalent to 3 in decimal.
n=5 and b=1 return 5, because 5 in unary is "|||||", which reverses to "|||||", equivalent to 5 in decimal.

Note

The function should return an integer.
The base b will be greater or equal to 1.
Edge case: Base-1 is also used in this kata to represent the unary numeral system. Think of it as a system of tally marks. For example: 
3 (decimal) -> ||| (unary)
5 (decimal) -> ||||| (unary)
========================================
URL: https://www.codewars.com/kata/6473603854720900496e1c82
–ó–∞–¥–∞—á–∞:
Task
Write a function which when given a non-negative integer n and an arbitrary base b, returns the number reversed in that base.
Examples

n=12 and b=2 return 3, because 12 in binary is "1100", which reverses to "0011", equivalent to 3 in decimal.
n=10 and b=5 return 2, because 10 in base-5 is "20", which reverses to "02", equivalent to 2 in decimal.
n=45 and b=30 return 451, because 45 in base-30 is "1F", which reverses to "F1", equivalent to 451 in decimal.
n=3 and b=4 return 3, because 3 in base-4 is "3", which reverses to "3", equivalent to 3 in decimal.
n=5 and b=1 return 5, because 5 in unary is "|||||", which reverses to "|||||", equivalent to 5 in decimal.

Note

The function should return an integer.
The base b will be greater or equal to 1.
Edge case: Base-1 is also used in this kata to represent the unary numeral system. Think of it as a system of tally marks. For example: 
3 (decimal) -> ||| (unary)
5 (decimal) -> ||||| (unary)
========================================
URL: https://www.codewars.com/kata/645fb55ecf8c290031b779ef
–ó–∞–¥–∞—á–∞:
Task:
In this Golfing Kata, you are going to receive 2 non-negative numbers a and b, b is equal to or greater than a.
Then do the following procedure:

Add a to b, then divide it by 2 with integer division.

Repeat the procedure until b is equal to a.

Return how many times it took to make b equal to a.

Now golf your code, the length limit is 35, in one line.


(The length of reference solution is 31)

Examples:
a = 3 and b = 9

b = (3 + 9) // 2 = 6  ---  1 time

b = (3 + 6) // 2 = 4  ---  2 times

b = (3 + 4) // 2 = 3  ---  3 times

So the result for a=3 and b=9 is `3`.

More examples:
input --> output

f(0, 0) --> 0
f(1, 2) --> 1
f(3, 9) --> 3
f(4, 20) --> 5
f(5, 36) --> 5
========================================
URL: https://www.codewars.com/kata/643ea1adef815316e5389d17
–ó–∞–¥–∞—á–∞:
Task:
In this Golfing Kata, you are going to receive 2 non-negative numbers a and b, b is equal to or greater than a.
Then do the following procedure:

Add a to b, then divide it by 2 with integer division.

Repeat the procedure until b is equal to a.

Return how many times it took to make b equal to a.

Now golf your code, the length limit is 35, in one line.


(The length of reference solution is 31)

Examples:
a = 3 and b = 9

b = (3 + 9) // 2 = 6  ---  1 time

b = (3 + 6) // 2 = 4  ---  2 times

b = (3 + 4) // 2 = 3  ---  3 times

So the result for a=3 and b=9 is `3`.

More examples:
input --> output

f(0, 0) --> 0
f(1, 2) --> 1
f(3, 9) --> 3
f(4, 20) --> 5
f(5, 36) --> 5
========================================
URL: https://www.codewars.com/kata/642b375dca15841d3aaf1ede
–ó–∞–¥–∞—á–∞:
Task:
In this Golfing Kata, you are going to receive 2 non-negative numbers a and b, b is equal to or greater than a.
Then do the following procedure:

Add a to b, then divide it by 2 with integer division.

Repeat the procedure until b is equal to a.

Return how many times it took to make b equal to a.

Now golf your code, the length limit is 35, in one line.


(The length of reference solution is 31)

Examples:
a = 3 and b = 9

b = (3 + 9) // 2 = 6  ---  1 time

b = (3 + 6) // 2 = 4  ---  2 times

b = (3 + 4) // 2 = 3  ---  3 times

So the result for a=3 and b=9 is `3`.

More examples:
input --> output

f(0, 0) --> 0
f(1, 2) --> 1
f(3, 9) --> 3
f(4, 20) --> 5
f(5, 36) --> 5
========================================
URL: https://www.codewars.com/kata/643a47fadad36407bf3e97ea
–ó–∞–¥–∞—á–∞:
Task:
In this Golfing Kata, you are going to receive 2 non-negative numbers a and b, b is equal to or greater than a.
Then do the following procedure:

Add a to b, then divide it by 2 with integer division.

Repeat the procedure until b is equal to a.

Return how many times it took to make b equal to a.

Now golf your code, the length limit is 35, in one line.


(The length of reference solution is 31)

Examples:
a = 3 and b = 9

b = (3 + 9) // 2 = 6  ---  1 time

b = (3 + 6) // 2 = 4  ---  2 times

b = (3 + 4) // 2 = 3  ---  3 times

So the result for a=3 and b=9 is `3`.

More examples:
input --> output

f(0, 0) --> 0
f(1, 2) --> 1
f(3, 9) --> 3
f(4, 20) --> 5
f(5, 36) --> 5
========================================
URL: https://www.codewars.com/kata/6446c0fe4e259c006511b75e
–ó–∞–¥–∞—á–∞:
Task:
In this Golfing Kata, you are going to receive 2 non-negative numbers a and b, b is equal to or greater than a.
Then do the following procedure:

Add a to b, then divide it by 2 with integer division.

Repeat the procedure until b is equal to a.

Return how many times it took to make b equal to a.

Now golf your code, the length limit is 35, in one line.


(The length of reference solution is 31)

Examples:
a = 3 and b = 9

b = (3 + 9) // 2 = 6  ---  1 time

b = (3 + 6) // 2 = 4  ---  2 times

b = (3 + 4) // 2 = 3  ---  3 times

So the result for a=3 and b=9 is `3`.

More examples:
input --> output

f(0, 0) --> 0
f(1, 2) --> 1
f(3, 9) --> 3
f(4, 20) --> 5
f(5, 36) --> 5
========================================
URL: https://www.codewars.com/kata/641d08d7a544092654a8b29c
–ó–∞–¥–∞—á–∞:
This is a rather simple but interesting kata. Try to solve it using logic. The shortest solution can be fit into one line.
Task
The point is that a natural number N (1 <= N <= 10^9) is given. You need to write a function which finds the number of natural numbers not exceeding N and not divided by any of the numbers [2, 3, 5].

Example
Let's take the number 5 as an example:

1 - doesn't divide integer by 2, 3, and 5
2 - divides integer by 2
3 - divides integer by 3
4 - divides integer by 2
5 - divides integer by 5

Answer: 1
because only one number doesn't divide integer by any of 2, 3, 5

Note
Again, try to think of a formula that will shorten your solution and help you pass big tests.
Good luck :)
If you want to solve our problems, they are here:
From Singularity Hub Community
========================================
URL: https://www.codewars.com/kata/64127b25114de109258fb6fe
–ó–∞–¥–∞—á–∞:
This is a rather simple but interesting kata. Try to solve it using logic. The shortest solution can be fit into one line.
Task
The point is that a natural number N (1 <= N <= 10^9) is given. You need to write a function which finds the number of natural numbers not exceeding N and not divided by any of the numbers [2, 3, 5].

Example
Let's take the number 5 as an example:

1 - doesn't divide integer by 2, 3, and 5
2 - divides integer by 2
3 - divides integer by 3
4 - divides integer by 2
5 - divides integer by 5

Answer: 1
because only one number doesn't divide integer by any of 2, 3, 5

Note
Again, try to think of a formula that will shorten your solution and help you pass big tests.
Good luck :)
If you want to solve our problems, they are here:
From Singularity Hub Community
========================================
URL: https://www.codewars.com/kata/640dee7cbad3aa002e7c7de4
–ó–∞–¥–∞—á–∞:
This is a rather simple but interesting kata. Try to solve it using logic. The shortest solution can be fit into one line.
Task
The point is that a natural number N (1 <= N <= 10^9) is given. You need to write a function which finds the number of natural numbers not exceeding N and not divided by any of the numbers [2, 3, 5].

Example
Let's take the number 5 as an example:

1 - doesn't divide integer by 2, 3, and 5
2 - divides integer by 2
3 - divides integer by 3
4 - divides integer by 2
5 - divides integer by 5

Answer: 1
because only one number doesn't divide integer by any of 2, 3, 5

Note
Again, try to think of a formula that will shorten your solution and help you pass big tests.
Good luck :)
If you want to solve our problems, they are here:
From Singularity Hub Community
========================================
URL: https://www.codewars.com/kata/6409aa6df4a0b773ce29cc3d
–ó–∞–¥–∞—á–∞:
This is a rather simple but interesting kata. Try to solve it using logic. The shortest solution can be fit into one line.
Task
The point is that a natural number N (1 <= N <= 10^9) is given. You need to write a function which finds the number of natural numbers not exceeding N and not divided by any of the numbers [2, 3, 5].

Example
Let's take the number 5 as an example:

1 - doesn't divide integer by 2, 3, and 5
2 - divides integer by 2
3 - divides integer by 3
4 - divides integer by 2
5 - divides integer by 5

Answer: 1
because only one number doesn't divide integer by any of 2, 3, 5

Note
Again, try to think of a formula that will shorten your solution and help you pass big tests.
Good luck :)
If you want to solve our problems, they are here:
From Singularity Hub Community
========================================
URL: https://www.codewars.com/kata/6411b91a5e71b915d237332d
–ó–∞–¥–∞—á–∞:
This is a rather simple but interesting kata. Try to solve it using logic. The shortest solution can be fit into one line.
Task
The point is that a natural number N (1 <= N <= 10^9) is given. You need to write a function which finds the number of natural numbers not exceeding N and not divided by any of the numbers [2, 3, 5].

Example
Let's take the number 5 as an example:

1 - doesn't divide integer by 2, 3, and 5
2 - divides integer by 2
3 - divides integer by 3
4 - divides integer by 2
5 - divides integer by 5

Answer: 1
because only one number doesn't divide integer by any of 2, 3, 5

Note
Again, try to think of a formula that will shorten your solution and help you pass big tests.
Good luck :)
If you want to solve our problems, they are here:
From Singularity Hub Community
========================================
URL: https://www.codewars.com/kata/64087fd72daf09000f60dc26
–ó–∞–¥–∞—á–∞:
Barbell weight
Kata overview
Olympic weightlifting is a sport in which athletes compete in lifting a barbell from the ground to overhead, with the aim of successfully lifting the heaviest weights.
The purpose of this kata is to compute the weight of an Olympic barbell.
Task
Write a function that computes the barbell weight.
Input
A string representation of a barbell, in the form ---gcBRRRR--------------------RRRRBcg---.
Weights are always between 25 - 274 kg (both included).
Output
The weight of the barbell in kg (integer).
Barbell details
A barbell consists of three parts:

Bar
Discs
Collars

The bar weighs 20 kg and uses character -. The bar is 40 characters long.
Discs are loaded and secured by collars on the sleeve of the bar. The bar is loaded with the heaviest discs first and then the lighter discs loaded in descending order of weight toward the outer edge of the bar. The following discs are used. Discs are loaded from the 10th character from the outer edge of the bar.
WEIGHT  COLOR   CHAR
25 kg   red     R
20 kg   blue    B
15 kg   yellow  Y
10 kg   green   G
5 kg    white   W
2.5 kg  red     r
2 kg    blue    b
1.5 kg  yellow  y
1 kg    green   g
0.5 kg  white   w

In order to secure the discs to the bar, each bar must be equipped with two (2) collars. Collars weigh 2.5 kg each. Collars use character c, and are positioned outward of discs of 2.5 kg or more, and inward of discs of 2 kg or less.
Some examples of loaded barbells and their total weight.
WEIGHT  BARBELL
25 kg   ---------c--------------------c---------
26 kg   --------wc--------------------cw--------
34 kg   -------bcr--------------------rcb-------
35 kg   --------cW--------------------Wc--------
47 kg   -------gcG--------------------Gcg-------
58 kg   -------ycY--------------------Ycy-------
124 kg  -----bcrBR--------------------RBrcb-----
225 kg  -----cRRRR--------------------RRRRc-----
267 kg  ---gcBRRRR--------------------RRRRBcg---

Weightlifting series
This kata is part of a series of kata with increasing difficulty:

Barbell weight
Load a barbell
Adjust barbell
========================================
URL: https://www.codewars.com/kata/6402205dca1e64004b22b8de
–ó–∞–¥–∞—á–∞:
Barbell weight
Kata overview
Olympic weightlifting is a sport in which athletes compete in lifting a barbell from the ground to overhead, with the aim of successfully lifting the heaviest weights.
The purpose of this kata is to compute the weight of an Olympic barbell.
Task
Write a function that computes the barbell weight.
Input
A string representation of a barbell, in the form ---gcBRRRR--------------------RRRRBcg---.
Weights are always between 25 - 274 kg (both included).
Output
The weight of the barbell in kg (integer).
Barbell details
A barbell consists of three parts:

Bar
Discs
Collars

The bar weighs 20 kg and uses character -. The bar is 40 characters long.
Discs are loaded and secured by collars on the sleeve of the bar. The bar is loaded with the heaviest discs first and then the lighter discs loaded in descending order of weight toward the outer edge of the bar. The following discs are used. Discs are loaded from the 10th character from the outer edge of the bar.
WEIGHT  COLOR   CHAR
25 kg   red     R
20 kg   blue    B
15 kg   yellow  Y
10 kg   green   G
5 kg    white   W
2.5 kg  red     r
2 kg    blue    b
1.5 kg  yellow  y
1 kg    green   g
0.5 kg  white   w

In order to secure the discs to the bar, each bar must be equipped with two (2) collars. Collars weigh 2.5 kg each. Collars use character c, and are positioned outward of discs of 2.5 kg or more, and inward of discs of 2 kg or less.
Some examples of loaded barbells and their total weight.
WEIGHT  BARBELL
25 kg   ---------c--------------------c---------
26 kg   --------wc--------------------cw--------
34 kg   -------bcr--------------------rcb-------
35 kg   --------cW--------------------Wc--------
47 kg   -------gcG--------------------Gcg-------
58 kg   -------ycY--------------------Ycy-------
124 kg  -----bcrBR--------------------RBrcb-----
225 kg  -----cRRRR--------------------RRRRc-----
267 kg  ---gcBRRRR--------------------RRRRBcg---

Weightlifting series
This kata is part of a series of kata with increasing difficulty:

Barbell weight
Load a barbell
Adjust barbell
========================================
URL: https://www.codewars.com/kata/6405f2bb2894f600599172fd
–ó–∞–¥–∞—á–∞:
Barbell weight
Kata overview
Olympic weightlifting is a sport in which athletes compete in lifting a barbell from the ground to overhead, with the aim of successfully lifting the heaviest weights.
The purpose of this kata is to compute the weight of an Olympic barbell.
Task
Write a function that computes the barbell weight.
Input
A string representation of a barbell, in the form ---gcBRRRR--------------------RRRRBcg---.
Weights are always between 25 - 274 kg (both included).
Output
The weight of the barbell in kg (integer).
Barbell details
A barbell consists of three parts:

Bar
Discs
Collars

The bar weighs 20 kg and uses character -. The bar is 40 characters long.
Discs are loaded and secured by collars on the sleeve of the bar. The bar is loaded with the heaviest discs first and then the lighter discs loaded in descending order of weight toward the outer edge of the bar. The following discs are used. Discs are loaded from the 10th character from the outer edge of the bar.
WEIGHT  COLOR   CHAR
25 kg   red     R
20 kg   blue    B
15 kg   yellow  Y
10 kg   green   G
5 kg    white   W
2.5 kg  red     r
2 kg    blue    b
1.5 kg  yellow  y
1 kg    green   g
0.5 kg  white   w

In order to secure the discs to the bar, each bar must be equipped with two (2) collars. Collars weigh 2.5 kg each. Collars use character c, and are positioned outward of discs of 2.5 kg or more, and inward of discs of 2 kg or less.
Some examples of loaded barbells and their total weight.
WEIGHT  BARBELL
25 kg   ---------c--------------------c---------
26 kg   --------wc--------------------cw--------
34 kg   -------bcr--------------------rcb-------
35 kg   --------cW--------------------Wc--------
47 kg   -------gcG--------------------Gcg-------
58 kg   -------ycY--------------------Ycy-------
124 kg  -----bcrBR--------------------RBrcb-----
225 kg  -----cRRRR--------------------RRRRc-----
267 kg  ---gcBRRRR--------------------RRRRBcg---

Weightlifting series
This kata is part of a series of kata with increasing difficulty:

Barbell weight
Load a barbell
Adjust barbell
========================================
URL: https://www.codewars.com/kata/64060d8ab2dd990058b7f8ee
–ó–∞–¥–∞—á–∞:
Barbell weight
Kata overview
Olympic weightlifting is a sport in which athletes compete in lifting a barbell from the ground to overhead, with the aim of successfully lifting the heaviest weights.
The purpose of this kata is to compute the weight of an Olympic barbell.
Task
Write a function that computes the barbell weight.
Input
A string representation of a barbell, in the form ---gcBRRRR--------------------RRRRBcg---.
Weights are always between 25 - 274 kg (both included).
Output
The weight of the barbell in kg (integer).
Barbell details
A barbell consists of three parts:

Bar
Discs
Collars

The bar weighs 20 kg and uses character -. The bar is 40 characters long.
Discs are loaded and secured by collars on the sleeve of the bar. The bar is loaded with the heaviest discs first and then the lighter discs loaded in descending order of weight toward the outer edge of the bar. The following discs are used. Discs are loaded from the 10th character from the outer edge of the bar.
WEIGHT  COLOR   CHAR
25 kg   red     R
20 kg   blue    B
15 kg   yellow  Y
10 kg   green   G
5 kg    white   W
2.5 kg  red     r
2 kg    blue    b
1.5 kg  yellow  y
1 kg    green   g
0.5 kg  white   w

In order to secure the discs to the bar, each bar must be equipped with two (2) collars. Collars weigh 2.5 kg each. Collars use character c, and are positioned outward of discs of 2.5 kg or more, and inward of discs of 2 kg or less.
Some examples of loaded barbells and their total weight.
WEIGHT  BARBELL
25 kg   ---------c--------------------c---------
26 kg   --------wc--------------------cw--------
34 kg   -------bcr--------------------rcb-------
35 kg   --------cW--------------------Wc--------
47 kg   -------gcG--------------------Gcg-------
58 kg   -------ycY--------------------Ycy-------
124 kg  -----bcrBR--------------------RBrcb-----
225 kg  -----cRRRR--------------------RRRRc-----
267 kg  ---gcBRRRR--------------------RRRRBcg---

Weightlifting series
This kata is part of a series of kata with increasing difficulty:

Barbell weight
Load a barbell
Adjust barbell
========================================
URL: https://www.codewars.com/kata/6400aa17431f2d89c07eea75
–ó–∞–¥–∞—á–∞:
Barbell weight
Kata overview
Olympic weightlifting is a sport in which athletes compete in lifting a barbell from the ground to overhead, with the aim of successfully lifting the heaviest weights.
The purpose of this kata is to compute the weight of an Olympic barbell.
Task
Write a function that computes the barbell weight.
Input
A string representation of a barbell, in the form ---gcBRRRR--------------------RRRRBcg---.
Weights are always between 25 - 274 kg (both included).
Output
The weight of the barbell in kg (integer).
Barbell details
A barbell consists of three parts:

Bar
Discs
Collars

The bar weighs 20 kg and uses character -. The bar is 40 characters long.
Discs are loaded and secured by collars on the sleeve of the bar. The bar is loaded with the heaviest discs first and then the lighter discs loaded in descending order of weight toward the outer edge of the bar. The following discs are used. Discs are loaded from the 10th character from the outer edge of the bar.
WEIGHT  COLOR   CHAR
25 kg   red     R
20 kg   blue    B
15 kg   yellow  Y
10 kg   green   G
5 kg    white   W
2.5 kg  red     r
2 kg    blue    b
1.5 kg  yellow  y
1 kg    green   g
0.5 kg  white   w

In order to secure the discs to the bar, each bar must be equipped with two (2) collars. Collars weigh 2.5 kg each. Collars use character c, and are positioned outward of discs of 2.5 kg or more, and inward of discs of 2 kg or less.
Some examples of loaded barbells and their total weight.
WEIGHT  BARBELL
25 kg   ---------c--------------------c---------
26 kg   --------wc--------------------cw--------
34 kg   -------bcr--------------------rcb-------
35 kg   --------cW--------------------Wc--------
47 kg   -------gcG--------------------Gcg-------
58 kg   -------ycY--------------------Ycy-------
124 kg  -----bcrBR--------------------RBrcb-----
225 kg  -----cRRRR--------------------RRRRc-----
267 kg  ---gcBRRRR--------------------RRRRBcg---

Weightlifting series
This kata is part of a series of kata with increasing difficulty:

Barbell weight
Load a barbell
Adjust barbell
========================================
URL: https://www.codewars.com/kata/63fa8aafe6be1f57ad81729a
–ó–∞–¥–∞—á–∞:
You are given 2 two-digit numbers. You should check if they are similar by comparing their numbers, and return the result in %.
Example:

compare(13,14)=50%;
compare(23,22)=50%;
compare(15,51)=100%;
compare(12,34)=0%.
========================================
URL: https://www.codewars.com/kata/63f96036b15a210058300ca9
–ó–∞–¥–∞—á–∞:
You are given 2 two-digit numbers. You should check if they are similar by comparing their numbers, and return the result in %.
Example:

compare(13,14)=50%;
compare(23,22)=50%;
compare(15,51)=100%;
compare(12,34)=0%.
========================================
URL: https://www.codewars.com/kata/63f844fee6be1f0017816ff1
–ó–∞–¥–∞—á–∞:
You are given 2 two-digit numbers. You should check if they are similar by comparing their numbers, and return the result in %.
Example:

compare(13,14)=50%;
compare(23,22)=50%;
compare(15,51)=100%;
compare(12,34)=0%.
========================================
URL: https://www.codewars.com/kata/63f9ec524362170065e5c85b
–ó–∞–¥–∞—á–∞:
You are given 2 two-digit numbers. You should check if they are similar by comparing their numbers, and return the result in %.
Example:

compare(13,14)=50%;
compare(23,22)=50%;
compare(15,51)=100%;
compare(12,34)=0%.
========================================
URL: https://www.codewars.com/kata/63f3c61dd27f3c07cc7978de
–ó–∞–¥–∞—á–∞:
You are given 2 two-digit numbers. You should check if they are similar by comparing their numbers, and return the result in %.
Example:

compare(13,14)=50%;
compare(23,22)=50%;
compare(15,51)=100%;
compare(12,34)=0%.
========================================
URL: https://www.codewars.com/kata/63ebadc7879f2500315fa07e
–ó–∞–¥–∞—á–∞:
Set Reducer
Intro
These arrays are too long! Let's reduce them!
Description
Write a function that takes in an array of integers from 0-9, and returns a new array:

Numbers with no identical numbers preceding or following it returns a 1: 2, 4, 9  => 1, 1, 1
Sequential groups of identical numbers return their count: 6, 6, 6, 6 => 4

Example
[0, 4, 6, 8, 8, 8, 5, 5, 7] => [1, 1, 1, 3, 2, 1]
Your function should then repeat the process on the resulting array, and on the resulting array of that, until it returns a single integer:
[0, 4, 6, 8, 8, 8, 5, 5, 7] =>  [1, 1, 1, 3, 2, 1] => [3, 1, 1, 1] => [1, 3] => [1, 1] => [2]
When your function has reduced the array to a single integer following these rules, it should return that integer.
[2] => 2
Rules and assertions

All test arrays will be 2+ in length
All integers in the test arrays will be positive numbers from 0 - 9
You should return an integer, not an array with 1 element

Visual example
========================================
URL: https://www.codewars.com/kata/63d54b5d05992e0046752389
–ó–∞–¥–∞—á–∞:
Set Reducer
Intro
These arrays are too long! Let's reduce them!
Description
Write a function that takes in an array of integers from 0-9, and returns a new array:

Numbers with no identical numbers preceding or following it returns a 1: 2, 4, 9  => 1, 1, 1
Sequential groups of identical numbers return their count: 6, 6, 6, 6 => 4

Example
[0, 4, 6, 8, 8, 8, 5, 5, 7] => [1, 1, 1, 3, 2, 1]
Your function should then repeat the process on the resulting array, and on the resulting array of that, until it returns a single integer:
[0, 4, 6, 8, 8, 8, 5, 5, 7] =>  [1, 1, 1, 3, 2, 1] => [3, 1, 1, 1] => [1, 3] => [1, 1] => [2]
When your function has reduced the array to a single integer following these rules, it should return that integer.
[2] => 2
Rules and assertions

All test arrays will be 2+ in length
All integers in the test arrays will be positive numbers from 0 - 9
You should return an integer, not an array with 1 element

Visual example
========================================
URL: https://www.codewars.com/kata/63d6dba199b0cc0ff46b5d8a
–ó–∞–¥–∞—á–∞:
Set Reducer
Intro
These arrays are too long! Let's reduce them!
Description
Write a function that takes in an array of integers from 0-9, and returns a new array:

Numbers with no identical numbers preceding or following it returns a 1: 2, 4, 9  => 1, 1, 1
Sequential groups of identical numbers return their count: 6, 6, 6, 6 => 4

Example
[0, 4, 6, 8, 8, 8, 5, 5, 7] => [1, 1, 1, 3, 2, 1]
Your function should then repeat the process on the resulting array, and on the resulting array of that, until it returns a single integer:
[0, 4, 6, 8, 8, 8, 5, 5, 7] =>  [1, 1, 1, 3, 2, 1] => [3, 1, 1, 1] => [1, 3] => [1, 1] => [2]
When your function has reduced the array to a single integer following these rules, it should return that integer.
[2] => 2
Rules and assertions

All test arrays will be 2+ in length
All integers in the test arrays will be positive numbers from 0 - 9
You should return an integer, not an array with 1 element

Visual example
========================================
URL: https://www.codewars.com/kata/63d1ba782de94107abbf85c3
–ó–∞–¥–∞—á–∞:
Set Reducer
Intro
These arrays are too long! Let's reduce them!
Description
Write a function that takes in an array of integers from 0-9, and returns a new array:

Numbers with no identical numbers preceding or following it returns a 1: 2, 4, 9  => 1, 1, 1
Sequential groups of identical numbers return their count: 6, 6, 6, 6 => 4

Example
[0, 4, 6, 8, 8, 8, 5, 5, 7] => [1, 1, 1, 3, 2, 1]
Your function should then repeat the process on the resulting array, and on the resulting array of that, until it returns a single integer:
[0, 4, 6, 8, 8, 8, 5, 5, 7] =>  [1, 1, 1, 3, 2, 1] => [3, 1, 1, 1] => [1, 3] => [1, 1] => [2]
When your function has reduced the array to a single integer following these rules, it should return that integer.
[2] => 2
Rules and assertions

All test arrays will be 2+ in length
All integers in the test arrays will be positive numbers from 0 - 9
You should return an integer, not an array with 1 element

Visual example
========================================
URL: https://www.codewars.com/kata/63cbe409959401003e09978b
–ó–∞–¥–∞—á–∞:
Set Reducer
Intro
These arrays are too long! Let's reduce them!
Description
Write a function that takes in an array of integers from 0-9, and returns a new array:

Numbers with no identical numbers preceding or following it returns a 1: 2, 4, 9  => 1, 1, 1
Sequential groups of identical numbers return their count: 6, 6, 6, 6 => 4

Example
[0, 4, 6, 8, 8, 8, 5, 5, 7] => [1, 1, 1, 3, 2, 1]
Your function should then repeat the process on the resulting array, and on the resulting array of that, until it returns a single integer:
[0, 4, 6, 8, 8, 8, 5, 5, 7] =>  [1, 1, 1, 3, 2, 1] => [3, 1, 1, 1] => [1, 3] => [1, 1] => [2]
When your function has reduced the array to a single integer following these rules, it should return that integer.
[2] => 2
Rules and assertions

All test arrays will be 2+ in length
All integers in the test arrays will be positive numbers from 0 - 9
You should return an integer, not an array with 1 element

Visual example
========================================
URL: https://www.codewars.com/kata/63b3cebaeb152e12268bdc02
–ó–∞–¥–∞—á–∞:
I have four positive integers, A, B, C and D, where A < B < C < D. The input is a list of the integers A, B, C, D, AxB, BxC, CxD, DxA in some order. Your task is to return the value of D.
========================================
URL: https://www.codewars.com/kata/63b9aa69114b4316d0974d2c
–ó–∞–¥–∞—á–∞:
I have four positive integers, A, B, C and D, where A < B < C < D. The input is a list of the integers A, B, C, D, AxB, BxC, CxD, DxA in some order. Your task is to return the value of D.
========================================
URL: https://www.codewars.com/kata/63b4758f27f8e5000fc1e427
–ó–∞–¥–∞—á–∞:
I have four positive integers, A, B, C and D, where A < B < C < D. The input is a list of the integers A, B, C, D, AxB, BxC, CxD, DxA in some order. Your task is to return the value of D.
========================================
URL: https://www.codewars.com/kata/63b84f54693cb10065687ae5
–ó–∞–¥–∞—á–∞:
I have four positive integers, A, B, C and D, where A < B < C < D. The input is a list of the integers A, B, C, D, AxB, BxC, CxD, DxA in some order. Your task is to return the value of D.
========================================
URL: https://www.codewars.com/kata/63b06ea0c9e1ce000f1e2407
–ó–∞–¥–∞—á–∞:
I have four positive integers, A, B, C and D, where A < B < C < D. The input is a list of the integers A, B, C, D, AxB, BxC, CxD, DxA in some order. Your task is to return the value of D.
========================================
URL: https://www.codewars.com/kata/63adf4596ef0071b42544b9a
–ó–∞–¥–∞—á–∞:
No French knowledge is needed for this kata!
A note for the people who do know French: this kata will skip the step of turning the verb into it's Nous form, to maintain simplicity. That means verbs like Manger will be Mangais, instead of Mangeais. Oh, and no √™tre ;-)

Details
(You may skip this part)
When speaking/writing French, you use L‚Äôimparfait (the imperfect tense) to describe continuous or habitual actions in the past. 
For example, you would use l'imparfait to translate "I was thinking", because thinking is an action that happens over a length of time. You wouldn't use l'imparfait to translate "I won the boss battle", as it's an action that happens once. 
Think of it as the French equivalent of our Past Progressive.
Task
Given a simple French phrase, consisting of a subject and a verb in its infinitive form, you need to turn it into L'imparfait, using the table below. To conjugate a sentence in l'imparfait, drop the last two letters of the verb and replace it with the correct ending based on the subject.
Here are the endings to replace the verb with:



Subject
Verb Ending



Je (I)
-ais


Tu (You)
-ais


Il/Elle/On (He/She/It or We)
-ait


Nous (We)
-ions


Vous (You or Y'all)
-iez


Ils/Elles (They)
-aient


Let's say you want to translate I was walking to French: 

Take the subject + infinitive: Je marcher
Remove the last two letters: Je march
Apply the correct ending: Je marchais

You get Je marchais, which can be checked with our handy dandy google translate.
Examples
Je manger     -->  Je mangais   
Tu dormir     -->  Tu dormais
Elle coder    -->  Elle codait
Il livrer     -->  Il livrait
On parler     -->  On parlait
Nous aller    -->  Nous allions
Vous partir   -->  Vous partiez
Ils jouer     -->  Ils jouaient
Elles gagner  -->  Elles gagnaient
========================================
URL: https://www.codewars.com/kata/63ab271e96a48e000e577442
–ó–∞–¥–∞—á–∞:
No French knowledge is needed for this kata!
A note for the people who do know French: this kata will skip the step of turning the verb into it's Nous form, to maintain simplicity. That means verbs like Manger will be Mangais, instead of Mangeais. Oh, and no √™tre ;-)

Details
(You may skip this part)
When speaking/writing French, you use L‚Äôimparfait (the imperfect tense) to describe continuous or habitual actions in the past. 
For example, you would use l'imparfait to translate "I was thinking", because thinking is an action that happens over a length of time. You wouldn't use l'imparfait to translate "I won the boss battle", as it's an action that happens once. 
Think of it as the French equivalent of our Past Progressive.
Task
Given a simple French phrase, consisting of a subject and a verb in its infinitive form, you need to turn it into L'imparfait, using the table below. To conjugate a sentence in l'imparfait, drop the last two letters of the verb and replace it with the correct ending based on the subject.
Here are the endings to replace the verb with:



Subject
Verb Ending



Je (I)
-ais


Tu (You)
-ais


Il/Elle/On (He/She/It or We)
-ait


Nous (We)
-ions


Vous (You or Y'all)
-iez


Ils/Elles (They)
-aient


Let's say you want to translate I was walking to French: 

Take the subject + infinitive: Je marcher
Remove the last two letters: Je march
Apply the correct ending: Je marchais

You get Je marchais, which can be checked with our handy dandy google translate.
Examples
Je manger     -->  Je mangais   
Tu dormir     -->  Tu dormais
Elle coder    -->  Elle codait
Il livrer     -->  Il livrait
On parler     -->  On parlait
Nous aller    -->  Nous allions
Vous partir   -->  Vous partiez
Ils jouer     -->  Ils jouaient
Elles gagner  -->  Elles gagnaient
========================================
URL: https://www.codewars.com/kata/639ac3ded3fb14000ed38f31
–ó–∞–¥–∞—á–∞:
No French knowledge is needed for this kata!
A note for the people who do know French: this kata will skip the step of turning the verb into it's Nous form, to maintain simplicity. That means verbs like Manger will be Mangais, instead of Mangeais. Oh, and no √™tre ;-)

Details
(You may skip this part)
When speaking/writing French, you use L‚Äôimparfait (the imperfect tense) to describe continuous or habitual actions in the past. 
For example, you would use l'imparfait to translate "I was thinking", because thinking is an action that happens over a length of time. You wouldn't use l'imparfait to translate "I won the boss battle", as it's an action that happens once. 
Think of it as the French equivalent of our Past Progressive.
Task
Given a simple French phrase, consisting of a subject and a verb in its infinitive form, you need to turn it into L'imparfait, using the table below. To conjugate a sentence in l'imparfait, drop the last two letters of the verb and replace it with the correct ending based on the subject.
Here are the endings to replace the verb with:



Subject
Verb Ending



Je (I)
-ais


Tu (You)
-ais


Il/Elle/On (He/She/It or We)
-ait


Nous (We)
-ions


Vous (You or Y'all)
-iez


Ils/Elles (They)
-aient


Let's say you want to translate I was walking to French: 

Take the subject + infinitive: Je marcher
Remove the last two letters: Je march
Apply the correct ending: Je marchais

You get Je marchais, which can be checked with our handy dandy google translate.
Examples
Je manger     -->  Je mangais   
Tu dormir     -->  Tu dormais
Elle coder    -->  Elle codait
Il livrer     -->  Il livrait
On parler     -->  On parlait
Nous aller    -->  Nous allions
Vous partir   -->  Vous partiez
Ils jouer     -->  Ils jouaient
Elles gagner  -->  Elles gagnaient
========================================
URL: https://www.codewars.com/kata/6397b0d461067e0030d1315e
–ó–∞–¥–∞—á–∞:
No French knowledge is needed for this kata!
A note for the people who do know French: this kata will skip the step of turning the verb into it's Nous form, to maintain simplicity. That means verbs like Manger will be Mangais, instead of Mangeais. Oh, and no √™tre ;-)

Details
(You may skip this part)
When speaking/writing French, you use L‚Äôimparfait (the imperfect tense) to describe continuous or habitual actions in the past. 
For example, you would use l'imparfait to translate "I was thinking", because thinking is an action that happens over a length of time. You wouldn't use l'imparfait to translate "I won the boss battle", as it's an action that happens once. 
Think of it as the French equivalent of our Past Progressive.
Task
Given a simple French phrase, consisting of a subject and a verb in its infinitive form, you need to turn it into L'imparfait, using the table below. To conjugate a sentence in l'imparfait, drop the last two letters of the verb and replace it with the correct ending based on the subject.
Here are the endings to replace the verb with:



Subject
Verb Ending



Je (I)
-ais


Tu (You)
-ais


Il/Elle/On (He/She/It or We)
-ait


Nous (We)
-ions


Vous (You or Y'all)
-iez


Ils/Elles (They)
-aient


Let's say you want to translate I was walking to French: 

Take the subject + infinitive: Je marcher
Remove the last two letters: Je march
Apply the correct ending: Je marchais

You get Je marchais, which can be checked with our handy dandy google translate.
Examples
Je manger     -->  Je mangais   
Tu dormir     -->  Tu dormais
Elle coder    -->  Elle codait
Il livrer     -->  Il livrait
On parler     -->  On parlait
Nous aller    -->  Nous allions
Vous partir   -->  Vous partiez
Ils jouer     -->  Ils jouaient
Elles gagner  -->  Elles gagnaient
========================================
URL: https://www.codewars.com/kata/6394c1995e54bd00307cf768
–ó–∞–¥–∞—á–∞:
No French knowledge is needed for this kata!
A note for the people who do know French: this kata will skip the step of turning the verb into it's Nous form, to maintain simplicity. That means verbs like Manger will be Mangais, instead of Mangeais. Oh, and no √™tre ;-)

Details
(You may skip this part)
When speaking/writing French, you use L‚Äôimparfait (the imperfect tense) to describe continuous or habitual actions in the past. 
For example, you would use l'imparfait to translate "I was thinking", because thinking is an action that happens over a length of time. You wouldn't use l'imparfait to translate "I won the boss battle", as it's an action that happens once. 
Think of it as the French equivalent of our Past Progressive.
Task
Given a simple French phrase, consisting of a subject and a verb in its infinitive form, you need to turn it into L'imparfait, using the table below. To conjugate a sentence in l'imparfait, drop the last two letters of the verb and replace it with the correct ending based on the subject.
Here are the endings to replace the verb with:



Subject
Verb Ending



Je (I)
-ais


Tu (You)
-ais


Il/Elle/On (He/She/It or We)
-ait


Nous (We)
-ions


Vous (You or Y'all)
-iez


Ils/Elles (They)
-aient


Let's say you want to translate I was walking to French: 

Take the subject + infinitive: Je marcher
Remove the last two letters: Je march
Apply the correct ending: Je marchais

You get Je marchais, which can be checked with our handy dandy google translate.
Examples
Je manger     -->  Je mangais   
Tu dormir     -->  Tu dormais
Elle coder    -->  Elle codait
Il livrer     -->  Il livrait
On parler     -->  On parlait
Nous aller    -->  Nous allions
Vous partir   -->  Vous partiez
Ils jouer     -->  Ils jouaient
Elles gagner  -->  Elles gagnaient
========================================
URL: https://www.codewars.com/kata/6391fe3f322221003db3bad6
–ó–∞–¥–∞—á–∞:
You just started working at a local cinema, and your first task is to write a function that returns the showtimes of a specific movie, given its length. In order to make your job easier, you will work with 24-hour format throughout this kata.
Your function receives three parameters, all of them being integers:

open - Hour at which the cinema opens.
close - Hour at which the cinema closes.
length - Length of the movie, in minutes.

It must return an array of times, with each time being in the format (hour, minute). For example, (19, 30) means 19:30, and (2, 0) means 02:00. The last session in the array cannot end after the cinema closes. Also, the times in the array must be sorted from earliest to latest.
There's also a 15-minute window between a session's end and the beginning of the following one, in order to give enough time for users to take a seat.
For example, for a cinema opening at 13:00 and closing at 23:00 showing a 60-minute movie, your function must return the following array:
>>> movie_times(13, 23, 60)
[(13, 0), (14, 15), (15, 30), (16, 45), (18, 0), (19, 15), (20, 30), (21, 45)]

Note that the cinema might close at times such as 02:00 or 03:00, meaning examples like this must also work:
>>> movie_times(16, 3, 75)
[(16, 0), (17, 30), (19, 0), (20, 30), (22, 0), (23, 30), (1, 0)]

IMPORTANT: For languages other than Python, just return an array of arrays. See sample test cases for more info on how to return the list of times.
NOTE: This kata isn't meant to be too challenging, so opening times for all tests will be 12:00 or later, and closing times will always be 6:00 or earlier.
NOTE 2: Midnight will be represented as (0, 0) or 0:00 in this kata, instead of 24:00.
Good luck!
========================================
URL: https://www.codewars.com/kata/639107e0df52b9cb82720575
–ó–∞–¥–∞—á–∞:
You just started working at a local cinema, and your first task is to write a function that returns the showtimes of a specific movie, given its length. In order to make your job easier, you will work with 24-hour format throughout this kata.
Your function receives three parameters, all of them being integers:

open - Hour at which the cinema opens.
close - Hour at which the cinema closes.
length - Length of the movie, in minutes.

It must return an array of times, with each time being in the format (hour, minute). For example, (19, 30) means 19:30, and (2, 0) means 02:00. The last session in the array cannot end after the cinema closes. Also, the times in the array must be sorted from earliest to latest.
There's also a 15-minute window between a session's end and the beginning of the following one, in order to give enough time for users to take a seat.
For example, for a cinema opening at 13:00 and closing at 23:00 showing a 60-minute movie, your function must return the following array:
>>> movie_times(13, 23, 60)
[(13, 0), (14, 15), (15, 30), (16, 45), (18, 0), (19, 15), (20, 30), (21, 45)]

Note that the cinema might close at times such as 02:00 or 03:00, meaning examples like this must also work:
>>> movie_times(16, 3, 75)
[(16, 0), (17, 30), (19, 0), (20, 30), (22, 0), (23, 30), (1, 0)]

IMPORTANT: For languages other than Python, just return an array of arrays. See sample test cases for more info on how to return the list of times.
NOTE: This kata isn't meant to be too challenging, so opening times for all tests will be 12:00 or later, and closing times will always be 6:00 or earlier.
NOTE 2: Midnight will be represented as (0, 0) or 0:00 in this kata, instead of 24:00.
Good luck!
========================================
URL: https://www.codewars.com/kata/6387ea2cf418c41d277f3ffa
–ó–∞–¥–∞—á–∞:
You just started working at a local cinema, and your first task is to write a function that returns the showtimes of a specific movie, given its length. In order to make your job easier, you will work with 24-hour format throughout this kata.
Your function receives three parameters, all of them being integers:

open - Hour at which the cinema opens.
close - Hour at which the cinema closes.
length - Length of the movie, in minutes.

It must return an array of times, with each time being in the format (hour, minute). For example, (19, 30) means 19:30, and (2, 0) means 02:00. The last session in the array cannot end after the cinema closes. Also, the times in the array must be sorted from earliest to latest.
There's also a 15-minute window between a session's end and the beginning of the following one, in order to give enough time for users to take a seat.
For example, for a cinema opening at 13:00 and closing at 23:00 showing a 60-minute movie, your function must return the following array:
>>> movie_times(13, 23, 60)
[(13, 0), (14, 15), (15, 30), (16, 45), (18, 0), (19, 15), (20, 30), (21, 45)]

Note that the cinema might close at times such as 02:00 or 03:00, meaning examples like this must also work:
>>> movie_times(16, 3, 75)
[(16, 0), (17, 30), (19, 0), (20, 30), (22, 0), (23, 30), (1, 0)]

IMPORTANT: For languages other than Python, just return an array of arrays. See sample test cases for more info on how to return the list of times.
NOTE: This kata isn't meant to be too challenging, so opening times for all tests will be 12:00 or later, and closing times will always be 6:00 or earlier.
NOTE 2: Midnight will be represented as (0, 0) or 0:00 in this kata, instead of 24:00.
Good luck!
========================================
URL: https://www.codewars.com/kata/638244fb08da6c61361d2c40
–ó–∞–¥–∞—á–∞:
You just started working at a local cinema, and your first task is to write a function that returns the showtimes of a specific movie, given its length. In order to make your job easier, you will work with 24-hour format throughout this kata.
Your function receives three parameters, all of them being integers:

open - Hour at which the cinema opens.
close - Hour at which the cinema closes.
length - Length of the movie, in minutes.

It must return an array of times, with each time being in the format (hour, minute). For example, (19, 30) means 19:30, and (2, 0) means 02:00. The last session in the array cannot end after the cinema closes. Also, the times in the array must be sorted from earliest to latest.
There's also a 15-minute window between a session's end and the beginning of the following one, in order to give enough time for users to take a seat.
For example, for a cinema opening at 13:00 and closing at 23:00 showing a 60-minute movie, your function must return the following array:
>>> movie_times(13, 23, 60)
[(13, 0), (14, 15), (15, 30), (16, 45), (18, 0), (19, 15), (20, 30), (21, 45)]

Note that the cinema might close at times such as 02:00 or 03:00, meaning examples like this must also work:
>>> movie_times(16, 3, 75)
[(16, 0), (17, 30), (19, 0), (20, 30), (22, 0), (23, 30), (1, 0)]

IMPORTANT: For languages other than Python, just return an array of arrays. See sample test cases for more info on how to return the list of times.
NOTE: This kata isn't meant to be too challenging, so opening times for all tests will be 12:00 or later, and closing times will always be 6:00 or earlier.
NOTE 2: Midnight will be represented as (0, 0) or 0:00 in this kata, instead of 24:00.
Good luck!
========================================
URL: https://www.codewars.com/kata/6376bbc66f2ae900343b7010
–ó–∞–¥–∞—á–∞:
You just started working at a local cinema, and your first task is to write a function that returns the showtimes of a specific movie, given its length. In order to make your job easier, you will work with 24-hour format throughout this kata.
Your function receives three parameters, all of them being integers:

open - Hour at which the cinema opens.
close - Hour at which the cinema closes.
length - Length of the movie, in minutes.

It must return an array of times, with each time being in the format (hour, minute). For example, (19, 30) means 19:30, and (2, 0) means 02:00. The last session in the array cannot end after the cinema closes. Also, the times in the array must be sorted from earliest to latest.
There's also a 15-minute window between a session's end and the beginning of the following one, in order to give enough time for users to take a seat.
For example, for a cinema opening at 13:00 and closing at 23:00 showing a 60-minute movie, your function must return the following array:
>>> movie_times(13, 23, 60)
[(13, 0), (14, 15), (15, 30), (16, 45), (18, 0), (19, 15), (20, 30), (21, 45)]

Note that the cinema might close at times such as 02:00 or 03:00, meaning examples like this must also work:
>>> movie_times(16, 3, 75)
[(16, 0), (17, 30), (19, 0), (20, 30), (22, 0), (23, 30), (1, 0)]

IMPORTANT: For languages other than Python, just return an array of arrays. See sample test cases for more info on how to return the list of times.
NOTE: This kata isn't meant to be too challenging, so opening times for all tests will be 12:00 or later, and closing times will always be 6:00 or earlier.
NOTE 2: Midnight will be represented as (0, 0) or 0:00 in this kata, instead of 24:00.
Good luck!
========================================
URL: https://www.codewars.com/kata/6368426ec94f16a1e7e137fc
–ó–∞–¥–∞—á–∞:
X                X                     X
                               X          X
ùô´ùôßùô§ùô§ùô§ùô§ùô¢! ===== O='`o       
                                            X              X
                                                X
                          X

A car is zooming through the streets! Maybe a bit too fast... Here come some more cars! Oh-No!!!
Instructions:
You need to find, if given a multi-line string road, whether the speeding car will crash or not.
A road will always contain the following:

The speeding car, O='`o, who's driver is too scared to turn.
The other cars, signified by X's. They will always be heading in the same direction as the car.

The function returns true/ True if there are X's ahead of the speeding car in the same lane, but returns false/False if the speeding car has already passed all of the car's in the lane, or if its lane is empty.
Examples:
These three will all return true (crash):

O='`o X                          


 X                  O='`o                              X


 XXXXXXX
 XO='`oX
 XXXXXXX



These three will all return false (no crash):

O='`o         


X O='`o   


XXXXXXX
XO='`o       
XXXXXXX
========================================
URL: https://www.codewars.com/kata/6361bdb5d41160000ee6db86
–ó–∞–¥–∞—á–∞:
X                X                     X
                               X          X
ùô´ùôßùô§ùô§ùô§ùô§ùô¢! ===== O='`o       
                                            X              X
                                                X
                          X

A car is zooming through the streets! Maybe a bit too fast... Here come some more cars! Oh-No!!!
Instructions:
You need to find, if given a multi-line string road, whether the speeding car will crash or not.
A road will always contain the following:

The speeding car, O='`o, who's driver is too scared to turn.
The other cars, signified by X's. They will always be heading in the same direction as the car.

The function returns true/ True if there are X's ahead of the speeding car in the same lane, but returns false/False if the speeding car has already passed all of the car's in the lane, or if its lane is empty.
Examples:
These three will all return true (crash):

O='`o X                          


 X                  O='`o                              X


 XXXXXXX
 XO='`oX
 XXXXXXX



These three will all return false (no crash):

O='`o         


X O='`o   


XXXXXXX
XO='`o       
XXXXXXX
========================================
URL: https://www.codewars.com/kata/6359f0158f20011969cf0ebe
–ó–∞–¥–∞—á–∞:
X                X                     X
                               X          X
ùô´ùôßùô§ùô§ùô§ùô§ùô¢! ===== O='`o       
                                            X              X
                                                X
                          X

A car is zooming through the streets! Maybe a bit too fast... Here come some more cars! Oh-No!!!
Instructions:
You need to find, if given a multi-line string road, whether the speeding car will crash or not.
A road will always contain the following:

The speeding car, O='`o, who's driver is too scared to turn.
The other cars, signified by X's. They will always be heading in the same direction as the car.

The function returns true/ True if there are X's ahead of the speeding car in the same lane, but returns false/False if the speeding car has already passed all of the car's in the lane, or if its lane is empty.
Examples:
These three will all return true (crash):

O='`o X                          


 X                  O='`o                              X


 XXXXXXX
 XO='`oX
 XXXXXXX



These three will all return false (no crash):

O='`o         


X O='`o   


XXXXXXX
XO='`o       
XXXXXXX
========================================
URL: https://www.codewars.com/kata/635a7827bafe03708e3e1db6
–ó–∞–¥–∞—á–∞:
X                X                     X
                               X          X
ùô´ùôßùô§ùô§ùô§ùô§ùô¢! ===== O='`o       
                                            X              X
                                                X
                          X

A car is zooming through the streets! Maybe a bit too fast... Here come some more cars! Oh-No!!!
Instructions:
You need to find, if given a multi-line string road, whether the speeding car will crash or not.
A road will always contain the following:

The speeding car, O='`o, who's driver is too scared to turn.
The other cars, signified by X's. They will always be heading in the same direction as the car.

The function returns true/ True if there are X's ahead of the speeding car in the same lane, but returns false/False if the speeding car has already passed all of the car's in the lane, or if its lane is empty.
Examples:
These three will all return true (crash):

O='`o X                          


 X                  O='`o                              X


 XXXXXXX
 XO='`oX
 XXXXXXX



These three will all return false (no crash):

O='`o         


X O='`o   


XXXXXXX
XO='`o       
XXXXXXX
========================================
URL: https://www.codewars.com/kata/635d9b5c8f20017aa1cf2cf6
–ó–∞–¥–∞—á–∞:
X                X                     X
                               X          X
ùô´ùôßùô§ùô§ùô§ùô§ùô¢! ===== O='`o       
                                            X              X
                                                X
                          X

A car is zooming through the streets! Maybe a bit too fast... Here come some more cars! Oh-No!!!
Instructions:
You need to find, if given a multi-line string road, whether the speeding car will crash or not.
A road will always contain the following:

The speeding car, O='`o, who's driver is too scared to turn.
The other cars, signified by X's. They will always be heading in the same direction as the car.

The function returns true/ True if there are X's ahead of the speeding car in the same lane, but returns false/False if the speeding car has already passed all of the car's in the lane, or if its lane is empty.
Examples:
These three will all return true (crash):

O='`o X                          


 X                  O='`o                              X


 XXXXXXX
 XO='`oX
 XXXXXXX



These three will all return false (no crash):

O='`o         


X O='`o   


XXXXXXX
XO='`o       
XXXXXXX
========================================
URL: https://www.codewars.com/kata/6357825a00fba284e0189798
–ó–∞–¥–∞—á–∞:
Prince Arthas needs your help! Mal'ganis has spread an infection amongst the Stratholme citizens, and we must help Arthas prevent this infection from spreading to other parts of the Kingdom.
You will receive a string s as input: Each "word" represents a house, and each letter represents a citizen. All infected citizens are represented as "i" or "I" in s. You must eradicate them, and their neighbors. If an infected citizen appears after or before a space, you should not delete the space, but keep in mind that the distance from "house" to "house" (word to word) has to have only one space. 
EXAMPLES:
"STRING"                       -> "STG"
"1i2 33 i4i5 i555ii5"          -> "33 5"
"It is a bit chilly"           -> "a cly"
"Pineapple pizza is delicious" -> "eapple za deus"
"It is not there"              -> "not there"

NOTES: 

There are no apostrophes or any non-alphanumeric characters other than spaces.
Make sure there are no leading or trailing spaces in the result string
You will always be given a valid string.
You won't be provided any empty strings.

Good luck and for the Alliance!
========================================
URL: https://www.codewars.com/kata/634d0f7c562caa0016debac5
–ó–∞–¥–∞—á–∞:
Prince Arthas needs your help! Mal'ganis has spread an infection amongst the Stratholme citizens, and we must help Arthas prevent this infection from spreading to other parts of the Kingdom.
You will receive a string s as input: Each "word" represents a house, and each letter represents a citizen. All infected citizens are represented as "i" or "I" in s. You must eradicate them, and their neighbors. If an infected citizen appears after or before a space, you should not delete the space, but keep in mind that the distance from "house" to "house" (word to word) has to have only one space. 
EXAMPLES:
"STRING"                       -> "STG"
"1i2 33 i4i5 i555ii5"          -> "33 5"
"It is a bit chilly"           -> "a cly"
"Pineapple pizza is delicious" -> "eapple za deus"
"It is not there"              -> "not there"

NOTES: 

There are no apostrophes or any non-alphanumeric characters other than spaces.
Make sure there are no leading or trailing spaces in the result string
You will always be given a valid string.
You won't be provided any empty strings.

Good luck and for the Alliance!
========================================
URL: https://www.codewars.com/kata/634913db7611b9003dff49ad
–ó–∞–¥–∞—á–∞:
Prince Arthas needs your help! Mal'ganis has spread an infection amongst the Stratholme citizens, and we must help Arthas prevent this infection from spreading to other parts of the Kingdom.
You will receive a string s as input: Each "word" represents a house, and each letter represents a citizen. All infected citizens are represented as "i" or "I" in s. You must eradicate them, and their neighbors. If an infected citizen appears after or before a space, you should not delete the space, but keep in mind that the distance from "house" to "house" (word to word) has to have only one space. 
EXAMPLES:
"STRING"                       -> "STG"
"1i2 33 i4i5 i555ii5"          -> "33 5"
"It is a bit chilly"           -> "a cly"
"Pineapple pizza is delicious" -> "eapple za deus"
"It is not there"              -> "not there"

NOTES: 

There are no apostrophes or any non-alphanumeric characters other than spaces.
Make sure there are no leading or trailing spaces in the result string
You will always be given a valid string.
You won't be provided any empty strings.

Good luck and for the Alliance!
========================================
URL: https://www.codewars.com/kata/634d0723075de3f97a9eb604
–ó–∞–¥–∞—á–∞:
Prince Arthas needs your help! Mal'ganis has spread an infection amongst the Stratholme citizens, and we must help Arthas prevent this infection from spreading to other parts of the Kingdom.
You will receive a string s as input: Each "word" represents a house, and each letter represents a citizen. All infected citizens are represented as "i" or "I" in s. You must eradicate them, and their neighbors. If an infected citizen appears after or before a space, you should not delete the space, but keep in mind that the distance from "house" to "house" (word to word) has to have only one space. 
EXAMPLES:
"STRING"                       -> "STG"
"1i2 33 i4i5 i555ii5"          -> "33 5"
"It is a bit chilly"           -> "a cly"
"Pineapple pizza is delicious" -> "eapple za deus"
"It is not there"              -> "not there"

NOTES: 

There are no apostrophes or any non-alphanumeric characters other than spaces.
Make sure there are no leading or trailing spaces in the result string
You will always be given a valid string.
You won't be provided any empty strings.

Good luck and for the Alliance!
========================================
URL: https://www.codewars.com/kata/634ac4e77611b9f57dff456d
–ó–∞–¥–∞—á–∞:
Prince Arthas needs your help! Mal'ganis has spread an infection amongst the Stratholme citizens, and we must help Arthas prevent this infection from spreading to other parts of the Kingdom.
You will receive a string s as input: Each "word" represents a house, and each letter represents a citizen. All infected citizens are represented as "i" or "I" in s. You must eradicate them, and their neighbors. If an infected citizen appears after or before a space, you should not delete the space, but keep in mind that the distance from "house" to "house" (word to word) has to have only one space. 
EXAMPLES:
"STRING"                       -> "STG"
"1i2 33 i4i5 i555ii5"          -> "33 5"
"It is a bit chilly"           -> "a cly"
"Pineapple pizza is delicious" -> "eapple za deus"
"It is not there"              -> "not there"

NOTES: 

There are no apostrophes or any non-alphanumeric characters other than spaces.
Make sure there are no leading or trailing spaces in the result string
You will always be given a valid string.
You won't be provided any empty strings.

Good luck and for the Alliance!
========================================
URL: https://www.codewars.com/kata/6347f9715467f0001b434936
–ó–∞–¥–∞—á–∞:
Description
In mathematics, and more specifically number theory, the hyperfactorial of a positive integer nnn is the product of the numbers 11,22,...,nn1^1 , 2^2, ..., n^n 11,22,...,nn:
H(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónnH(n) = 1^1 \times 2^2 \times 3^3 \times ... \times (n-1)^{n-1} \times n^nH(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónn
H(n)=‚àèi=1niiH(n) = \prod_{i=1}^{n} i^i H(n)=‚àèi=1n‚Äãii
Check out this Wikipedia article for more detail
Your task
Implement a function hyperfact(num) that takes a positive integer num and returns the hyperfactorial of it.
In order for your answer not to be too messy (hyperfactorial of 100 is 9015 digits long) give the answer modulo 1000000007.
Notes
1 <= n <= 300
50 random tests
========================================
URL: https://www.codewars.com/kata/6324786fcc1a9700260a2147
–ó–∞–¥–∞—á–∞:
Description
In mathematics, and more specifically number theory, the hyperfactorial of a positive integer nnn is the product of the numbers 11,22,...,nn1^1 , 2^2, ..., n^n 11,22,...,nn:
H(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónnH(n) = 1^1 \times 2^2 \times 3^3 \times ... \times (n-1)^{n-1} \times n^nH(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónn
H(n)=‚àèi=1niiH(n) = \prod_{i=1}^{n} i^i H(n)=‚àèi=1n‚Äãii
Check out this Wikipedia article for more detail
Your task
Implement a function hyperfact(num) that takes a positive integer num and returns the hyperfactorial of it.
In order for your answer not to be too messy (hyperfactorial of 100 is 9015 digits long) give the answer modulo 1000000007.
Notes
1 <= n <= 300
50 random tests
========================================
URL: https://www.codewars.com/kata/633874ed198a4c00286aa39d
–ó–∞–¥–∞—á–∞:
Description
In mathematics, and more specifically number theory, the hyperfactorial of a positive integer nnn is the product of the numbers 11,22,...,nn1^1 , 2^2, ..., n^n 11,22,...,nn:
H(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónnH(n) = 1^1 \times 2^2 \times 3^3 \times ... \times (n-1)^{n-1} \times n^nH(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónn
H(n)=‚àèi=1niiH(n) = \prod_{i=1}^{n} i^i H(n)=‚àèi=1n‚Äãii
Check out this Wikipedia article for more detail
Your task
Implement a function hyperfact(num) that takes a positive integer num and returns the hyperfactorial of it.
In order for your answer not to be too messy (hyperfactorial of 100 is 9015 digits long) give the answer modulo 1000000007.
Notes
1 <= n <= 300
50 random tests
========================================
URL: https://www.codewars.com/kata/6339de328a3b8f0016cc5b8d
–ó–∞–¥–∞—á–∞:
Description
In mathematics, and more specifically number theory, the hyperfactorial of a positive integer nnn is the product of the numbers 11,22,...,nn1^1 , 2^2, ..., n^n 11,22,...,nn:
H(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónnH(n) = 1^1 \times 2^2 \times 3^3 \times ... \times (n-1)^{n-1} \times n^nH(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónn
H(n)=‚àèi=1niiH(n) = \prod_{i=1}^{n} i^i H(n)=‚àèi=1n‚Äãii
Check out this Wikipedia article for more detail
Your task
Implement a function hyperfact(num) that takes a positive integer num and returns the hyperfactorial of it.
In order for your answer not to be too messy (hyperfactorial of 100 is 9015 digits long) give the answer modulo 1000000007.
Notes
1 <= n <= 300
50 random tests
========================================
URL: https://www.codewars.com/kata/633bbba75882f6004f9dae4c
–ó–∞–¥–∞—á–∞:
Description
In mathematics, and more specifically number theory, the hyperfactorial of a positive integer nnn is the product of the numbers 11,22,...,nn1^1 , 2^2, ..., n^n 11,22,...,nn:
H(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónnH(n) = 1^1 \times 2^2 \times 3^3 \times ... \times (n-1)^{n-1} \times n^nH(n)=11√ó22√ó33√ó...√ó(n‚àí1)n‚àí1√ónn
H(n)=‚àèi=1niiH(n) = \prod_{i=1}^{n} i^i H(n)=‚àèi=1n‚Äãii
Check out this Wikipedia article for more detail
Your task
Implement a function hyperfact(num) that takes a positive integer num and returns the hyperfactorial of it.
In order for your answer not to be too messy (hyperfactorial of 100 is 9015 digits long) give the answer modulo 1000000007.
Notes
1 <= n <= 300
50 random tests
========================================
URL: https://www.codewars.com/kata/632408defa1507004aa4f2b5
–ó–∞–¥–∞—á–∞:
This is Part 1 of this series of two katas ‚Äî Part 2 is here.
If you like playing cards, have also a look at Hide a message in a deck of playing cards and Card-Chameleon, a Cipher with Playing cards.


In this series of two katas, we will draw playing cards from a deck using a particular procedure: after drawing one card, we place the next one at the bottom of the deck.
In details, the procedure is:

We draw the top card of the deck.
We take the next card, and put it at the bottom of the deck.
We repeat steps 1 and 2 until there aren't any card left in the deck.

Let's take a small deck containing four cards ‚Äî named A, B, C, D ‚Äî as an example:

The deck order is A-B-C-D at the beginning, the card A is at the top and D at the bottom.
A is drawn. The deck is now B-C-D.
B is placed at the bottom of the deck. The deck is now C-D-B.
C is drawn. The deck is now D-B.
D is placed at the bottom of the deck. The deck is now B-D.
B is drawn. The deck is now D.
D is drawn.

The order of the cards drawn is A-C-B-D.
Your task
Write a function accepting a deck of cards as argument, and returning the cards drawn following the procedure.
const draw = (deck) => {

draw = (deck) ->

export const draw = (deck: string[]): string[] => {

public static List<String> draw(List<String> deck) {

def draw(deck: Seq[String]): Seq[String] = ???

Each card is represented with a two-character string: the rank of the card and its suit.
AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC for the Clubs
AD 2D 3D 4D 5D 6D 7D 8D 9D TD JD QD KD for the Diamonds
AH 2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH for the Hearts
AS 2S 3S 4S 5S 6S 7S 8S 9S TS JS QS KS for the Spades
A preloaded function allows to easily print a deck to the console:
printDeck(deck, unicode);

printDeck deck, unicode

import { printDeck } from "./preloaded";

printDeck(deck, unicode);

DeckPrinter.printDeck(deck, unicode);

import Preloaded.printDeck

printDeck(deck, unicode)

The first argument is the deck to print, the second one is a boolean value allowing the selection of the character set: regular or Unicode (for which a font containing the playing cards characters needs to be installed on your system).
Example
const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"]

draw deck

const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

List<String> deck = Arrays.asList(new String[] {"KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"});

CardDraw.draw(deck);

val deck = Seq("KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS")

draw(deck)

should return:
["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"]

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

Seq("KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS")

Have fun!
I hope you will enjoy this kata! Feedbacks and translations are very welcome.
After this one, jump to Part 2, where we will be ordering the deck to be drawn to have a chosen result!
========================================
URL: https://www.codewars.com/kata/631f0c3a0b9cb0de6ded0529
–ó–∞–¥–∞—á–∞:
This is Part 1 of this series of two katas ‚Äî Part 2 is here.
If you like playing cards, have also a look at Hide a message in a deck of playing cards and Card-Chameleon, a Cipher with Playing cards.


In this series of two katas, we will draw playing cards from a deck using a particular procedure: after drawing one card, we place the next one at the bottom of the deck.
In details, the procedure is:

We draw the top card of the deck.
We take the next card, and put it at the bottom of the deck.
We repeat steps 1 and 2 until there aren't any card left in the deck.

Let's take a small deck containing four cards ‚Äî named A, B, C, D ‚Äî as an example:

The deck order is A-B-C-D at the beginning, the card A is at the top and D at the bottom.
A is drawn. The deck is now B-C-D.
B is placed at the bottom of the deck. The deck is now C-D-B.
C is drawn. The deck is now D-B.
D is placed at the bottom of the deck. The deck is now B-D.
B is drawn. The deck is now D.
D is drawn.

The order of the cards drawn is A-C-B-D.
Your task
Write a function accepting a deck of cards as argument, and returning the cards drawn following the procedure.
const draw = (deck) => {

draw = (deck) ->

export const draw = (deck: string[]): string[] => {

public static List<String> draw(List<String> deck) {

def draw(deck: Seq[String]): Seq[String] = ???

Each card is represented with a two-character string: the rank of the card and its suit.
AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC for the Clubs
AD 2D 3D 4D 5D 6D 7D 8D 9D TD JD QD KD for the Diamonds
AH 2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH for the Hearts
AS 2S 3S 4S 5S 6S 7S 8S 9S TS JS QS KS for the Spades
A preloaded function allows to easily print a deck to the console:
printDeck(deck, unicode);

printDeck deck, unicode

import { printDeck } from "./preloaded";

printDeck(deck, unicode);

DeckPrinter.printDeck(deck, unicode);

import Preloaded.printDeck

printDeck(deck, unicode)

The first argument is the deck to print, the second one is a boolean value allowing the selection of the character set: regular or Unicode (for which a font containing the playing cards characters needs to be installed on your system).
Example
const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"]

draw deck

const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

List<String> deck = Arrays.asList(new String[] {"KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"});

CardDraw.draw(deck);

val deck = Seq("KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS")

draw(deck)

should return:
["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"]

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

Seq("KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS")

Have fun!
I hope you will enjoy this kata! Feedbacks and translations are very welcome.
After this one, jump to Part 2, where we will be ordering the deck to be drawn to have a chosen result!
========================================
URL: https://www.codewars.com/kata/631082840289bf000e95a334
–ó–∞–¥–∞—á–∞:
This is Part 1 of this series of two katas ‚Äî Part 2 is here.
If you like playing cards, have also a look at Hide a message in a deck of playing cards and Card-Chameleon, a Cipher with Playing cards.


In this series of two katas, we will draw playing cards from a deck using a particular procedure: after drawing one card, we place the next one at the bottom of the deck.
In details, the procedure is:

We draw the top card of the deck.
We take the next card, and put it at the bottom of the deck.
We repeat steps 1 and 2 until there aren't any card left in the deck.

Let's take a small deck containing four cards ‚Äî named A, B, C, D ‚Äî as an example:

The deck order is A-B-C-D at the beginning, the card A is at the top and D at the bottom.
A is drawn. The deck is now B-C-D.
B is placed at the bottom of the deck. The deck is now C-D-B.
C is drawn. The deck is now D-B.
D is placed at the bottom of the deck. The deck is now B-D.
B is drawn. The deck is now D.
D is drawn.

The order of the cards drawn is A-C-B-D.
Your task
Write a function accepting a deck of cards as argument, and returning the cards drawn following the procedure.
const draw = (deck) => {

draw = (deck) ->

export const draw = (deck: string[]): string[] => {

public static List<String> draw(List<String> deck) {

def draw(deck: Seq[String]): Seq[String] = ???

Each card is represented with a two-character string: the rank of the card and its suit.
AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC for the Clubs
AD 2D 3D 4D 5D 6D 7D 8D 9D TD JD QD KD for the Diamonds
AH 2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH for the Hearts
AS 2S 3S 4S 5S 6S 7S 8S 9S TS JS QS KS for the Spades
A preloaded function allows to easily print a deck to the console:
printDeck(deck, unicode);

printDeck deck, unicode

import { printDeck } from "./preloaded";

printDeck(deck, unicode);

DeckPrinter.printDeck(deck, unicode);

import Preloaded.printDeck

printDeck(deck, unicode)

The first argument is the deck to print, the second one is a boolean value allowing the selection of the character set: regular or Unicode (for which a font containing the playing cards characters needs to be installed on your system).
Example
const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"]

draw deck

const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

List<String> deck = Arrays.asList(new String[] {"KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"});

CardDraw.draw(deck);

val deck = Seq("KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS")

draw(deck)

should return:
["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"]

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

Seq("KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS")

Have fun!
I hope you will enjoy this kata! Feedbacks and translations are very welcome.
After this one, jump to Part 2, where we will be ordering the deck to be drawn to have a chosen result!
========================================
URL: https://www.codewars.com/kata/62fd5b557d267aa2d746bc19
–ó–∞–¥–∞—á–∞:
This is Part 1 of this series of two katas ‚Äî Part 2 is here.
If you like playing cards, have also a look at Hide a message in a deck of playing cards and Card-Chameleon, a Cipher with Playing cards.


In this series of two katas, we will draw playing cards from a deck using a particular procedure: after drawing one card, we place the next one at the bottom of the deck.
In details, the procedure is:

We draw the top card of the deck.
We take the next card, and put it at the bottom of the deck.
We repeat steps 1 and 2 until there aren't any card left in the deck.

Let's take a small deck containing four cards ‚Äî named A, B, C, D ‚Äî as an example:

The deck order is A-B-C-D at the beginning, the card A is at the top and D at the bottom.
A is drawn. The deck is now B-C-D.
B is placed at the bottom of the deck. The deck is now C-D-B.
C is drawn. The deck is now D-B.
D is placed at the bottom of the deck. The deck is now B-D.
B is drawn. The deck is now D.
D is drawn.

The order of the cards drawn is A-C-B-D.
Your task
Write a function accepting a deck of cards as argument, and returning the cards drawn following the procedure.
const draw = (deck) => {

draw = (deck) ->

export const draw = (deck: string[]): string[] => {

public static List<String> draw(List<String> deck) {

def draw(deck: Seq[String]): Seq[String] = ???

Each card is represented with a two-character string: the rank of the card and its suit.
AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC for the Clubs
AD 2D 3D 4D 5D 6D 7D 8D 9D TD JD QD KD for the Diamonds
AH 2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH for the Hearts
AS 2S 3S 4S 5S 6S 7S 8S 9S TS JS QS KS for the Spades
A preloaded function allows to easily print a deck to the console:
printDeck(deck, unicode);

printDeck deck, unicode

import { printDeck } from "./preloaded";

printDeck(deck, unicode);

DeckPrinter.printDeck(deck, unicode);

import Preloaded.printDeck

printDeck(deck, unicode)

The first argument is the deck to print, the second one is a boolean value allowing the selection of the character set: regular or Unicode (for which a font containing the playing cards characters needs to be installed on your system).
Example
const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"]

draw deck

const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

List<String> deck = Arrays.asList(new String[] {"KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"});

CardDraw.draw(deck);

val deck = Seq("KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS")

draw(deck)

should return:
["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"]

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

Seq("KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS")

Have fun!
I hope you will enjoy this kata! Feedbacks and translations are very welcome.
After this one, jump to Part 2, where we will be ordering the deck to be drawn to have a chosen result!
========================================
URL: https://www.codewars.com/kata/630647be37f67000363dff04
–ó–∞–¥–∞—á–∞:
This is Part 1 of this series of two katas ‚Äî Part 2 is here.
If you like playing cards, have also a look at Hide a message in a deck of playing cards and Card-Chameleon, a Cipher with Playing cards.


In this series of two katas, we will draw playing cards from a deck using a particular procedure: after drawing one card, we place the next one at the bottom of the deck.
In details, the procedure is:

We draw the top card of the deck.
We take the next card, and put it at the bottom of the deck.
We repeat steps 1 and 2 until there aren't any card left in the deck.

Let's take a small deck containing four cards ‚Äî named A, B, C, D ‚Äî as an example:

The deck order is A-B-C-D at the beginning, the card A is at the top and D at the bottom.
A is drawn. The deck is now B-C-D.
B is placed at the bottom of the deck. The deck is now C-D-B.
C is drawn. The deck is now D-B.
D is placed at the bottom of the deck. The deck is now B-D.
B is drawn. The deck is now D.
D is drawn.

The order of the cards drawn is A-C-B-D.
Your task
Write a function accepting a deck of cards as argument, and returning the cards drawn following the procedure.
const draw = (deck) => {

draw = (deck) ->

export const draw = (deck: string[]): string[] => {

public static List<String> draw(List<String> deck) {

def draw(deck: Seq[String]): Seq[String] = ???

Each card is represented with a two-character string: the rank of the card and its suit.
AC 2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC for the Clubs
AD 2D 3D 4D 5D 6D 7D 8D 9D TD JD QD KD for the Diamonds
AH 2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH for the Hearts
AS 2S 3S 4S 5S 6S 7S 8S 9S TS JS QS KS for the Spades
A preloaded function allows to easily print a deck to the console:
printDeck(deck, unicode);

printDeck deck, unicode

import { printDeck } from "./preloaded";

printDeck(deck, unicode);

DeckPrinter.printDeck(deck, unicode);

import Preloaded.printDeck

printDeck(deck, unicode)

The first argument is the deck to print, the second one is a boolean value allowing the selection of the character set: regular or Unicode (for which a font containing the playing cards characters needs to be installed on your system).
Example
const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"]

draw deck

const deck = ["KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"];

draw(deck);

List<String> deck = Arrays.asList(new String[] {"KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS"});

CardDraw.draw(deck);

val deck = Seq("KC", "KH", "QC", "KS", "KD", "QH", "QD", "QS")

draw(deck)

should return:
["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"]

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

["KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS"];

Seq("KC", "QC", "KD", "QD", "KH", "QH", "KS", "QS")

Have fun!
I hope you will enjoy this kata! Feedbacks and translations are very welcome.
After this one, jump to Part 2, where we will be ordering the deck to be drawn to have a chosen result!
========================================
URL: https://www.codewars.com/kata/62f96f01d67d0a0014f365cf
–ó–∞–¥–∞—á–∞:
Description
   Steve, from minecraft, is jumping down from blocks to blocks and can get damages at each jump. Damage depends on distance between blocks and block type he jumped on. The goal is to know if he survives his descent or not.
You are given a list of N blocks as strings, in the format 'BLOCK_HEIGHT BLOCK_TYPE'. Steve jumps from one block to the next, and get damages calculated with the following formula:
DMG = max(0, (DISTANCE - 3.5) * (1 - DMG_REDUCTION))

  The distance is calculated as the difference between the height of the current and the next block. DMG should be rounded down to the nearest integral. 
 DMG_REDUCTION depends on BLOCK_TYPE:
BLOCK_TYPE --> DMG_REDUCTION
'D' --> 0 #Dirt block
'B' --> 0.5 #Bed
'H' --> 0.8 #Hay block
'W' --> 1 #Water block

Task
  Write a function, that returns the outcome for Steve:

If he survives, it returns 'jumped to the end with X remaining HP', where X is the remaining HP at the end of the array.
If he dies before the end of the array, it returns 'died on I', where I is the index of the jump he dies.

Rules

Steve has 20 HP at the start. If HP drops below or equal 0, Steve dies. 
BLOCK_TYPE can be 'D' or 'B' or 'H' or 'W' only.
N cannot be less than 2.
BLOCK_HEIGHT[i] cannot be less than BLOCK_HEIGHT[i+1] and always non-negative integral.
All inputs are valid according to the rules.

Examples (input --> output)
['10 D', '4 D', '0 D'] --> 'jumped to the end with 18 remaining HP'     
    |      |      |
    |      |   The third block with height 0 and type D
    |   The second block with height 4 and type D
 The first block with height 10 and type D
 
 /*All blocks are type D, so DMG_REDUCTION will be 0 for all cases
 DISTANCE on the first jump will be 10 - 4 = 6
 DMG on the first jump will be max(0, (6 - 3.5) * (1 - 0)) = 2.5 -> 2 (rounding down)
 DISTANCE on the second jump will be 4 - 0 = 4
 DMG on the second jump will be max(0, (4 - 3,5) * (1 - 0)) = 0.5 -> 0 (rounding down)
 So HP in the end will be 20 - 2 - 0 = 18*/
 
 
['100 D', '50 H'] --> 'jumped to the end with 11 remaining HP'

['999 D', '0 W'] --> 'jumped to the end with 20 remaining HP'

['999 D', '0 D'] --> 'died on 1'
========================================
URL: https://www.codewars.com/kata/62d81c6361677d57d8ff86c9
–ó–∞–¥–∞—á–∞:
Description
   Steve, from minecraft, is jumping down from blocks to blocks and can get damages at each jump. Damage depends on distance between blocks and block type he jumped on. The goal is to know if he survives his descent or not.
You are given a list of N blocks as strings, in the format 'BLOCK_HEIGHT BLOCK_TYPE'. Steve jumps from one block to the next, and get damages calculated with the following formula:
DMG = max(0, (DISTANCE - 3.5) * (1 - DMG_REDUCTION))

  The distance is calculated as the difference between the height of the current and the next block. DMG should be rounded down to the nearest integral. 
 DMG_REDUCTION depends on BLOCK_TYPE:
BLOCK_TYPE --> DMG_REDUCTION
'D' --> 0 #Dirt block
'B' --> 0.5 #Bed
'H' --> 0.8 #Hay block
'W' --> 1 #Water block

Task
  Write a function, that returns the outcome for Steve:

If he survives, it returns 'jumped to the end with X remaining HP', where X is the remaining HP at the end of the array.
If he dies before the end of the array, it returns 'died on I', where I is the index of the jump he dies.

Rules

Steve has 20 HP at the start. If HP drops below or equal 0, Steve dies. 
BLOCK_TYPE can be 'D' or 'B' or 'H' or 'W' only.
N cannot be less than 2.
BLOCK_HEIGHT[i] cannot be less than BLOCK_HEIGHT[i+1] and always non-negative integral.
All inputs are valid according to the rules.

Examples (input --> output)
['10 D', '4 D', '0 D'] --> 'jumped to the end with 18 remaining HP'     
    |      |      |
    |      |   The third block with height 0 and type D
    |   The second block with height 4 and type D
 The first block with height 10 and type D
 
 /*All blocks are type D, so DMG_REDUCTION will be 0 for all cases
 DISTANCE on the first jump will be 10 - 4 = 6
 DMG on the first jump will be max(0, (6 - 3.5) * (1 - 0)) = 2.5 -> 2 (rounding down)
 DISTANCE on the second jump will be 4 - 0 = 4
 DMG on the second jump will be max(0, (4 - 3,5) * (1 - 0)) = 0.5 -> 0 (rounding down)
 So HP in the end will be 20 - 2 - 0 = 18*/
 
 
['100 D', '50 H'] --> 'jumped to the end with 11 remaining HP'

['999 D', '0 W'] --> 'jumped to the end with 20 remaining HP'

['999 D', '0 D'] --> 'died on 1'
========================================
URL: https://www.codewars.com/kata/62f17be8356b63006a9899dc
–ó–∞–¥–∞—á–∞:
Description
   Steve, from minecraft, is jumping down from blocks to blocks and can get damages at each jump. Damage depends on distance between blocks and block type he jumped on. The goal is to know if he survives his descent or not.
You are given a list of N blocks as strings, in the format 'BLOCK_HEIGHT BLOCK_TYPE'. Steve jumps from one block to the next, and get damages calculated with the following formula:
DMG = max(0, (DISTANCE - 3.5) * (1 - DMG_REDUCTION))

  The distance is calculated as the difference between the height of the current and the next block. DMG should be rounded down to the nearest integral. 
 DMG_REDUCTION depends on BLOCK_TYPE:
BLOCK_TYPE --> DMG_REDUCTION
'D' --> 0 #Dirt block
'B' --> 0.5 #Bed
'H' --> 0.8 #Hay block
'W' --> 1 #Water block

Task
  Write a function, that returns the outcome for Steve:

If he survives, it returns 'jumped to the end with X remaining HP', where X is the remaining HP at the end of the array.
If he dies before the end of the array, it returns 'died on I', where I is the index of the jump he dies.

Rules

Steve has 20 HP at the start. If HP drops below or equal 0, Steve dies. 
BLOCK_TYPE can be 'D' or 'B' or 'H' or 'W' only.
N cannot be less than 2.
BLOCK_HEIGHT[i] cannot be less than BLOCK_HEIGHT[i+1] and always non-negative integral.
All inputs are valid according to the rules.

Examples (input --> output)
['10 D', '4 D', '0 D'] --> 'jumped to the end with 18 remaining HP'     
    |      |      |
    |      |   The third block with height 0 and type D
    |   The second block with height 4 and type D
 The first block with height 10 and type D
 
 /*All blocks are type D, so DMG_REDUCTION will be 0 for all cases
 DISTANCE on the first jump will be 10 - 4 = 6
 DMG on the first jump will be max(0, (6 - 3.5) * (1 - 0)) = 2.5 -> 2 (rounding down)
 DISTANCE on the second jump will be 4 - 0 = 4
 DMG on the second jump will be max(0, (4 - 3,5) * (1 - 0)) = 0.5 -> 0 (rounding down)
 So HP in the end will be 20 - 2 - 0 = 18*/
 
 
['100 D', '50 H'] --> 'jumped to the end with 11 remaining HP'

['999 D', '0 W'] --> 'jumped to the end with 20 remaining HP'

['999 D', '0 D'] --> 'died on 1'
========================================
URL: https://www.codewars.com/kata/62eb800ba29959001c07dfee
–ó–∞–¥–∞—á–∞:
Description
   Steve, from minecraft, is jumping down from blocks to blocks and can get damages at each jump. Damage depends on distance between blocks and block type he jumped on. The goal is to know if he survives his descent or not.
You are given a list of N blocks as strings, in the format 'BLOCK_HEIGHT BLOCK_TYPE'. Steve jumps from one block to the next, and get damages calculated with the following formula:
DMG = max(0, (DISTANCE - 3.5) * (1 - DMG_REDUCTION))

  The distance is calculated as the difference between the height of the current and the next block. DMG should be rounded down to the nearest integral. 
 DMG_REDUCTION depends on BLOCK_TYPE:
BLOCK_TYPE --> DMG_REDUCTION
'D' --> 0 #Dirt block
'B' --> 0.5 #Bed
'H' --> 0.8 #Hay block
'W' --> 1 #Water block

Task
  Write a function, that returns the outcome for Steve:

If he survives, it returns 'jumped to the end with X remaining HP', where X is the remaining HP at the end of the array.
If he dies before the end of the array, it returns 'died on I', where I is the index of the jump he dies.

Rules

Steve has 20 HP at the start. If HP drops below or equal 0, Steve dies. 
BLOCK_TYPE can be 'D' or 'B' or 'H' or 'W' only.
N cannot be less than 2.
BLOCK_HEIGHT[i] cannot be less than BLOCK_HEIGHT[i+1] and always non-negative integral.
All inputs are valid according to the rules.

Examples (input --> output)
['10 D', '4 D', '0 D'] --> 'jumped to the end with 18 remaining HP'     
    |      |      |
    |      |   The third block with height 0 and type D
    |   The second block with height 4 and type D
 The first block with height 10 and type D
 
 /*All blocks are type D, so DMG_REDUCTION will be 0 for all cases
 DISTANCE on the first jump will be 10 - 4 = 6
 DMG on the first jump will be max(0, (6 - 3.5) * (1 - 0)) = 2.5 -> 2 (rounding down)
 DISTANCE on the second jump will be 4 - 0 = 4
 DMG on the second jump will be max(0, (4 - 3,5) * (1 - 0)) = 0.5 -> 0 (rounding down)
 So HP in the end will be 20 - 2 - 0 = 18*/
 
 
['100 D', '50 H'] --> 'jumped to the end with 11 remaining HP'

['999 D', '0 W'] --> 'jumped to the end with 20 remaining HP'

['999 D', '0 D'] --> 'died on 1'
========================================
URL: https://www.codewars.com/kata/62dabb2225ea8e00293da513
–ó–∞–¥–∞—á–∞:
Description
   Steve, from minecraft, is jumping down from blocks to blocks and can get damages at each jump. Damage depends on distance between blocks and block type he jumped on. The goal is to know if he survives his descent or not.
You are given a list of N blocks as strings, in the format 'BLOCK_HEIGHT BLOCK_TYPE'. Steve jumps from one block to the next, and get damages calculated with the following formula:
DMG = max(0, (DISTANCE - 3.5) * (1 - DMG_REDUCTION))

  The distance is calculated as the difference between the height of the current and the next block. DMG should be rounded down to the nearest integral. 
 DMG_REDUCTION depends on BLOCK_TYPE:
BLOCK_TYPE --> DMG_REDUCTION
'D' --> 0 #Dirt block
'B' --> 0.5 #Bed
'H' --> 0.8 #Hay block
'W' --> 1 #Water block

Task
  Write a function, that returns the outcome for Steve:

If he survives, it returns 'jumped to the end with X remaining HP', where X is the remaining HP at the end of the array.
If he dies before the end of the array, it returns 'died on I', where I is the index of the jump he dies.

Rules

Steve has 20 HP at the start. If HP drops below or equal 0, Steve dies. 
BLOCK_TYPE can be 'D' or 'B' or 'H' or 'W' only.
N cannot be less than 2.
BLOCK_HEIGHT[i] cannot be less than BLOCK_HEIGHT[i+1] and always non-negative integral.
All inputs are valid according to the rules.

Examples (input --> output)
['10 D', '4 D', '0 D'] --> 'jumped to the end with 18 remaining HP'     
    |      |      |
    |      |   The third block with height 0 and type D
    |   The second block with height 4 and type D
 The first block with height 10 and type D
 
 /*All blocks are type D, so DMG_REDUCTION will be 0 for all cases
 DISTANCE on the first jump will be 10 - 4 = 6
 DMG on the first jump will be max(0, (6 - 3.5) * (1 - 0)) = 2.5 -> 2 (rounding down)
 DISTANCE on the second jump will be 4 - 0 = 4
 DMG on the second jump will be max(0, (4 - 3,5) * (1 - 0)) = 0.5 -> 0 (rounding down)
 So HP in the end will be 20 - 2 - 0 = 18*/
 
 
['100 D', '50 H'] --> 'jumped to the end with 11 remaining HP'

['999 D', '0 W'] --> 'jumped to the end with 20 remaining HP'

['999 D', '0 D'] --> 'died on 1'
========================================
URL: https://www.codewars.com/kata/62d34faad32b8c002a17d6d9
–ó–∞–¥–∞—á–∞:
Description

The term "google dorking" describes the process of using 
filters (also called "operators") in google search 
queries which limit the search results according to the 
used filters. It's a technique often used by "hackers" 
in order to find valuable information about a target. 
But thats not what we do here
The syntax of most filters looks as following: <filter>:<value>
Hence, a complete search query could look like
intext:kyu site:codewars.com 

If you enter the above query into Googles search bar, your results
are limited to codewars.com and every result page should
contain the word kyu.
Pretty useful, huh?

Task
A coder friend of yours gave you some queries which -he promises- will
return interesting results. But some of the queries contain outdated 
filters which don't work anymore. Hence, you decide to code a function
named is_valid (isValid for js) which takes in a search query of 
type str and validates that every filter within the query is up-to-date. 
If only one filter is invalid, then the entire query is invalid.

Preloaded
FILTERS - A tuple of valid search filters

Note

A search query will contain 0 < n < 100 filters


Your function should return True for valid and False for invalid


Each filter follows the <filter-name>:<value> syntax

Filters are seperated by a space (\s)


You only need to check if the filter-name is valid

For a filter-name to be valid, the FILTERS array must contain this filter-name.




Fun Fact
intext:"google dorking" site:codewars.com

Entering the above query into Googles search bar will give you a link to this kata! (this link used to be the only result of this query until the approval of this kata, since then the query has also showed pages that have this kata in the similar katas section)

Good Luck :)
========================================
URL: https://www.codewars.com/kata/62cecd4e5487c10028996e04
–ó–∞–¥–∞—á–∞:
Description

The term "google dorking" describes the process of using 
filters (also called "operators") in google search 
queries which limit the search results according to the 
used filters. It's a technique often used by "hackers" 
in order to find valuable information about a target. 
But thats not what we do here
The syntax of most filters looks as following: <filter>:<value>
Hence, a complete search query could look like
intext:kyu site:codewars.com 

If you enter the above query into Googles search bar, your results
are limited to codewars.com and every result page should
contain the word kyu.
Pretty useful, huh?

Task
A coder friend of yours gave you some queries which -he promises- will
return interesting results. But some of the queries contain outdated 
filters which don't work anymore. Hence, you decide to code a function
named is_valid (isValid for js) which takes in a search query of 
type str and validates that every filter within the query is up-to-date. 
If only one filter is invalid, then the entire query is invalid.

Preloaded
FILTERS - A tuple of valid search filters

Note

A search query will contain 0 < n < 100 filters


Your function should return True for valid and False for invalid


Each filter follows the <filter-name>:<value> syntax

Filters are seperated by a space (\s)


You only need to check if the filter-name is valid

For a filter-name to be valid, the FILTERS array must contain this filter-name.




Fun Fact
intext:"google dorking" site:codewars.com

Entering the above query into Googles search bar will give you a link to this kata! (this link used to be the only result of this query until the approval of this kata, since then the query has also showed pages that have this kata in the similar katas section)

Good Luck :)
========================================
URL: https://www.codewars.com/kata/62cc8badb88fb2b0c4d09937
–ó–∞–¥–∞—á–∞:
Description

The term "google dorking" describes the process of using 
filters (also called "operators") in google search 
queries which limit the search results according to the 
used filters. It's a technique often used by "hackers" 
in order to find valuable information about a target. 
But thats not what we do here
The syntax of most filters looks as following: <filter>:<value>
Hence, a complete search query could look like
intext:kyu site:codewars.com 

If you enter the above query into Googles search bar, your results
are limited to codewars.com and every result page should
contain the word kyu.
Pretty useful, huh?

Task
A coder friend of yours gave you some queries which -he promises- will
return interesting results. But some of the queries contain outdated 
filters which don't work anymore. Hence, you decide to code a function
named is_valid (isValid for js) which takes in a search query of 
type str and validates that every filter within the query is up-to-date. 
If only one filter is invalid, then the entire query is invalid.

Preloaded
FILTERS - A tuple of valid search filters

Note

A search query will contain 0 < n < 100 filters


Your function should return True for valid and False for invalid


Each filter follows the <filter-name>:<value> syntax

Filters are seperated by a space (\s)


You only need to check if the filter-name is valid

For a filter-name to be valid, the FILTERS array must contain this filter-name.




Fun Fact
intext:"google dorking" site:codewars.com

Entering the above query into Googles search bar will give you a link to this kata! (this link used to be the only result of this query until the approval of this kata, since then the query has also showed pages that have this kata in the similar katas section)

Good Luck :)
========================================
URL: https://www.codewars.com/kata/62cb487e43b37a5829ab5752
–ó–∞–¥–∞—á–∞:
Description

The term "google dorking" describes the process of using 
filters (also called "operators") in google search 
queries which limit the search results according to the 
used filters. It's a technique often used by "hackers" 
in order to find valuable information about a target. 
But thats not what we do here
The syntax of most filters looks as following: <filter>:<value>
Hence, a complete search query could look like
intext:kyu site:codewars.com 

If you enter the above query into Googles search bar, your results
are limited to codewars.com and every result page should
contain the word kyu.
Pretty useful, huh?

Task
A coder friend of yours gave you some queries which -he promises- will
return interesting results. But some of the queries contain outdated 
filters which don't work anymore. Hence, you decide to code a function
named is_valid (isValid for js) which takes in a search query of 
type str and validates that every filter within the query is up-to-date. 
If only one filter is invalid, then the entire query is invalid.

Preloaded
FILTERS - A tuple of valid search filters

Note

A search query will contain 0 < n < 100 filters


Your function should return True for valid and False for invalid


Each filter follows the <filter-name>:<value> syntax

Filters are seperated by a space (\s)


You only need to check if the filter-name is valid

For a filter-name to be valid, the FILTERS array must contain this filter-name.




Fun Fact
intext:"google dorking" site:codewars.com

Entering the above query into Googles search bar will give you a link to this kata! (this link used to be the only result of this query until the approval of this kata, since then the query has also showed pages that have this kata in the similar katas section)

Good Luck :)
========================================
URL: https://www.codewars.com/kata/62cc917fedc75c95ef961ad1
–ó–∞–¥–∞—á–∞:
Description

The term "google dorking" describes the process of using 
filters (also called "operators") in google search 
queries which limit the search results according to the 
used filters. It's a technique often used by "hackers" 
in order to find valuable information about a target. 
But thats not what we do here
The syntax of most filters looks as following: <filter>:<value>
Hence, a complete search query could look like
intext:kyu site:codewars.com 

If you enter the above query into Googles search bar, your results
are limited to codewars.com and every result page should
contain the word kyu.
Pretty useful, huh?

Task
A coder friend of yours gave you some queries which -he promises- will
return interesting results. But some of the queries contain outdated 
filters which don't work anymore. Hence, you decide to code a function
named is_valid (isValid for js) which takes in a search query of 
type str and validates that every filter within the query is up-to-date. 
If only one filter is invalid, then the entire query is invalid.

Preloaded
FILTERS - A tuple of valid search filters

Note

A search query will contain 0 < n < 100 filters


Your function should return True for valid and False for invalid


Each filter follows the <filter-name>:<value> syntax

Filters are seperated by a space (\s)


You only need to check if the filter-name is valid

For a filter-name to be valid, the FILTERS array must contain this filter-name.




Fun Fact
intext:"google dorking" site:codewars.com

Entering the above query into Googles search bar will give you a link to this kata! (this link used to be the only result of this query until the approval of this kata, since then the query has also showed pages that have this kata in the similar katas section)

Good Luck :)
========================================
URL: https://www.codewars.com/kata/62b931bcb16c630025076970
–ó–∞–¥–∞—á–∞:
The Twenty-One Card Trick, also known as the 11th card trick or three column trick, is a simple self-working card trick that uses basic mathematics to reveal the user's selected card.The game uses a selection of 21 cards out of a standard deck. These are shuffled and the player selects one at random. The cards are then dealt out face up in three columns of 7 cards each. The player points to the column containing their card. The cards are picked up and the process is repeated three times, at which point the magician reveals the selected card.

Source: Wikipedia
Your task is to implement an algorithm that is able to execute the Twenty-One Card Trick. To simplify things, the cards will be changed to the set of integers between 1 and 21(inclusive). The function will be passed as argument a member of the audience that has selected a certain card and has a method get_input that receives a list of 3 lists as arguments and returns the index of the column containing the selected card. Example:
audience = Audience(13) # The audience member has selected the card 13

> audience.get_input([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]])
1 # Since 13 is at the 2nd column

audience = Audience.new 13

> audience.get_input [[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]
1 # Since 13 is at the 2nd column

const audience = new Audience(13);

> audience.getInput([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]);
1 // Since 13 is at the 2nd column

// In C there is no audience object, you call get_input() directly:
get_input((int[]){1,2,3,4,5,6,7}, (int[]){8,9,10,11,12,13,14}, (int[]) {15,16,17,18,19,20,21});
// == 1, since 13 is in the 2nd column

After 3 times it is asked, however, the audience member no longer will give an answer. Use these three functions invokations to discover which card the audience member has.
========================================
URL: https://www.codewars.com/kata/62c93765cef6f10030dfa92b
–ó–∞–¥–∞—á–∞:
The Twenty-One Card Trick, also known as the 11th card trick or three column trick, is a simple self-working card trick that uses basic mathematics to reveal the user's selected card.The game uses a selection of 21 cards out of a standard deck. These are shuffled and the player selects one at random. The cards are then dealt out face up in three columns of 7 cards each. The player points to the column containing their card. The cards are picked up and the process is repeated three times, at which point the magician reveals the selected card.

Source: Wikipedia
Your task is to implement an algorithm that is able to execute the Twenty-One Card Trick. To simplify things, the cards will be changed to the set of integers between 1 and 21(inclusive). The function will be passed as argument a member of the audience that has selected a certain card and has a method get_input that receives a list of 3 lists as arguments and returns the index of the column containing the selected card. Example:
audience = Audience(13) # The audience member has selected the card 13

> audience.get_input([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]])
1 # Since 13 is at the 2nd column

audience = Audience.new 13

> audience.get_input [[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]
1 # Since 13 is at the 2nd column

const audience = new Audience(13);

> audience.getInput([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]);
1 // Since 13 is at the 2nd column

// In C there is no audience object, you call get_input() directly:
get_input((int[]){1,2,3,4,5,6,7}, (int[]){8,9,10,11,12,13,14}, (int[]) {15,16,17,18,19,20,21});
// == 1, since 13 is in the 2nd column

After 3 times it is asked, however, the audience member no longer will give an answer. Use these three functions invokations to discover which card the audience member has.
========================================
URL: https://www.codewars.com/kata/62bdd252d8ba0e0057da326c
–ó–∞–¥–∞—á–∞:
The Twenty-One Card Trick, also known as the 11th card trick or three column trick, is a simple self-working card trick that uses basic mathematics to reveal the user's selected card.The game uses a selection of 21 cards out of a standard deck. These are shuffled and the player selects one at random. The cards are then dealt out face up in three columns of 7 cards each. The player points to the column containing their card. The cards are picked up and the process is repeated three times, at which point the magician reveals the selected card.

Source: Wikipedia
Your task is to implement an algorithm that is able to execute the Twenty-One Card Trick. To simplify things, the cards will be changed to the set of integers between 1 and 21(inclusive). The function will be passed as argument a member of the audience that has selected a certain card and has a method get_input that receives a list of 3 lists as arguments and returns the index of the column containing the selected card. Example:
audience = Audience(13) # The audience member has selected the card 13

> audience.get_input([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]])
1 # Since 13 is at the 2nd column

audience = Audience.new 13

> audience.get_input [[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]
1 # Since 13 is at the 2nd column

const audience = new Audience(13);

> audience.getInput([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]);
1 // Since 13 is at the 2nd column

// In C there is no audience object, you call get_input() directly:
get_input((int[]){1,2,3,4,5,6,7}, (int[]){8,9,10,11,12,13,14}, (int[]) {15,16,17,18,19,20,21});
// == 1, since 13 is in the 2nd column

After 3 times it is asked, however, the audience member no longer will give an answer. Use these three functions invokations to discover which card the audience member has.
========================================
URL: https://www.codewars.com/kata/62b76a4f211432636c05d0a9
–ó–∞–¥–∞—á–∞:
The Twenty-One Card Trick, also known as the 11th card trick or three column trick, is a simple self-working card trick that uses basic mathematics to reveal the user's selected card.The game uses a selection of 21 cards out of a standard deck. These are shuffled and the player selects one at random. The cards are then dealt out face up in three columns of 7 cards each. The player points to the column containing their card. The cards are picked up and the process is repeated three times, at which point the magician reveals the selected card.

Source: Wikipedia
Your task is to implement an algorithm that is able to execute the Twenty-One Card Trick. To simplify things, the cards will be changed to the set of integers between 1 and 21(inclusive). The function will be passed as argument a member of the audience that has selected a certain card and has a method get_input that receives a list of 3 lists as arguments and returns the index of the column containing the selected card. Example:
audience = Audience(13) # The audience member has selected the card 13

> audience.get_input([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]])
1 # Since 13 is at the 2nd column

audience = Audience.new 13

> audience.get_input [[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]
1 # Since 13 is at the 2nd column

const audience = new Audience(13);

> audience.getInput([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]);
1 // Since 13 is at the 2nd column

// In C there is no audience object, you call get_input() directly:
get_input((int[]){1,2,3,4,5,6,7}, (int[]){8,9,10,11,12,13,14}, (int[]) {15,16,17,18,19,20,21});
// == 1, since 13 is in the 2nd column

After 3 times it is asked, however, the audience member no longer will give an answer. Use these three functions invokations to discover which card the audience member has.
========================================
URL: https://www.codewars.com/kata/62c4ad0e86f0166ec7bb8485
–ó–∞–¥–∞—á–∞:
The Twenty-One Card Trick, also known as the 11th card trick or three column trick, is a simple self-working card trick that uses basic mathematics to reveal the user's selected card.The game uses a selection of 21 cards out of a standard deck. These are shuffled and the player selects one at random. The cards are then dealt out face up in three columns of 7 cards each. The player points to the column containing their card. The cards are picked up and the process is repeated three times, at which point the magician reveals the selected card.

Source: Wikipedia
Your task is to implement an algorithm that is able to execute the Twenty-One Card Trick. To simplify things, the cards will be changed to the set of integers between 1 and 21(inclusive). The function will be passed as argument a member of the audience that has selected a certain card and has a method get_input that receives a list of 3 lists as arguments and returns the index of the column containing the selected card. Example:
audience = Audience(13) # The audience member has selected the card 13

> audience.get_input([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]])
1 # Since 13 is at the 2nd column

audience = Audience.new 13

> audience.get_input [[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]
1 # Since 13 is at the 2nd column

const audience = new Audience(13);

> audience.getInput([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]);
1 // Since 13 is at the 2nd column

// In C there is no audience object, you call get_input() directly:
get_input((int[]){1,2,3,4,5,6,7}, (int[]){8,9,10,11,12,13,14}, (int[]) {15,16,17,18,19,20,21});
// == 1, since 13 is in the 2nd column

After 3 times it is asked, however, the audience member no longer will give an answer. Use these three functions invokations to discover which card the audience member has.
========================================
URL: https://www.codewars.com/kata/62ad72443809a4006998218a
–ó–∞–¥–∞—á–∞:
Task
Write a function that checks if two non-negative integers make an "interlocking binary pair".
Interlock ?

numbers can be interlocked if their binary representations have no 1's in the same place
comparisons are made by bit position, starting from right to left (see the examples below)
when representations are of different lengths, the unmatched left-most bits are ignored

Examples

a = 9, b = 4
Stacking representations shows how they can interlock.
 9    1001
 4     100

Here, no 1's share any position, so the function returns true.

a = 3, b = 6
These representations do not interlock.
 3      11
 6     110

Finding they both have a 1 in the same position, the function returns false.


Input
Two non-negative integers.
Output
Boolean true or false whether or not these integers are interlockable.
Enjoy!
...and please consider one of the following kata to solve next:

Is Sator Square?
Four Letter Words ~ Mutations
Four Letter Words ~ Anagrams
Crossword Puzzle! (2x2)
Setting Places for the Dead
Playing With Toy Blocks ~ Can you build a 4x4 square?

Nota Bene:
This kata is accepting of translations for any languages other than: CoffeeScript, TypeScript, Go, Groovy, Julia, Dart, and Kotlin; as those are currently underway by the author. Thank you!
========================================
URL: https://www.codewars.com/kata/62a933d6d6deb7001093de16
–ó–∞–¥–∞—á–∞:
Task
Write a function that checks if two non-negative integers make an "interlocking binary pair".
Interlock ?

numbers can be interlocked if their binary representations have no 1's in the same place
comparisons are made by bit position, starting from right to left (see the examples below)
when representations are of different lengths, the unmatched left-most bits are ignored

Examples

a = 9, b = 4
Stacking representations shows how they can interlock.
 9    1001
 4     100

Here, no 1's share any position, so the function returns true.

a = 3, b = 6
These representations do not interlock.
 3      11
 6     110

Finding they both have a 1 in the same position, the function returns false.


Input
Two non-negative integers.
Output
Boolean true or false whether or not these integers are interlockable.
Enjoy!
...and please consider one of the following kata to solve next:

Is Sator Square?
Four Letter Words ~ Mutations
Four Letter Words ~ Anagrams
Crossword Puzzle! (2x2)
Setting Places for the Dead
Playing With Toy Blocks ~ Can you build a 4x4 square?

Nota Bene:
This kata is accepting of translations for any languages other than: CoffeeScript, TypeScript, Go, Groovy, Julia, Dart, and Kotlin; as those are currently underway by the author. Thank you!
========================================
URL: https://www.codewars.com/kata/628e3ee2e1daf90030239e8a
–ó–∞–¥–∞—á–∞:
Task
Write a function that checks if two non-negative integers make an "interlocking binary pair".
Interlock ?

numbers can be interlocked if their binary representations have no 1's in the same place
comparisons are made by bit position, starting from right to left (see the examples below)
when representations are of different lengths, the unmatched left-most bits are ignored

Examples

a = 9, b = 4
Stacking representations shows how they can interlock.
 9    1001
 4     100

Here, no 1's share any position, so the function returns true.

a = 3, b = 6
These representations do not interlock.
 3      11
 6     110

Finding they both have a 1 in the same position, the function returns false.


Input
Two non-negative integers.
Output
Boolean true or false whether or not these integers are interlockable.
Enjoy!
...and please consider one of the following kata to solve next:

Is Sator Square?
Four Letter Words ~ Mutations
Four Letter Words ~ Anagrams
Crossword Puzzle! (2x2)
Setting Places for the Dead
Playing With Toy Blocks ~ Can you build a 4x4 square?

Nota Bene:
This kata is accepting of translations for any languages other than: CoffeeScript, TypeScript, Go, Groovy, Julia, Dart, and Kotlin; as those are currently underway by the author. Thank you!
========================================
URL: https://www.codewars.com/kata/629e4d5f24b98110a83b2d0d
–ó–∞–¥–∞—á–∞:
Task
Write a function that checks if two non-negative integers make an "interlocking binary pair".
Interlock ?

numbers can be interlocked if their binary representations have no 1's in the same place
comparisons are made by bit position, starting from right to left (see the examples below)
when representations are of different lengths, the unmatched left-most bits are ignored

Examples

a = 9, b = 4
Stacking representations shows how they can interlock.
 9    1001
 4     100

Here, no 1's share any position, so the function returns true.

a = 3, b = 6
These representations do not interlock.
 3      11
 6     110

Finding they both have a 1 in the same position, the function returns false.


Input
Two non-negative integers.
Output
Boolean true or false whether or not these integers are interlockable.
Enjoy!
...and please consider one of the following kata to solve next:

Is Sator Square?
Four Letter Words ~ Mutations
Four Letter Words ~ Anagrams
Crossword Puzzle! (2x2)
Setting Places for the Dead
Playing With Toy Blocks ~ Can you build a 4x4 square?

Nota Bene:
This kata is accepting of translations for any languages other than: CoffeeScript, TypeScript, Go, Groovy, Julia, Dart, and Kotlin; as those are currently underway by the author. Thank you!
========================================
URL: https://www.codewars.com/kata/62a611067274990047f431a8
–ó–∞–¥–∞—á–∞:
Task
Write a function that checks if two non-negative integers make an "interlocking binary pair".
Interlock ?

numbers can be interlocked if their binary representations have no 1's in the same place
comparisons are made by bit position, starting from right to left (see the examples below)
when representations are of different lengths, the unmatched left-most bits are ignored

Examples

a = 9, b = 4
Stacking representations shows how they can interlock.
 9    1001
 4     100

Here, no 1's share any position, so the function returns true.

a = 3, b = 6
These representations do not interlock.
 3      11
 6     110

Finding they both have a 1 in the same position, the function returns false.


Input
Two non-negative integers.
Output
Boolean true or false whether or not these integers are interlockable.
Enjoy!
...and please consider one of the following kata to solve next:

Is Sator Square?
Four Letter Words ~ Mutations
Four Letter Words ~ Anagrams
Crossword Puzzle! (2x2)
Setting Places for the Dead
Playing With Toy Blocks ~ Can you build a 4x4 square?

Nota Bene:
This kata is accepting of translations for any languages other than: CoffeeScript, TypeScript, Go, Groovy, Julia, Dart, and Kotlin; as those are currently underway by the author. Thank you!
========================================
URL: https://www.codewars.com/kata/628ba76a85a2d500649da696
–ó–∞–¥–∞—á–∞:
Create a function mul37 that returns the value of num represented in the form 3 * a + 7 * b
e.g.    9 would return 3 * 3 + 7 * 0
e.g.    10 would return 3 * 1 + 7 * 1
e.g.    100 would return 3 * 3 + 7 * 13
e.g.    999 would return  3 * 4 + 7 * 141
Note:

a and b are integers ranging from 0 to 1000 inclusive.

The sum of a and b is the smallest possible.

All inputs are vaild* and 0 =< num =< 1000.


*inputs won't be in {1, 2, 4, 5, 8, 11}
========================================
URL: https://www.codewars.com/kata/626466bdd13ea6923d0663ea
–ó–∞–¥–∞—á–∞:
Create a function mul37 that returns the value of num represented in the form 3 * a + 7 * b
e.g.    9 would return 3 * 3 + 7 * 0
e.g.    10 would return 3 * 1 + 7 * 1
e.g.    100 would return 3 * 3 + 7 * 13
e.g.    999 would return  3 * 4 + 7 * 141
Note:

a and b are integers ranging from 0 to 1000 inclusive.

The sum of a and b is the smallest possible.

All inputs are vaild* and 0 =< num =< 1000.


*inputs won't be in {1, 2, 4, 5, 8, 11}
========================================
URL: https://www.codewars.com/kata/6277a3342c28814667504250
–ó–∞–¥–∞—á–∞:
Create a function mul37 that returns the value of num represented in the form 3 * a + 7 * b
e.g.    9 would return 3 * 3 + 7 * 0
e.g.    10 would return 3 * 1 + 7 * 1
e.g.    100 would return 3 * 3 + 7 * 13
e.g.    999 would return  3 * 4 + 7 * 141
Note:

a and b are integers ranging from 0 to 1000 inclusive.

The sum of a and b is the smallest possible.

All inputs are vaild* and 0 =< num =< 1000.


*inputs won't be in {1, 2, 4, 5, 8, 11}
========================================
URL: https://www.codewars.com/kata/625ea5c1a071210065c923af
–ó–∞–¥–∞—á–∞:
Create a function mul37 that returns the value of num represented in the form 3 * a + 7 * b
e.g.    9 would return 3 * 3 + 7 * 0
e.g.    10 would return 3 * 1 + 7 * 1
e.g.    100 would return 3 * 3 + 7 * 13
e.g.    999 would return  3 * 4 + 7 * 141
Note:

a and b are integers ranging from 0 to 1000 inclusive.

The sum of a and b is the smallest possible.

All inputs are vaild* and 0 =< num =< 1000.


*inputs won't be in {1, 2, 4, 5, 8, 11}
========================================
URL: https://www.codewars.com/kata/62524390983b35002c8ff1e5
–ó–∞–¥–∞—á–∞:
Create a function mul37 that returns the value of num represented in the form 3 * a + 7 * b
e.g.    9 would return 3 * 3 + 7 * 0
e.g.    10 would return 3 * 1 + 7 * 1
e.g.    100 would return 3 * 3 + 7 * 13
e.g.    999 would return  3 * 4 + 7 * 141
Note:

a and b are integers ranging from 0 to 1000 inclusive.

The sum of a and b is the smallest possible.

All inputs are vaild* and 0 =< num =< 1000.


*inputs won't be in {1, 2, 4, 5, 8, 11}
========================================
URL: https://www.codewars.com/kata/624e0a4c3e1d7b0031588666
–ó–∞–¥–∞—á–∞:
You have an 8-wind compass, like this:

You receive the direction you are facing (one of the 8 directions: N, NE, E, SE, S, SW, W, NW) and a certain degree to turn (a multiple of 45, between -1080 and 1080); positive means clockwise, and negative means counter-clockwise.
Return the direction you will face after the turn.
Examples
"S",  180  -->  "N"
"SE", -45  -->  "E"
"W",  495  -->  "NE"

S  180  ->  N
SE -45  ->  E
W  495  ->  NE


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/61e173ccbc916700267ef2ae
–ó–∞–¥–∞—á–∞:
You have an 8-wind compass, like this:

You receive the direction you are facing (one of the 8 directions: N, NE, E, SE, S, SW, W, NW) and a certain degree to turn (a multiple of 45, between -1080 and 1080); positive means clockwise, and negative means counter-clockwise.
Return the direction you will face after the turn.
Examples
"S",  180  -->  "N"
"SE", -45  -->  "E"
"W",  495  -->  "NE"

S  180  ->  N
SE -45  ->  E
W  495  ->  NE


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/61efc02e4fd88600343b5c58
–ó–∞–¥–∞—á–∞:
You have an 8-wind compass, like this:

You receive the direction you are facing (one of the 8 directions: N, NE, E, SE, S, SW, W, NW) and a certain degree to turn (a multiple of 45, between -1080 and 1080); positive means clockwise, and negative means counter-clockwise.
Return the direction you will face after the turn.
Examples
"S",  180  -->  "N"
"SE", -45  -->  "E"
"W",  495  -->  "NE"

S  180  ->  N
SE -45  ->  E
W  495  ->  NE


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/61c78b57ee4be50035d28d42
–ó–∞–¥–∞—á–∞:
You have an 8-wind compass, like this:

You receive the direction you are facing (one of the 8 directions: N, NE, E, SE, S, SW, W, NW) and a certain degree to turn (a multiple of 45, between -1080 and 1080); positive means clockwise, and negative means counter-clockwise.
Return the direction you will face after the turn.
Examples
"S",  180  -->  "N"
"SE", -45  -->  "E"
"W",  495  -->  "NE"

S  180  ->  N
SE -45  ->  E
W  495  ->  NE


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/61a8c3a9e5a7b9004a48ccc2
–ó–∞–¥–∞—á–∞:
You have an 8-wind compass, like this:

You receive the direction you are facing (one of the 8 directions: N, NE, E, SE, S, SW, W, NW) and a certain degree to turn (a multiple of 45, between -1080 and 1080); positive means clockwise, and negative means counter-clockwise.
Return the direction you will face after the turn.
Examples
"S",  180  -->  "N"
"SE", -45  -->  "E"
"W",  495  -->  "NE"

S  180  ->  N
SE -45  ->  E
W  495  ->  NE


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/619f200fd0ff91000eaf4a08
–ó–∞–¥–∞—á–∞:
Fischer random chess, also known as Chess960, is a variant of chess, invented by Bobby Fischer on June 19, 1996.
The rules are the same as regular chess, but the starting position is randomized according to the randomization rules (see below). Note that prior knowledge of chess is not required to solve this kata, however some basic knowledge like piece distribution, initial setup, ranks vs files etc. is assumed. Here is a quick refresher.
Randomization Rules

The 2nd and 7th rank stay the same as in a normal game, filled with pawns.
All the remaining white pieces must be on the 1st rank, and black pieces on the 8th rank.
The two bishops must start on differently colored squares.
The rooks must be located on either side of the king; in other words, the king must be placed on a square between the two rooks.
The queen and knights can be located on any remaining square in the rank.

Both White and Black share the same starting position, drawn at random, in accordance to these rules.
Side note: in accordance with these rules, there are a total of 960 possible starting positions, hence the name of the variant.
Representation of position
For the purpose of this kata:

Rooks are abbreviated as R
Knights are abbreviated as N
Bishops are abbreviated as B
Queen is abbreviated as Q
King is abbreviated as K

Since black mirrors white's setup, it is enough to list White's position to fully describe the position. Furthermore, only the first rank needs to be defined, as the second rank is filled with pawns regardless of situation.
A starting position is represented by an 8 character long String. Each character in the String denotes a specific piece, in order from left-to-right.
An example starting position would be:
 RNBQKBNR
Your task
Given a string representation, determine whether it represents a valid Chess960 starting position. Note that the input is guaranteed to represent one king, one queen, two rooks, two bishops and two knights, in some order. You do not have to validate for missing pieces or extra pieces.
========================================
URL: https://www.codewars.com/kata/614dfc4ce78d31004a9c1276
–ó–∞–¥–∞—á–∞:
Fischer random chess, also known as Chess960, is a variant of chess, invented by Bobby Fischer on June 19, 1996.
The rules are the same as regular chess, but the starting position is randomized according to the randomization rules (see below). Note that prior knowledge of chess is not required to solve this kata, however some basic knowledge like piece distribution, initial setup, ranks vs files etc. is assumed. Here is a quick refresher.
Randomization Rules

The 2nd and 7th rank stay the same as in a normal game, filled with pawns.
All the remaining white pieces must be on the 1st rank, and black pieces on the 8th rank.
The two bishops must start on differently colored squares.
The rooks must be located on either side of the king; in other words, the king must be placed on a square between the two rooks.
The queen and knights can be located on any remaining square in the rank.

Both White and Black share the same starting position, drawn at random, in accordance to these rules.
Side note: in accordance with these rules, there are a total of 960 possible starting positions, hence the name of the variant.
Representation of position
For the purpose of this kata:

Rooks are abbreviated as R
Knights are abbreviated as N
Bishops are abbreviated as B
Queen is abbreviated as Q
King is abbreviated as K

Since black mirrors white's setup, it is enough to list White's position to fully describe the position. Furthermore, only the first rank needs to be defined, as the second rank is filled with pawns regardless of situation.
A starting position is represented by an 8 character long String. Each character in the String denotes a specific piece, in order from left-to-right.
An example starting position would be:
 RNBQKBNR
Your task
Given a string representation, determine whether it represents a valid Chess960 starting position. Note that the input is guaranteed to represent one king, one queen, two rooks, two bishops and two knights, in some order. You do not have to validate for missing pieces or extra pieces.
========================================
URL: https://www.codewars.com/kata/61488fde47472d000827a51d
–ó–∞–¥–∞—á–∞:
Fischer random chess, also known as Chess960, is a variant of chess, invented by Bobby Fischer on June 19, 1996.
The rules are the same as regular chess, but the starting position is randomized according to the randomization rules (see below). Note that prior knowledge of chess is not required to solve this kata, however some basic knowledge like piece distribution, initial setup, ranks vs files etc. is assumed. Here is a quick refresher.
Randomization Rules

The 2nd and 7th rank stay the same as in a normal game, filled with pawns.
All the remaining white pieces must be on the 1st rank, and black pieces on the 8th rank.
The two bishops must start on differently colored squares.
The rooks must be located on either side of the king; in other words, the king must be placed on a square between the two rooks.
The queen and knights can be located on any remaining square in the rank.

Both White and Black share the same starting position, drawn at random, in accordance to these rules.
Side note: in accordance with these rules, there are a total of 960 possible starting positions, hence the name of the variant.
Representation of position
For the purpose of this kata:

Rooks are abbreviated as R
Knights are abbreviated as N
Bishops are abbreviated as B
Queen is abbreviated as Q
King is abbreviated as K

Since black mirrors white's setup, it is enough to list White's position to fully describe the position. Furthermore, only the first rank needs to be defined, as the second rank is filled with pawns regardless of situation.
A starting position is represented by an 8 character long String. Each character in the String denotes a specific piece, in order from left-to-right.
An example starting position would be:
 RNBQKBNR
Your task
Given a string representation, determine whether it represents a valid Chess960 starting position. Note that the input is guaranteed to represent one king, one queen, two rooks, two bishops and two knights, in some order. You do not have to validate for missing pieces or extra pieces.
========================================
URL: https://www.codewars.com/kata/6167e70fc9bd9b00565ffa4e
–ó–∞–¥–∞—á–∞:
Fischer random chess, also known as Chess960, is a variant of chess, invented by Bobby Fischer on June 19, 1996.
The rules are the same as regular chess, but the starting position is randomized according to the randomization rules (see below). Note that prior knowledge of chess is not required to solve this kata, however some basic knowledge like piece distribution, initial setup, ranks vs files etc. is assumed. Here is a quick refresher.
Randomization Rules

The 2nd and 7th rank stay the same as in a normal game, filled with pawns.
All the remaining white pieces must be on the 1st rank, and black pieces on the 8th rank.
The two bishops must start on differently colored squares.
The rooks must be located on either side of the king; in other words, the king must be placed on a square between the two rooks.
The queen and knights can be located on any remaining square in the rank.

Both White and Black share the same starting position, drawn at random, in accordance to these rules.
Side note: in accordance with these rules, there are a total of 960 possible starting positions, hence the name of the variant.
Representation of position
For the purpose of this kata:

Rooks are abbreviated as R
Knights are abbreviated as N
Bishops are abbreviated as B
Queen is abbreviated as Q
King is abbreviated as K

Since black mirrors white's setup, it is enough to list White's position to fully describe the position. Furthermore, only the first rank needs to be defined, as the second rank is filled with pawns regardless of situation.
A starting position is represented by an 8 character long String. Each character in the String denotes a specific piece, in order from left-to-right.
An example starting position would be:
 RNBQKBNR
Your task
Given a string representation, determine whether it represents a valid Chess960 starting position. Note that the input is guaranteed to represent one king, one queen, two rooks, two bishops and two knights, in some order. You do not have to validate for missing pieces or extra pieces.
========================================
URL: https://www.codewars.com/kata/617bfa617cdd1f001a5cadc9
–ó–∞–¥–∞—á–∞:
Fischer random chess, also known as Chess960, is a variant of chess, invented by Bobby Fischer on June 19, 1996.
The rules are the same as regular chess, but the starting position is randomized according to the randomization rules (see below). Note that prior knowledge of chess is not required to solve this kata, however some basic knowledge like piece distribution, initial setup, ranks vs files etc. is assumed. Here is a quick refresher.
Randomization Rules

The 2nd and 7th rank stay the same as in a normal game, filled with pawns.
All the remaining white pieces must be on the 1st rank, and black pieces on the 8th rank.
The two bishops must start on differently colored squares.
The rooks must be located on either side of the king; in other words, the king must be placed on a square between the two rooks.
The queen and knights can be located on any remaining square in the rank.

Both White and Black share the same starting position, drawn at random, in accordance to these rules.
Side note: in accordance with these rules, there are a total of 960 possible starting positions, hence the name of the variant.
Representation of position
For the purpose of this kata:

Rooks are abbreviated as R
Knights are abbreviated as N
Bishops are abbreviated as B
Queen is abbreviated as Q
King is abbreviated as K

Since black mirrors white's setup, it is enough to list White's position to fully describe the position. Furthermore, only the first rank needs to be defined, as the second rank is filled with pawns regardless of situation.
A starting position is represented by an 8 character long String. Each character in the String denotes a specific piece, in order from left-to-right.
An example starting position would be:
 RNBQKBNR
Your task
Given a string representation, determine whether it represents a valid Chess960 starting position. Note that the input is guaranteed to represent one king, one queen, two rooks, two bishops and two knights, in some order. You do not have to validate for missing pieces or extra pieces.
========================================
URL: https://www.codewars.com/kata/61432694beeca7000f37bb57
–ó–∞–¥–∞—á–∞:
The 2 main sequences in Mathematics are Arithmetic Progression and Geometric Progression. Those are the sequences you will be working with in this kata.
Introduction
A sequence of numbers is called an Arithmetic Progression if the difference between any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by adding a fixed number to the previous number in the series. This fixed number is called the common difference.
A sequence of numbers is called a Geometric Progression if the ratio of any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by multiplying a fixed number to the previous number in the series. This fixed number is called the common ratio.
Rules
Given an array of integers that follow either series, you have to determine the series and return accordingly :
"0" if it is an AP
"1" if it is a GP
"-1" if it doesn't follow any of the above sequences
"2" if it is both an AP and GP

For Example,
  series_array = [2, 5, 8, 11, 14]   #should return 0
  series_array = [1, 2, 4, 8, 16]    #should return 1
  series_array = [1, 2, 1, 3, 4, 5]  #should return -1
  series_array = [1, 1, 1, 1, 1]     #should return 2
  series_array = [0, 0, 0, 0, 0]     #should return 0

The main challenge is identifying the differences between the 2 sequences and to find a way of determining each sequence
If the series has all 0's, then 0 should be returned as it is not accepted as a 
term GP
NOTE : Only APs and GPs are considered in this question. Other series like Harmonic Progression are not considered and assume that the array will have atleast one element
========================================
URL: https://www.codewars.com/kata/6129095b201d6b000e5a33f0
–ó–∞–¥–∞—á–∞:
The 2 main sequences in Mathematics are Arithmetic Progression and Geometric Progression. Those are the sequences you will be working with in this kata.
Introduction
A sequence of numbers is called an Arithmetic Progression if the difference between any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by adding a fixed number to the previous number in the series. This fixed number is called the common difference.
A sequence of numbers is called a Geometric Progression if the ratio of any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by multiplying a fixed number to the previous number in the series. This fixed number is called the common ratio.
Rules
Given an array of integers that follow either series, you have to determine the series and return accordingly :
"0" if it is an AP
"1" if it is a GP
"-1" if it doesn't follow any of the above sequences
"2" if it is both an AP and GP

For Example,
  series_array = [2, 5, 8, 11, 14]   #should return 0
  series_array = [1, 2, 4, 8, 16]    #should return 1
  series_array = [1, 2, 1, 3, 4, 5]  #should return -1
  series_array = [1, 1, 1, 1, 1]     #should return 2
  series_array = [0, 0, 0, 0, 0]     #should return 0

The main challenge is identifying the differences between the 2 sequences and to find a way of determining each sequence
If the series has all 0's, then 0 should be returned as it is not accepted as a 
term GP
NOTE : Only APs and GPs are considered in this question. Other series like Harmonic Progression are not considered and assume that the array will have atleast one element
========================================
URL: https://www.codewars.com/kata/6113c2dc3069b1001b8fdd05
–ó–∞–¥–∞—á–∞:
The 2 main sequences in Mathematics are Arithmetic Progression and Geometric Progression. Those are the sequences you will be working with in this kata.
Introduction
A sequence of numbers is called an Arithmetic Progression if the difference between any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by adding a fixed number to the previous number in the series. This fixed number is called the common difference.
A sequence of numbers is called a Geometric Progression if the ratio of any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by multiplying a fixed number to the previous number in the series. This fixed number is called the common ratio.
Rules
Given an array of integers that follow either series, you have to determine the series and return accordingly :
"0" if it is an AP
"1" if it is a GP
"-1" if it doesn't follow any of the above sequences
"2" if it is both an AP and GP

For Example,
  series_array = [2, 5, 8, 11, 14]   #should return 0
  series_array = [1, 2, 4, 8, 16]    #should return 1
  series_array = [1, 2, 1, 3, 4, 5]  #should return -1
  series_array = [1, 1, 1, 1, 1]     #should return 2
  series_array = [0, 0, 0, 0, 0]     #should return 0

The main challenge is identifying the differences between the 2 sequences and to find a way of determining each sequence
If the series has all 0's, then 0 should be returned as it is not accepted as a 
term GP
NOTE : Only APs and GPs are considered in this question. Other series like Harmonic Progression are not considered and assume that the array will have atleast one element
========================================
URL: https://www.codewars.com/kata/61123a6f2446320021db987d
–ó–∞–¥–∞—á–∞:
The 2 main sequences in Mathematics are Arithmetic Progression and Geometric Progression. Those are the sequences you will be working with in this kata.
Introduction
A sequence of numbers is called an Arithmetic Progression if the difference between any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by adding a fixed number to the previous number in the series. This fixed number is called the common difference.
A sequence of numbers is called a Geometric Progression if the ratio of any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by multiplying a fixed number to the previous number in the series. This fixed number is called the common ratio.
Rules
Given an array of integers that follow either series, you have to determine the series and return accordingly :
"0" if it is an AP
"1" if it is a GP
"-1" if it doesn't follow any of the above sequences
"2" if it is both an AP and GP

For Example,
  series_array = [2, 5, 8, 11, 14]   #should return 0
  series_array = [1, 2, 4, 8, 16]    #should return 1
  series_array = [1, 2, 1, 3, 4, 5]  #should return -1
  series_array = [1, 1, 1, 1, 1]     #should return 2
  series_array = [0, 0, 0, 0, 0]     #should return 0

The main challenge is identifying the differences between the 2 sequences and to find a way of determining each sequence
If the series has all 0's, then 0 should be returned as it is not accepted as a 
term GP
NOTE : Only APs and GPs are considered in this question. Other series like Harmonic Progression are not considered and assume that the array will have atleast one element
========================================
URL: https://www.codewars.com/kata/610159919347db0019cabddc
–ó–∞–¥–∞—á–∞:
The 2 main sequences in Mathematics are Arithmetic Progression and Geometric Progression. Those are the sequences you will be working with in this kata.
Introduction
A sequence of numbers is called an Arithmetic Progression if the difference between any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by adding a fixed number to the previous number in the series. This fixed number is called the common difference.
A sequence of numbers is called a Geometric Progression if the ratio of any two consecutive terms is always same. In simple terms, it means that next number in the series is calculated by multiplying a fixed number to the previous number in the series. This fixed number is called the common ratio.
Rules
Given an array of integers that follow either series, you have to determine the series and return accordingly :
"0" if it is an AP
"1" if it is a GP
"-1" if it doesn't follow any of the above sequences
"2" if it is both an AP and GP

For Example,
  series_array = [2, 5, 8, 11, 14]   #should return 0
  series_array = [1, 2, 4, 8, 16]    #should return 1
  series_array = [1, 2, 1, 3, 4, 5]  #should return -1
  series_array = [1, 1, 1, 1, 1]     #should return 2
  series_array = [0, 0, 0, 0, 0]     #should return 0

The main challenge is identifying the differences between the 2 sequences and to find a way of determining each sequence
If the series has all 0's, then 0 should be returned as it is not accepted as a 
term GP
NOTE : Only APs and GPs are considered in this question. Other series like Harmonic Progression are not considered and assume that the array will have atleast one element
========================================
URL: https://www.codewars.com/kata/60edafd71dad1800563cf933
–ó–∞–¥–∞—á–∞:
In Python, == tests for equality and is tests for identity. Two strings that are equal may also be identical, but this is not guaranteed, but rather an implementation detail. Given a computed expression, ensure that it is identical to the corresponding equal string literal by completing the make_identical function. See test case for clarity. (Note, this is easy if you know the concept.)
========================================
URL: https://www.codewars.com/kata/60dda5a66c4cf90026256b75
–ó–∞–¥–∞—á–∞:
In Python, == tests for equality and is tests for identity. Two strings that are equal may also be identical, but this is not guaranteed, but rather an implementation detail. Given a computed expression, ensure that it is identical to the corresponding equal string literal by completing the make_identical function. See test case for clarity. (Note, this is easy if you know the concept.)
========================================
URL: https://www.codewars.com/kata/60d20fe1820f1b004188ceed
–ó–∞–¥–∞—á–∞:
In Python, == tests for equality and is tests for identity. Two strings that are equal may also be identical, but this is not guaranteed, but rather an implementation detail. Given a computed expression, ensure that it is identical to the corresponding equal string literal by completing the make_identical function. See test case for clarity. (Note, this is easy if you know the concept.)
========================================
URL: https://www.codewars.com/kata/60c47b07f24d000019f722a2
–ó–∞–¥–∞—á–∞:
In Python, == tests for equality and is tests for identity. Two strings that are equal may also be identical, but this is not guaranteed, but rather an implementation detail. Given a computed expression, ensure that it is identical to the corresponding equal string literal by completing the make_identical function. See test case for clarity. (Note, this is easy if you know the concept.)
========================================
URL: https://www.codewars.com/kata/60a94f1443f8730025d1744b
–ó–∞–¥–∞—á–∞:
Problem
Complete the function that takes an odd integer (0 < n < 1000000) which is the difference between two consecutive perfect squares, and return these squares as a string in the format "bigger-smaller"
Examples
9  -->  "25-16"
5  -->  "9-4"
7  -->  "16-9"
========================================
URL: https://www.codewars.com/kata/609eee71109f860006c377d1
–ó–∞–¥–∞—á–∞:
Problem
Complete the function that takes an odd integer (0 < n < 1000000) which is the difference between two consecutive perfect squares, and return these squares as a string in the format "bigger-smaller"
Examples
9  -->  "25-16"
5  -->  "9-4"
7  -->  "16-9"
========================================
URL: https://www.codewars.com/kata/60908bc1d5811f0025474291
–ó–∞–¥–∞—á–∞:
Problem
Complete the function that takes an odd integer (0 < n < 1000000) which is the difference between two consecutive perfect squares, and return these squares as a string in the format "bigger-smaller"
Examples
9  -->  "25-16"
5  -->  "9-4"
7  -->  "16-9"
========================================
URL: https://www.codewars.com/kata/609d17f9838b2c0036b10e89
–ó–∞–¥–∞—á–∞:
Problem
Complete the function that takes an odd integer (0 < n < 1000000) which is the difference between two consecutive perfect squares, and return these squares as a string in the format "bigger-smaller"
Examples
9  -->  "25-16"
5  -->  "9-4"
7  -->  "16-9"
========================================
URL: https://www.codewars.com/kata/6097a9f20d32c2000d0bdb98
–ó–∞–¥–∞—á–∞:
Problem
Complete the function that takes an odd integer (0 < n < 1000000) which is the difference between two consecutive perfect squares, and return these squares as a string in the format "bigger-smaller"
Examples
9  -->  "25-16"
5  -->  "9-4"
7  -->  "16-9"
========================================
URL: https://www.codewars.com/kata/6089c7992df556001253ba7d
–ó–∞–¥–∞—á–∞:
Write a function which maps a function over the lists in a list:
def grid_map inp,&block
  # applies the &block to all nested elements

gridMap :: (a -> b) -> [[a]] -> [[b]]

def grid_map(inp, op)
    # which performs op(element) for all elements of inp

function gridMap(fn,xss) { return [[]]; }

public static <T,R> R[][] gridMap(Function<T,R> fn, T[][] list)

Example 1:
x = [[1,2,3],
     [4,5,6]]
     
grid_map(x) { |n| n + 1 }
#-- returns [[2,3,4],[5,6,7]]

grid_map(x) { |n| n ** 2 }
#-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
gridMap (+1) x
-- returns [[2,3,4],[5,6,7]]

gridMap (^2) x
-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
grid_map(x, lambda x: x + 1)
-- returns [[2,3,4],[5,6,7]]

grid_map(x, lambda x: x ** 2)
-- returns [[1,4,9],[16,25,36]]

const xss = [ [1,2,3]
            , [4,5,6]
            ];

gridMap( x => x+1 , xss )  =>  [[2,3,4],[5,6,7]]
gridMap( x => x**2 , xss )  =>  [[1,4,9],[16,25,36]]

int[][] x = {{1,2,3},
             {4,5,6}};

gridMap(e -> e + 1, x); // {{2,3,4},{5,6,7}}
gridMap(e -> e * e, x); // {{1,4,9},{16,25,36}}

Example 2
x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
     
grid_map(x) { |c| c.upcase }
#-- returns [["H", "E", "L", "L", "O"], ["W", "O", "R", "L", "D"]]

import Data.Char
x = ["hEllO", "wOrLd"]

gridMap toUpper x
-- returns ["HELLO, WORLD"]

x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
grid_map(x, lambda x: x.upper())
-- returns [['H', 'E', 'L', 'L', 'O'], ['W', 'O', 'R', 'L', 'D']]

const xss = [['h','E','l','l','O'],['w','O','r','L','d']];

gridMap( x => x.toUpperCase() , xss )  =>  [['H','E','L','L','O'],['W','O','R','L','D']]

char[][] x = {{'h','E','l','l','O'},{'w','O','r','L','d'}};

gridMap(e -> Character.toUpperCase(e), x); // {{'H','E','L','L','O'},{'W','O','R','L','D'}}
========================================
URL: https://www.codewars.com/kata/6076d4edc7bf5d0041b31dcf
–ó–∞–¥–∞—á–∞:
Write a function which maps a function over the lists in a list:
def grid_map inp,&block
  # applies the &block to all nested elements

gridMap :: (a -> b) -> [[a]] -> [[b]]

def grid_map(inp, op)
    # which performs op(element) for all elements of inp

function gridMap(fn,xss) { return [[]]; }

public static <T,R> R[][] gridMap(Function<T,R> fn, T[][] list)

Example 1:
x = [[1,2,3],
     [4,5,6]]
     
grid_map(x) { |n| n + 1 }
#-- returns [[2,3,4],[5,6,7]]

grid_map(x) { |n| n ** 2 }
#-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
gridMap (+1) x
-- returns [[2,3,4],[5,6,7]]

gridMap (^2) x
-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
grid_map(x, lambda x: x + 1)
-- returns [[2,3,4],[5,6,7]]

grid_map(x, lambda x: x ** 2)
-- returns [[1,4,9],[16,25,36]]

const xss = [ [1,2,3]
            , [4,5,6]
            ];

gridMap( x => x+1 , xss )  =>  [[2,3,4],[5,6,7]]
gridMap( x => x**2 , xss )  =>  [[1,4,9],[16,25,36]]

int[][] x = {{1,2,3},
             {4,5,6}};

gridMap(e -> e + 1, x); // {{2,3,4},{5,6,7}}
gridMap(e -> e * e, x); // {{1,4,9},{16,25,36}}

Example 2
x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
     
grid_map(x) { |c| c.upcase }
#-- returns [["H", "E", "L", "L", "O"], ["W", "O", "R", "L", "D"]]

import Data.Char
x = ["hEllO", "wOrLd"]

gridMap toUpper x
-- returns ["HELLO, WORLD"]

x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
grid_map(x, lambda x: x.upper())
-- returns [['H', 'E', 'L', 'L', 'O'], ['W', 'O', 'R', 'L', 'D']]

const xss = [['h','E','l','l','O'],['w','O','r','L','d']];

gridMap( x => x.toUpperCase() , xss )  =>  [['H','E','L','L','O'],['W','O','R','L','D']]

char[][] x = {{'h','E','l','l','O'},{'w','O','r','L','d'}};

gridMap(e -> Character.toUpperCase(e), x); // {{'H','E','L','L','O'},{'W','O','R','L','D'}}
========================================
URL: https://www.codewars.com/kata/6071ef9cbe6ec400228d9531
–ó–∞–¥–∞—á–∞:
Write a function which maps a function over the lists in a list:
def grid_map inp,&block
  # applies the &block to all nested elements

gridMap :: (a -> b) -> [[a]] -> [[b]]

def grid_map(inp, op)
    # which performs op(element) for all elements of inp

function gridMap(fn,xss) { return [[]]; }

public static <T,R> R[][] gridMap(Function<T,R> fn, T[][] list)

Example 1:
x = [[1,2,3],
     [4,5,6]]
     
grid_map(x) { |n| n + 1 }
#-- returns [[2,3,4],[5,6,7]]

grid_map(x) { |n| n ** 2 }
#-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
gridMap (+1) x
-- returns [[2,3,4],[5,6,7]]

gridMap (^2) x
-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
grid_map(x, lambda x: x + 1)
-- returns [[2,3,4],[5,6,7]]

grid_map(x, lambda x: x ** 2)
-- returns [[1,4,9],[16,25,36]]

const xss = [ [1,2,3]
            , [4,5,6]
            ];

gridMap( x => x+1 , xss )  =>  [[2,3,4],[5,6,7]]
gridMap( x => x**2 , xss )  =>  [[1,4,9],[16,25,36]]

int[][] x = {{1,2,3},
             {4,5,6}};

gridMap(e -> e + 1, x); // {{2,3,4},{5,6,7}}
gridMap(e -> e * e, x); // {{1,4,9},{16,25,36}}

Example 2
x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
     
grid_map(x) { |c| c.upcase }
#-- returns [["H", "E", "L", "L", "O"], ["W", "O", "R", "L", "D"]]

import Data.Char
x = ["hEllO", "wOrLd"]

gridMap toUpper x
-- returns ["HELLO, WORLD"]

x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
grid_map(x, lambda x: x.upper())
-- returns [['H', 'E', 'L', 'L', 'O'], ['W', 'O', 'R', 'L', 'D']]

const xss = [['h','E','l','l','O'],['w','O','r','L','d']];

gridMap( x => x.toUpperCase() , xss )  =>  [['H','E','L','L','O'],['W','O','R','L','D']]

char[][] x = {{'h','E','l','l','O'},{'w','O','r','L','d'}};

gridMap(e -> Character.toUpperCase(e), x); // {{'H','E','L','L','O'},{'W','O','R','L','D'}}
========================================
URL: https://www.codewars.com/kata/606efc6a9409580033837dfb
–ó–∞–¥–∞—á–∞:
Write a function which maps a function over the lists in a list:
def grid_map inp,&block
  # applies the &block to all nested elements

gridMap :: (a -> b) -> [[a]] -> [[b]]

def grid_map(inp, op)
    # which performs op(element) for all elements of inp

function gridMap(fn,xss) { return [[]]; }

public static <T,R> R[][] gridMap(Function<T,R> fn, T[][] list)

Example 1:
x = [[1,2,3],
     [4,5,6]]
     
grid_map(x) { |n| n + 1 }
#-- returns [[2,3,4],[5,6,7]]

grid_map(x) { |n| n ** 2 }
#-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
gridMap (+1) x
-- returns [[2,3,4],[5,6,7]]

gridMap (^2) x
-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
grid_map(x, lambda x: x + 1)
-- returns [[2,3,4],[5,6,7]]

grid_map(x, lambda x: x ** 2)
-- returns [[1,4,9],[16,25,36]]

const xss = [ [1,2,3]
            , [4,5,6]
            ];

gridMap( x => x+1 , xss )  =>  [[2,3,4],[5,6,7]]
gridMap( x => x**2 , xss )  =>  [[1,4,9],[16,25,36]]

int[][] x = {{1,2,3},
             {4,5,6}};

gridMap(e -> e + 1, x); // {{2,3,4},{5,6,7}}
gridMap(e -> e * e, x); // {{1,4,9},{16,25,36}}

Example 2
x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
     
grid_map(x) { |c| c.upcase }
#-- returns [["H", "E", "L", "L", "O"], ["W", "O", "R", "L", "D"]]

import Data.Char
x = ["hEllO", "wOrLd"]

gridMap toUpper x
-- returns ["HELLO, WORLD"]

x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
grid_map(x, lambda x: x.upper())
-- returns [['H', 'E', 'L', 'L', 'O'], ['W', 'O', 'R', 'L', 'D']]

const xss = [['h','E','l','l','O'],['w','O','r','L','d']];

gridMap( x => x.toUpperCase() , xss )  =>  [['H','E','L','L','O'],['W','O','R','L','D']]

char[][] x = {{'h','E','l','l','O'},{'w','O','r','L','d'}};

gridMap(e -> Character.toUpperCase(e), x); // {{'H','E','L','L','O'},{'W','O','R','L','D'}}
========================================
URL: https://www.codewars.com/kata/606b43f4adea6e00425dff42
–ó–∞–¥–∞—á–∞:
Write a function which maps a function over the lists in a list:
def grid_map inp,&block
  # applies the &block to all nested elements

gridMap :: (a -> b) -> [[a]] -> [[b]]

def grid_map(inp, op)
    # which performs op(element) for all elements of inp

function gridMap(fn,xss) { return [[]]; }

public static <T,R> R[][] gridMap(Function<T,R> fn, T[][] list)

Example 1:
x = [[1,2,3],
     [4,5,6]]
     
grid_map(x) { |n| n + 1 }
#-- returns [[2,3,4],[5,6,7]]

grid_map(x) { |n| n ** 2 }
#-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
gridMap (+1) x
-- returns [[2,3,4],[5,6,7]]

gridMap (^2) x
-- returns [[1,4,9],[16,25,36]]

x = [[1,2,3],
     [4,5,6]]
     
grid_map(x, lambda x: x + 1)
-- returns [[2,3,4],[5,6,7]]

grid_map(x, lambda x: x ** 2)
-- returns [[1,4,9],[16,25,36]]

const xss = [ [1,2,3]
            , [4,5,6]
            ];

gridMap( x => x+1 , xss )  =>  [[2,3,4],[5,6,7]]
gridMap( x => x**2 , xss )  =>  [[1,4,9],[16,25,36]]

int[][] x = {{1,2,3},
             {4,5,6}};

gridMap(e -> e + 1, x); // {{2,3,4},{5,6,7}}
gridMap(e -> e * e, x); // {{1,4,9},{16,25,36}}

Example 2
x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
     
grid_map(x) { |c| c.upcase }
#-- returns [["H", "E", "L", "L", "O"], ["W", "O", "R", "L", "D"]]

import Data.Char
x = ["hEllO", "wOrLd"]

gridMap toUpper x
-- returns ["HELLO, WORLD"]

x = [['h', 'E', 'l', 'l', 'O'], ['w', 'O', 'r', 'L', 'd']]
grid_map(x, lambda x: x.upper())
-- returns [['H', 'E', 'L', 'L', 'O'], ['W', 'O', 'R', 'L', 'D']]

const xss = [['h','E','l','l','O'],['w','O','r','L','d']];

gridMap( x => x.toUpperCase() , xss )  =>  [['H','E','L','L','O'],['W','O','R','L','D']]

char[][] x = {{'h','E','l','l','O'},{'w','O','r','L','d'}};

gridMap(e -> Character.toUpperCase(e), x); // {{'H','E','L','L','O'},{'W','O','R','L','D'}}
========================================
URL: https://www.codewars.com/kata/605f5d33f38ca800322cb18f
–ó–∞–¥–∞—á–∞:
In a certain kingdom, strange mathematics is taught at school. Its main difference from ordinary mathematics is that the numbers in it are not ordered in ascending order, but lexicographically, as in a dictionary (first by the first digit, then, if the first digit is equal, by the second, and so on). In addition, we do not consider an infinite set of natural numbers, but only the first n numbers. 
So, for example, if n = 11, then the numbers in strange mathematics are ordered as follows:
1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9.
Help your students to learn this science: write a function that receives two integer numbers: n (total amount of numbers in strange mathematics) and k (number from sequence) and returns the location of a given number k in the order defined in strange mathematics. 
For example, if n = 11 and k = 2, the function should return 4 as the answer.
Input: 1 <= n <= 100 000 , 1 <= k <= n.
Output: position of the number k in sequence of the first n natural numbers in lexicographic order. Numbering starts with 1.
Examples:
strange_math(11, 2) == 4
strange_math(15, 5) == 11
strange_math(15, 15) == 7

strangeMath(11, 2) === 4
strangeMath(15, 5) === 11
strangeMath(15, 15) === 7
========================================
URL: https://www.codewars.com/kata/6066ae080168ff0032c4107a
–ó–∞–¥–∞—á–∞:
In a certain kingdom, strange mathematics is taught at school. Its main difference from ordinary mathematics is that the numbers in it are not ordered in ascending order, but lexicographically, as in a dictionary (first by the first digit, then, if the first digit is equal, by the second, and so on). In addition, we do not consider an infinite set of natural numbers, but only the first n numbers. 
So, for example, if n = 11, then the numbers in strange mathematics are ordered as follows:
1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9.
Help your students to learn this science: write a function that receives two integer numbers: n (total amount of numbers in strange mathematics) and k (number from sequence) and returns the location of a given number k in the order defined in strange mathematics. 
For example, if n = 11 and k = 2, the function should return 4 as the answer.
Input: 1 <= n <= 100 000 , 1 <= k <= n.
Output: position of the number k in sequence of the first n natural numbers in lexicographic order. Numbering starts with 1.
Examples:
strange_math(11, 2) == 4
strange_math(15, 5) == 11
strange_math(15, 15) == 7

strangeMath(11, 2) === 4
strangeMath(15, 5) === 11
strangeMath(15, 15) === 7
========================================
URL: https://www.codewars.com/kata/6064c4fe71f8920036610b4b
–ó–∞–¥–∞—á–∞:
In a certain kingdom, strange mathematics is taught at school. Its main difference from ordinary mathematics is that the numbers in it are not ordered in ascending order, but lexicographically, as in a dictionary (first by the first digit, then, if the first digit is equal, by the second, and so on). In addition, we do not consider an infinite set of natural numbers, but only the first n numbers. 
So, for example, if n = 11, then the numbers in strange mathematics are ordered as follows:
1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9.
Help your students to learn this science: write a function that receives two integer numbers: n (total amount of numbers in strange mathematics) and k (number from sequence) and returns the location of a given number k in the order defined in strange mathematics. 
For example, if n = 11 and k = 2, the function should return 4 as the answer.
Input: 1 <= n <= 100 000 , 1 <= k <= n.
Output: position of the number k in sequence of the first n natural numbers in lexicographic order. Numbering starts with 1.
Examples:
strange_math(11, 2) == 4
strange_math(15, 5) == 11
strange_math(15, 15) == 7

strangeMath(11, 2) === 4
strangeMath(15, 5) === 11
strangeMath(15, 15) === 7
========================================
URL: https://www.codewars.com/kata/604517d65b464d000d51381f
–ó–∞–¥–∞—á–∞:
In a certain kingdom, strange mathematics is taught at school. Its main difference from ordinary mathematics is that the numbers in it are not ordered in ascending order, but lexicographically, as in a dictionary (first by the first digit, then, if the first digit is equal, by the second, and so on). In addition, we do not consider an infinite set of natural numbers, but only the first n numbers. 
So, for example, if n = 11, then the numbers in strange mathematics are ordered as follows:
1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9.
Help your students to learn this science: write a function that receives two integer numbers: n (total amount of numbers in strange mathematics) and k (number from sequence) and returns the location of a given number k in the order defined in strange mathematics. 
For example, if n = 11 and k = 2, the function should return 4 as the answer.
Input: 1 <= n <= 100 000 , 1 <= k <= n.
Output: position of the number k in sequence of the first n natural numbers in lexicographic order. Numbering starts with 1.
Examples:
strange_math(11, 2) == 4
strange_math(15, 5) == 11
strange_math(15, 15) == 7

strangeMath(11, 2) === 4
strangeMath(15, 5) === 11
strangeMath(15, 15) === 7
========================================
URL: https://www.codewars.com/kata/605ae9e1d2be8a0023b494ed
–ó–∞–¥–∞—á–∞:
In a certain kingdom, strange mathematics is taught at school. Its main difference from ordinary mathematics is that the numbers in it are not ordered in ascending order, but lexicographically, as in a dictionary (first by the first digit, then, if the first digit is equal, by the second, and so on). In addition, we do not consider an infinite set of natural numbers, but only the first n numbers. 
So, for example, if n = 11, then the numbers in strange mathematics are ordered as follows:
1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9.
Help your students to learn this science: write a function that receives two integer numbers: n (total amount of numbers in strange mathematics) and k (number from sequence) and returns the location of a given number k in the order defined in strange mathematics. 
For example, if n = 11 and k = 2, the function should return 4 as the answer.
Input: 1 <= n <= 100 000 , 1 <= k <= n.
Output: position of the number k in sequence of the first n natural numbers in lexicographic order. Numbering starts with 1.
Examples:
strange_math(11, 2) == 4
strange_math(15, 5) == 11
strange_math(15, 15) == 7

strangeMath(11, 2) === 4
strangeMath(15, 5) === 11
strangeMath(15, 15) === 7
========================================
URL: https://www.codewars.com/kata/602db3215c22df000e8544f0
–ó–∞–¥–∞—á–∞:
Given: a sequence of different type of values (number, string, boolean). You should return an object with a separate properties for each of types presented in input. Each property should contain an array of corresponding values.

keep order of values like in input array
if type is not presented in input, no corresponding property are expected

So, for this input:
['a', 1, 2, false, 'b']

['a', 1, 2, False, 'b']

expected output is:
{
  number: [1, 2],
  string: ['a', 'b'],
  boolean: [false]
}

{
  int: [1, 2],
  str: ['a', 'b'],
  bool: [False]
}
========================================
URL: https://www.codewars.com/kata/604287495a72ae00131685c7
–ó–∞–¥–∞—á–∞:
Given: a sequence of different type of values (number, string, boolean). You should return an object with a separate properties for each of types presented in input. Each property should contain an array of corresponding values.

keep order of values like in input array
if type is not presented in input, no corresponding property are expected

So, for this input:
['a', 1, 2, false, 'b']

['a', 1, 2, False, 'b']

expected output is:
{
  number: [1, 2],
  string: ['a', 'b'],
  boolean: [false]
}

{
  int: [1, 2],
  str: ['a', 'b'],
  bool: [False]
}
========================================
URL: https://www.codewars.com/kata/603b2bb1c7646d000f900083
–ó–∞–¥–∞—á–∞:
Given: a sequence of different type of values (number, string, boolean). You should return an object with a separate properties for each of types presented in input. Each property should contain an array of corresponding values.

keep order of values like in input array
if type is not presented in input, no corresponding property are expected

So, for this input:
['a', 1, 2, false, 'b']

['a', 1, 2, False, 'b']

expected output is:
{
  number: [1, 2],
  string: ['a', 'b'],
  boolean: [false]
}

{
  int: [1, 2],
  str: ['a', 'b'],
  bool: [False]
}
========================================
URL: https://www.codewars.com/kata/601c18c1d92283000ec86f2b
–ó–∞–¥–∞—á–∞:
Given: a sequence of different type of values (number, string, boolean). You should return an object with a separate properties for each of types presented in input. Each property should contain an array of corresponding values.

keep order of values like in input array
if type is not presented in input, no corresponding property are expected

So, for this input:
['a', 1, 2, false, 'b']

['a', 1, 2, False, 'b']

expected output is:
{
  number: [1, 2],
  string: ['a', 'b'],
  boolean: [false]
}

{
  int: [1, 2],
  str: ['a', 'b'],
  bool: [False]
}
========================================
URL: https://www.codewars.com/kata/60113ded99cef9000e309be3
–ó–∞–¥–∞—á–∞:
Given: a sequence of different type of values (number, string, boolean). You should return an object with a separate properties for each of types presented in input. Each property should contain an array of corresponding values.

keep order of values like in input array
if type is not presented in input, no corresponding property are expected

So, for this input:
['a', 1, 2, false, 'b']

['a', 1, 2, False, 'b']

expected output is:
{
  number: [1, 2],
  string: ['a', 'b'],
  boolean: [false]
}

{
  int: [1, 2],
  str: ['a', 'b'],
  bool: [False]
}
========================================
URL: https://www.codewars.com/kata/5ffc226ce1666a002bf023d2
–ó–∞–¥–∞—á–∞:
You are given an array of 6-faced dice. Each die is represented by its face up.
Calculate the minimum number of rotations needed to make all faces the same.
1 will require one rotation to have 2, 3, 4 and 5 face up, but would require two rotations to make it the face 6, as 6 is the opposite side of 1.
The opposite side of 2 is 5 and 3 is 4.
Examples
dice = {1, 1, 1, 1, 1, 6} --> 2:
rotate 6 twice to get 1

dice = {1, 2, 3} --> 2:
2 rotations are needed to make all faces either 1, 2, or 3

dice = {3, 3, 3} --> 0:
all faces are already identical

dice = {1, 6, 2, 3} --> 3:
rotate 1, 6 and 3 once to make them all 2
========================================
URL: https://www.codewars.com/kata/5ff50f64c0afc50008861bf0
–ó–∞–¥–∞—á–∞:
You are given an array of 6-faced dice. Each die is represented by its face up.
Calculate the minimum number of rotations needed to make all faces the same.
1 will require one rotation to have 2, 3, 4 and 5 face up, but would require two rotations to make it the face 6, as 6 is the opposite side of 1.
The opposite side of 2 is 5 and 3 is 4.
Examples
dice = {1, 1, 1, 1, 1, 6} --> 2:
rotate 6 twice to get 1

dice = {1, 2, 3} --> 2:
2 rotations are needed to make all faces either 1, 2, or 3

dice = {3, 3, 3} --> 0:
all faces are already identical

dice = {1, 6, 2, 3} --> 3:
rotate 1, 6 and 3 once to make them all 2
========================================
URL: https://www.codewars.com/kata/5ff2093d375dca00170057bc
–ó–∞–¥–∞—á–∞:
You are given an array of 6-faced dice. Each die is represented by its face up.
Calculate the minimum number of rotations needed to make all faces the same.
1 will require one rotation to have 2, 3, 4 and 5 face up, but would require two rotations to make it the face 6, as 6 is the opposite side of 1.
The opposite side of 2 is 5 and 3 is 4.
Examples
dice = {1, 1, 1, 1, 1, 6} --> 2:
rotate 6 twice to get 1

dice = {1, 2, 3} --> 2:
2 rotations are needed to make all faces either 1, 2, or 3

dice = {3, 3, 3} --> 0:
all faces are already identical

dice = {1, 6, 2, 3} --> 3:
rotate 1, 6 and 3 once to make them all 2
========================================
URL: https://www.codewars.com/kata/5ff22b6e833a9300180bb953
–ó–∞–¥–∞—á–∞:
You are given an array of 6-faced dice. Each die is represented by its face up.
Calculate the minimum number of rotations needed to make all faces the same.
1 will require one rotation to have 2, 3, 4 and 5 face up, but would require two rotations to make it the face 6, as 6 is the opposite side of 1.
The opposite side of 2 is 5 and 3 is 4.
Examples
dice = {1, 1, 1, 1, 1, 6} --> 2:
rotate 6 twice to get 1

dice = {1, 2, 3} --> 2:
2 rotations are needed to make all faces either 1, 2, or 3

dice = {3, 3, 3} --> 0:
all faces are already identical

dice = {1, 6, 2, 3} --> 3:
rotate 1, 6 and 3 once to make them all 2
========================================
URL: https://www.codewars.com/kata/5ff6060ed14f4100106d8e6f
–ó–∞–¥–∞—á–∞:
You are given an array of 6-faced dice. Each die is represented by its face up.
Calculate the minimum number of rotations needed to make all faces the same.
1 will require one rotation to have 2, 3, 4 and 5 face up, but would require two rotations to make it the face 6, as 6 is the opposite side of 1.
The opposite side of 2 is 5 and 3 is 4.
Examples
dice = {1, 1, 1, 1, 1, 6} --> 2:
rotate 6 twice to get 1

dice = {1, 2, 3} --> 2:
2 rotations are needed to make all faces either 1, 2, or 3

dice = {3, 3, 3} --> 0:
all faces are already identical

dice = {1, 6, 2, 3} --> 3:
rotate 1, 6 and 3 once to make them all 2
========================================
URL: https://www.codewars.com/kata/5fde1ea66ba4060008ea5bd9
–ó–∞–¥–∞—á–∞:
Task
Return the length of the given month in the given year.
Your code can be maximum 90 characters long.

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5fdb2ef8656423001c00e648
–ó–∞–¥–∞—á–∞:
Task
Return the length of the given month in the given year.
Your code can be maximum 90 characters long.

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5fc836f5a167260008dfad7f
–ó–∞–¥–∞—á–∞:
Task
Return the length of the given month in the given year.
Your code can be maximum 90 characters long.

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5fc7caa854783c002196f2cb
–ó–∞–¥–∞—á–∞:
Task
Return the length of the given month in the given year.
Your code can be maximum 90 characters long.

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5fc4e46867a010002b4b5f70
–ó–∞–¥–∞—á–∞:
Task
Return the length of the given month in the given year.
Your code can be maximum 90 characters long.

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5fc4349ddb878a0017838d0f
–ó–∞–¥–∞—á–∞:
Given the integer n return odd numbers as they are, but subtract 1 from even numbers.
Note: 
Your solution should be 36 or less characters long.
Examples
Input  = 2
Output = 1

Input  = 13
Output = 13

Input  = 46
Output = 45
========================================
URL: https://www.codewars.com/kata/5f8a15c06dbd530016be0c19
–ó–∞–¥–∞—á–∞:
Given the integer n return odd numbers as they are, but subtract 1 from even numbers.
Note: 
Your solution should be 36 or less characters long.
Examples
Input  = 2
Output = 1

Input  = 13
Output = 13

Input  = 46
Output = 45
========================================
URL: https://www.codewars.com/kata/5fb856190d5230001d48d721
–ó–∞–¥–∞—á–∞:
Given the integer n return odd numbers as they are, but subtract 1 from even numbers.
Note: 
Your solution should be 36 or less characters long.
Examples
Input  = 2
Output = 1

Input  = 13
Output = 13

Input  = 46
Output = 45
========================================
URL: https://www.codewars.com/kata/5fbfc2c0dce9ec000de691e3
–ó–∞–¥–∞—á–∞:
Given the integer n return odd numbers as they are, but subtract 1 from even numbers.
Note: 
Your solution should be 36 or less characters long.
Examples
Input  = 2
Output = 1

Input  = 13
Output = 13

Input  = 46
Output = 45
========================================
URL: https://www.codewars.com/kata/5f882dcc272e7a00287743f5
–ó–∞–¥–∞—á–∞:
Given the integer n return odd numbers as they are, but subtract 1 from even numbers.
Note: 
Your solution should be 36 or less characters long.
Examples
Input  = 2
Output = 1

Input  = 13
Output = 13

Input  = 46
Output = 45
========================================
URL: https://www.codewars.com/kata/5f8341f6d030dc002a69d7e4
–ó–∞–¥–∞—á–∞:
There are some stones on Bob's table in a row, and each of them can be red, green or blue, indicated by the characters R, G, and B.
Help Bob find the minimum number of stones he needs to remove from the table so that the stones in each pair of adjacent stones have different colors.
Examples:
"RGBRGBRGGB"   => 1
"RGGRGBBRGRR"  => 3
"RRRRGGGGBBBB" => 9
========================================
URL: https://www.codewars.com/kata/5f8070c834659f00325b5313
–ó–∞–¥–∞—á–∞:
There are some stones on Bob's table in a row, and each of them can be red, green or blue, indicated by the characters R, G, and B.
Help Bob find the minimum number of stones he needs to remove from the table so that the stones in each pair of adjacent stones have different colors.
Examples:
"RGBRGBRGGB"   => 1
"RGGRGBBRGRR"  => 3
"RRRRGGGGBBBB" => 9
========================================
URL: https://www.codewars.com/kata/5f77d62851f6bc0033616bd8
–ó–∞–¥–∞—á–∞:
There are some stones on Bob's table in a row, and each of them can be red, green or blue, indicated by the characters R, G, and B.
Help Bob find the minimum number of stones he needs to remove from the table so that the stones in each pair of adjacent stones have different colors.
Examples:
"RGBRGBRGGB"   => 1
"RGGRGBBRGRR"  => 3
"RRRRGGGGBBBB" => 9
========================================
URL: https://www.codewars.com/kata/5f76c4779164bf001d52c141
–ó–∞–¥–∞—á–∞:
There are some stones on Bob's table in a row, and each of them can be red, green or blue, indicated by the characters R, G, and B.
Help Bob find the minimum number of stones he needs to remove from the table so that the stones in each pair of adjacent stones have different colors.
Examples:
"RGBRGBRGGB"   => 1
"RGGRGBBRGRR"  => 3
"RRRRGGGGBBBB" => 9
========================================
URL: https://www.codewars.com/kata/5f70e4cce10f9e0001c8995a
–ó–∞–¥–∞—á–∞:
There are some stones on Bob's table in a row, and each of them can be red, green or blue, indicated by the characters R, G, and B.
Help Bob find the minimum number of stones he needs to remove from the table so that the stones in each pair of adjacent stones have different colors.
Examples:
"RGBRGBRGGB"   => 1
"RGGRGBBRGRR"  => 3
"RRRRGGGGBBBB" => 9
========================================
URL: https://www.codewars.com/kata/5f709c8fb0d88300292a7a9d
–ó–∞–¥–∞—á–∞:
You are given an n by n ( square ) grid of characters, for example:
[['m', 'y', 'e'], 
 ['x', 'a', 'm'], 
 ['p', 'l', 'e']]

You are also given a list of integers as input, for example:
[1, 3, 5, 8]

You have to find the characters in these indexes of the grid if you think of the indexes as:
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]

Remember that the indexes start from one and not zero.
Then you output a string like this:
"meal"

All inputs will be valid.
========================================
URL: https://www.codewars.com/kata/5f5da7a415fbdc0001ae3c69
–ó–∞–¥–∞—á–∞:
You are given an n by n ( square ) grid of characters, for example:
[['m', 'y', 'e'], 
 ['x', 'a', 'm'], 
 ['p', 'l', 'e']]

You are also given a list of integers as input, for example:
[1, 3, 5, 8]

You have to find the characters in these indexes of the grid if you think of the indexes as:
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]

Remember that the indexes start from one and not zero.
Then you output a string like this:
"meal"

All inputs will be valid.
========================================
URL: https://www.codewars.com/kata/5f5802bf4c2cc4001a6f859e
–ó–∞–¥–∞—á–∞:
You are given an n by n ( square ) grid of characters, for example:
[['m', 'y', 'e'], 
 ['x', 'a', 'm'], 
 ['p', 'l', 'e']]

You are also given a list of integers as input, for example:
[1, 3, 5, 8]

You have to find the characters in these indexes of the grid if you think of the indexes as:
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]

Remember that the indexes start from one and not zero.
Then you output a string like this:
"meal"

All inputs will be valid.
========================================
URL: https://www.codewars.com/kata/5f656199132bf60027275739
–ó–∞–¥–∞—á–∞:
You are given an n by n ( square ) grid of characters, for example:
[['m', 'y', 'e'], 
 ['x', 'a', 'm'], 
 ['p', 'l', 'e']]

You are also given a list of integers as input, for example:
[1, 3, 5, 8]

You have to find the characters in these indexes of the grid if you think of the indexes as:
[[1, 2, 3], 
 [4, 5, 6], 
 [7, 8, 9]]

Remember that the indexes start from one and not zero.
Then you output a string like this:
"meal"

All inputs will be valid.
========================================
URL: https://www.codewars.com/kata/5f55ecd770692e001484af7d
–ó–∞–¥–∞—á–∞:
Task
You've just moved into a perfectly straight street with exactly n identical houses on either side of the road. Naturally, you would like to find out the house number of the people on the other side of the street. The street looks something like this:

Street
1|   |6
3|   |4
5|   |2
  you

Evens increase on the right; odds decrease on the left. House numbers start at 1 and increase without gaps.
When n = 3, 1 is opposite 6, 3 opposite 4, and 5 opposite 2. 

Example (address, n --> output)
Given your house number address and length of street n, give the house number on the opposite side of the street.
1, 3 --> 6
3, 3 --> 4
2, 3 --> 5
3, 5 --> 8

Note about errors
If you are timing out, running out of memory, or get any kind of "error", read on.
Both n and address could get upto 500 billion with over 200 random tests. If you try to store the addresses of 500 billion houses in a list then you will run out of memory and the tests will crash. This is not a kata problem so please don't post an issue. Similarly if the tests don't complete within 12 seconds then you also fail. 
To solve this, you need to think of a way to do the kata without making massive lists or huge for loops. Read the discourse for some inspiration :)
========================================
URL: https://www.codewars.com/kata/5f47e79e18330d001a195b55
–ó–∞–¥–∞—á–∞:
Task
You've just moved into a perfectly straight street with exactly n identical houses on either side of the road. Naturally, you would like to find out the house number of the people on the other side of the street. The street looks something like this:

Street
1|   |6
3|   |4
5|   |2
  you

Evens increase on the right; odds decrease on the left. House numbers start at 1 and increase without gaps.
When n = 3, 1 is opposite 6, 3 opposite 4, and 5 opposite 2. 

Example (address, n --> output)
Given your house number address and length of street n, give the house number on the opposite side of the street.
1, 3 --> 6
3, 3 --> 4
2, 3 --> 5
3, 5 --> 8

Note about errors
If you are timing out, running out of memory, or get any kind of "error", read on.
Both n and address could get upto 500 billion with over 200 random tests. If you try to store the addresses of 500 billion houses in a list then you will run out of memory and the tests will crash. This is not a kata problem so please don't post an issue. Similarly if the tests don't complete within 12 seconds then you also fail. 
To solve this, you need to think of a way to do the kata without making massive lists or huge for loops. Read the discourse for some inspiration :)
========================================
URL: https://www.codewars.com/kata/5f1360c4bc96870019803ae2
–ó–∞–¥–∞—á–∞:
Task
You've just moved into a perfectly straight street with exactly n identical houses on either side of the road. Naturally, you would like to find out the house number of the people on the other side of the street. The street looks something like this:

Street
1|   |6
3|   |4
5|   |2
  you

Evens increase on the right; odds decrease on the left. House numbers start at 1 and increase without gaps.
When n = 3, 1 is opposite 6, 3 opposite 4, and 5 opposite 2. 

Example (address, n --> output)
Given your house number address and length of street n, give the house number on the opposite side of the street.
1, 3 --> 6
3, 3 --> 4
2, 3 --> 5
3, 5 --> 8

Note about errors
If you are timing out, running out of memory, or get any kind of "error", read on.
Both n and address could get upto 500 billion with over 200 random tests. If you try to store the addresses of 500 billion houses in a list then you will run out of memory and the tests will crash. This is not a kata problem so please don't post an issue. Similarly if the tests don't complete within 12 seconds then you also fail. 
To solve this, you need to think of a way to do the kata without making massive lists or huge for loops. Read the discourse for some inspiration :)
========================================
URL: https://www.codewars.com/kata/5f3142b3a28d9b002ef58f5e
–ó–∞–¥–∞—á–∞:
Task
You've just moved into a perfectly straight street with exactly n identical houses on either side of the road. Naturally, you would like to find out the house number of the people on the other side of the street. The street looks something like this:

Street
1|   |6
3|   |4
5|   |2
  you

Evens increase on the right; odds decrease on the left. House numbers start at 1 and increase without gaps.
When n = 3, 1 is opposite 6, 3 opposite 4, and 5 opposite 2. 

Example (address, n --> output)
Given your house number address and length of street n, give the house number on the opposite side of the street.
1, 3 --> 6
3, 3 --> 4
2, 3 --> 5
3, 5 --> 8

Note about errors
If you are timing out, running out of memory, or get any kind of "error", read on.
Both n and address could get upto 500 billion with over 200 random tests. If you try to store the addresses of 500 billion houses in a list then you will run out of memory and the tests will crash. This is not a kata problem so please don't post an issue. Similarly if the tests don't complete within 12 seconds then you also fail. 
To solve this, you need to think of a way to do the kata without making massive lists or huge for loops. Read the discourse for some inspiration :)
========================================
URL: https://www.codewars.com/kata/5f0ed36164f2bc00283aed07
–ó–∞–¥–∞—á–∞:
Task
You've just moved into a perfectly straight street with exactly n identical houses on either side of the road. Naturally, you would like to find out the house number of the people on the other side of the street. The street looks something like this:

Street
1|   |6
3|   |4
5|   |2
  you

Evens increase on the right; odds decrease on the left. House numbers start at 1 and increase without gaps.
When n = 3, 1 is opposite 6, 3 opposite 4, and 5 opposite 2. 

Example (address, n --> output)
Given your house number address and length of street n, give the house number on the opposite side of the street.
1, 3 --> 6
3, 3 --> 4
2, 3 --> 5
3, 5 --> 8

Note about errors
If you are timing out, running out of memory, or get any kind of "error", read on.
Both n and address could get upto 500 billion with over 200 random tests. If you try to store the addresses of 500 billion houses in a list then you will run out of memory and the tests will crash. This is not a kata problem so please don't post an issue. Similarly if the tests don't complete within 12 seconds then you also fail. 
To solve this, you need to think of a way to do the kata without making massive lists or huge for loops. Read the discourse for some inspiration :)
========================================
URL: https://www.codewars.com/kata/5eb34624fec7d10016de426e
–ó–∞–¥–∞—á–∞:
You're in the casino, playing Roulette, going for the "1-18" bets only and desperate to beat the house and so you want to test how effective the Martingale strategy is. 
You will be given a starting cash balance and an array of binary digits to represent a win (1) or a loss (0). Return your balance after playing all rounds.
The Martingale strategy
You start with a stake of 100 dollars. If you lose a round, you lose the stake placed on that round and you double the stake for your next bet. When you win, you win 100% of the stake and revert back to staking 100 dollars on your next bet.
Example
martingale(1000, [1, 1, 0, 0, 1]) === 1300

Explanation:

you win your 1st round: gain $100, balance = 1100
you win the 2nd round: gain $100, balance = 1200
you lose the 3rd round: lose $100 dollars, balance = 1100
double stake for 4th round and lose: staked $200, lose $200, balance = 900
double stake for 5th round and win: staked $400, won $400, balance = 1300

Note: Your balance is allowed to go below 0.
========================================
URL: https://www.codewars.com/kata/5ebae674014091001729a9d7
–ó–∞–¥–∞—á–∞:
You're in the casino, playing Roulette, going for the "1-18" bets only and desperate to beat the house and so you want to test how effective the Martingale strategy is. 
You will be given a starting cash balance and an array of binary digits to represent a win (1) or a loss (0). Return your balance after playing all rounds.
The Martingale strategy
You start with a stake of 100 dollars. If you lose a round, you lose the stake placed on that round and you double the stake for your next bet. When you win, you win 100% of the stake and revert back to staking 100 dollars on your next bet.
Example
martingale(1000, [1, 1, 0, 0, 1]) === 1300

Explanation:

you win your 1st round: gain $100, balance = 1100
you win the 2nd round: gain $100, balance = 1200
you lose the 3rd round: lose $100 dollars, balance = 1100
double stake for 4th round and lose: staked $200, lose $200, balance = 900
double stake for 5th round and win: staked $400, won $400, balance = 1300

Note: Your balance is allowed to go below 0.
========================================
URL: https://www.codewars.com/kata/5effa412233ac3002a9e471d
–ó–∞–¥–∞—á–∞:
You're in the casino, playing Roulette, going for the "1-18" bets only and desperate to beat the house and so you want to test how effective the Martingale strategy is. 
You will be given a starting cash balance and an array of binary digits to represent a win (1) or a loss (0). Return your balance after playing all rounds.
The Martingale strategy
You start with a stake of 100 dollars. If you lose a round, you lose the stake placed on that round and you double the stake for your next bet. When you win, you win 100% of the stake and revert back to staking 100 dollars on your next bet.
Example
martingale(1000, [1, 1, 0, 0, 1]) === 1300

Explanation:

you win your 1st round: gain $100, balance = 1100
you win the 2nd round: gain $100, balance = 1200
you lose the 3rd round: lose $100 dollars, balance = 1100
double stake for 4th round and lose: staked $200, lose $200, balance = 900
double stake for 5th round and win: staked $400, won $400, balance = 1300

Note: Your balance is allowed to go below 0.
========================================
URL: https://www.codewars.com/kata/5ebd53ea50d0680031190b96
–ó–∞–¥–∞—á–∞:
You're in the casino, playing Roulette, going for the "1-18" bets only and desperate to beat the house and so you want to test how effective the Martingale strategy is. 
You will be given a starting cash balance and an array of binary digits to represent a win (1) or a loss (0). Return your balance after playing all rounds.
The Martingale strategy
You start with a stake of 100 dollars. If you lose a round, you lose the stake placed on that round and you double the stake for your next bet. When you win, you win 100% of the stake and revert back to staking 100 dollars on your next bet.
Example
martingale(1000, [1, 1, 0, 0, 1]) === 1300

Explanation:

you win your 1st round: gain $100, balance = 1100
you win the 2nd round: gain $100, balance = 1200
you lose the 3rd round: lose $100 dollars, balance = 1100
double stake for 4th round and lose: staked $200, lose $200, balance = 900
double stake for 5th round and win: staked $400, won $400, balance = 1300

Note: Your balance is allowed to go below 0.
========================================
URL: https://www.codewars.com/kata/5ef0456fcd067000321baffa
–ó–∞–¥–∞—á–∞:
You're in the casino, playing Roulette, going for the "1-18" bets only and desperate to beat the house and so you want to test how effective the Martingale strategy is. 
You will be given a starting cash balance and an array of binary digits to represent a win (1) or a loss (0). Return your balance after playing all rounds.
The Martingale strategy
You start with a stake of 100 dollars. If you lose a round, you lose the stake placed on that round and you double the stake for your next bet. When you win, you win 100% of the stake and revert back to staking 100 dollars on your next bet.
Example
martingale(1000, [1, 1, 0, 0, 1]) === 1300

Explanation:

you win your 1st round: gain $100, balance = 1100
you win the 2nd round: gain $100, balance = 1200
you lose the 3rd round: lose $100 dollars, balance = 1100
double stake for 4th round and lose: staked $200, lose $200, balance = 900
double stake for 5th round and win: staked $400, won $400, balance = 1300

Note: Your balance is allowed to go below 0.
========================================
URL: https://www.codewars.com/kata/5eb27d81077a7400171c6820
–ó–∞–¥–∞—á–∞:
As you may know, once some people pass their teens, they jokingly only celebrate their 20th or 21st birthday, forever. With some maths skills, that's totally possible - you only need to select the correct number base!
For example, if they turn 32, that's exactly 20 - in base 16... Already 39? That's just 21, in base 19!
Your task is to translate the given age to the much desired 20 (or 21) years, and indicate the number base, in the format specified below.
Note: input will be always > 21
Examples:
32  -->  "32? That's just 20, in base 16!"
39  -->  "39? That's just 21, in base 19!"

Hint: if you don't know (enough) about numeral systems and radix, just observe the pattern!

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5eaf88f92b679f001423cc66
–ó–∞–¥–∞—á–∞:
As you may know, once some people pass their teens, they jokingly only celebrate their 20th or 21st birthday, forever. With some maths skills, that's totally possible - you only need to select the correct number base!
For example, if they turn 32, that's exactly 20 - in base 16... Already 39? That's just 21, in base 19!
Your task is to translate the given age to the much desired 20 (or 21) years, and indicate the number base, in the format specified below.
Note: input will be always > 21
Examples:
32  -->  "32? That's just 20, in base 16!"
39  -->  "39? That's just 21, in base 19!"

Hint: if you don't know (enough) about numeral systems and radix, just observe the pattern!

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5eaf798e739e39001218a2f4
–ó–∞–¥–∞—á–∞:
As you may know, once some people pass their teens, they jokingly only celebrate their 20th or 21st birthday, forever. With some maths skills, that's totally possible - you only need to select the correct number base!
For example, if they turn 32, that's exactly 20 - in base 16... Already 39? That's just 21, in base 19!
Your task is to translate the given age to the much desired 20 (or 21) years, and indicate the number base, in the format specified below.
Note: input will be always > 21
Examples:
32  -->  "32? That's just 20, in base 16!"
39  -->  "39? That's just 21, in base 19!"

Hint: if you don't know (enough) about numeral systems and radix, just observe the pattern!

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5e96332d18ac870032eb735f
–ó–∞–¥–∞—á–∞:
As you may know, once some people pass their teens, they jokingly only celebrate their 20th or 21st birthday, forever. With some maths skills, that's totally possible - you only need to select the correct number base!
For example, if they turn 32, that's exactly 20 - in base 16... Already 39? That's just 21, in base 19!
Your task is to translate the given age to the much desired 20 (or 21) years, and indicate the number base, in the format specified below.
Note: input will be always > 21
Examples:
32  -->  "32? That's just 20, in base 16!"
39  -->  "39? That's just 21, in base 19!"

Hint: if you don't know (enough) about numeral systems and radix, just observe the pattern!

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5ea2baed9345eb001e8ce394
–ó–∞–¥–∞—á–∞:
As you may know, once some people pass their teens, they jokingly only celebrate their 20th or 21st birthday, forever. With some maths skills, that's totally possible - you only need to select the correct number base!
For example, if they turn 32, that's exactly 20 - in base 16... Already 39? That's just 21, in base 19!
Your task is to translate the given age to the much desired 20 (or 21) years, and indicate the number base, in the format specified below.
Note: input will be always > 21
Examples:
32  -->  "32? That's just 20, in base 16!"
39  -->  "39? That's just 21, in base 19!"

Hint: if you don't know (enough) about numeral systems and radix, just observe the pattern!

My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5e81303e7bf0410025e01031
–ó–∞–¥–∞—á–∞:
Oh no! Someone left the server at your local car dealership too close to a blender and now all of their data is scrambled.
It is your job to unscramble the data and put it into an easy to read dictionary.
Unscramble the list you are given and return the values in a dictionary such as the following:
dictionary = {'make': make, 'model': model, 'year': year, 'new': new}

You will be given a list containing a string (the make of the car), a tuple containing two strings (the model and sub-model), an integer (the year the car was manufactured) and a boolean (whether the car is new or used 'True' or 'False'), but you will not know the order of the list.
Return the dictionary where 'make' is a String, 'model' is a String, 'year' is an integer, and 'new' is a boolean of whether it is new (True) or used (False)
P.S Model should be converted to a string, separating the values by one Space
========================================
URL: https://www.codewars.com/kata/5e60cdcd01712200335bd676
–ó–∞–¥–∞—á–∞:
Oh no! Someone left the server at your local car dealership too close to a blender and now all of their data is scrambled.
It is your job to unscramble the data and put it into an easy to read dictionary.
Unscramble the list you are given and return the values in a dictionary such as the following:
dictionary = {'make': make, 'model': model, 'year': year, 'new': new}

You will be given a list containing a string (the make of the car), a tuple containing two strings (the model and sub-model), an integer (the year the car was manufactured) and a boolean (whether the car is new or used 'True' or 'False'), but you will not know the order of the list.
Return the dictionary where 'make' is a String, 'model' is a String, 'year' is an integer, and 'new' is a boolean of whether it is new (True) or used (False)
P.S Model should be converted to a string, separating the values by one Space
========================================
URL: https://www.codewars.com/kata/5e5acfe31b1c240012717a78
–ó–∞–¥–∞—á–∞:
Oh no! Someone left the server at your local car dealership too close to a blender and now all of their data is scrambled.
It is your job to unscramble the data and put it into an easy to read dictionary.
Unscramble the list you are given and return the values in a dictionary such as the following:
dictionary = {'make': make, 'model': model, 'year': year, 'new': new}

You will be given a list containing a string (the make of the car), a tuple containing two strings (the model and sub-model), an integer (the year the car was manufactured) and a boolean (whether the car is new or used 'True' or 'False'), but you will not know the order of the list.
Return the dictionary where 'make' is a String, 'model' is a String, 'year' is an integer, and 'new' is a boolean of whether it is new (True) or used (False)
P.S Model should be converted to a string, separating the values by one Space
========================================
URL: https://www.codewars.com/kata/5e65916b4696e500134987e1
–ó–∞–¥–∞—á–∞:
Oh no! Someone left the server at your local car dealership too close to a blender and now all of their data is scrambled.
It is your job to unscramble the data and put it into an easy to read dictionary.
Unscramble the list you are given and return the values in a dictionary such as the following:
dictionary = {'make': make, 'model': model, 'year': year, 'new': new}

You will be given a list containing a string (the make of the car), a tuple containing two strings (the model and sub-model), an integer (the year the car was manufactured) and a boolean (whether the car is new or used 'True' or 'False'), but you will not know the order of the list.
Return the dictionary where 'make' is a String, 'model' is a String, 'year' is an integer, and 'new' is a boolean of whether it is new (True) or used (False)
P.S Model should be converted to a string, separating the values by one Space
========================================
URL: https://www.codewars.com/kata/5e60cc55d8e2eb000fe57a1c
–ó–∞–¥–∞—á–∞:
Oh no! Someone left the server at your local car dealership too close to a blender and now all of their data is scrambled.
It is your job to unscramble the data and put it into an easy to read dictionary.
Unscramble the list you are given and return the values in a dictionary such as the following:
dictionary = {'make': make, 'model': model, 'year': year, 'new': new}

You will be given a list containing a string (the make of the car), a tuple containing two strings (the model and sub-model), an integer (the year the car was manufactured) and a boolean (whether the car is new or used 'True' or 'False'), but you will not know the order of the list.
Return the dictionary where 'make' is a String, 'model' is a String, 'year' is an integer, and 'new' is a boolean of whether it is new (True) or used (False)
P.S Model should be converted to a string, separating the values by one Space
========================================
URL: https://www.codewars.com/kata/5e529a6fb95d280032d04389
–ó–∞–¥–∞—á–∞:
Given a board of NxN, distributed with tiles labeled 0 to N¬≤ - 1(inclusive):
A solved grid will have the tiles in order of label, left to right, top to bottom.
Return true if the board state is currently solved, and false if the board state is unsolved.
Input will always be a square 2d array.
For example, a 2x2 solved grid:
[ [0, 1],
  [2, 3] ]

A 2x2 unsolved grid:
[ [2, 1],
  [0, 3] ]
========================================
URL: https://www.codewars.com/kata/5e4e8f5a72d9550032953717
–ó–∞–¥–∞—á–∞:
Given a board of NxN, distributed with tiles labeled 0 to N¬≤ - 1(inclusive):
A solved grid will have the tiles in order of label, left to right, top to bottom.
Return true if the board state is currently solved, and false if the board state is unsolved.
Input will always be a square 2d array.
For example, a 2x2 solved grid:
[ [0, 1],
  [2, 3] ]

A 2x2 unsolved grid:
[ [2, 1],
  [0, 3] ]
========================================
URL: https://www.codewars.com/kata/5e28b3ff0acfbb001f348ccc
–ó–∞–¥–∞—á–∞:
Given a board of NxN, distributed with tiles labeled 0 to N¬≤ - 1(inclusive):
A solved grid will have the tiles in order of label, left to right, top to bottom.
Return true if the board state is currently solved, and false if the board state is unsolved.
Input will always be a square 2d array.
For example, a 2x2 solved grid:
[ [0, 1],
  [2, 3] ]

A 2x2 unsolved grid:
[ [2, 1],
  [0, 3] ]
========================================
URL: https://www.codewars.com/kata/5e4217e476126b000170489b
–ó–∞–¥–∞—á–∞:
Given a board of NxN, distributed with tiles labeled 0 to N¬≤ - 1(inclusive):
A solved grid will have the tiles in order of label, left to right, top to bottom.
Return true if the board state is currently solved, and false if the board state is unsolved.
Input will always be a square 2d array.
For example, a 2x2 solved grid:
[ [0, 1],
  [2, 3] ]

A 2x2 unsolved grid:
[ [2, 1],
  [0, 3] ]
========================================
URL: https://www.codewars.com/kata/5e2c7639b5d728001489d910
–ó–∞–¥–∞—á–∞:
Given a board of NxN, distributed with tiles labeled 0 to N¬≤ - 1(inclusive):
A solved grid will have the tiles in order of label, left to right, top to bottom.
Return true if the board state is currently solved, and false if the board state is unsolved.
Input will always be a square 2d array.
For example, a 2x2 solved grid:
[ [0, 1],
  [2, 3] ]

A 2x2 unsolved grid:
[ [2, 1],
  [0, 3] ]
========================================
URL: https://www.codewars.com/kata/5e2733f0e7432a000fb5ecc4
–ó–∞–¥–∞—á–∞:
At the casino you are presented with a wide array of games to play. You are there for fun, but you want to be economical about it by playing the game that maximises your profits (minimises your losses, let's be real).
To do this, you will pick the game with the highest expected value (EV). If you are unfamiliar with the concept, you can read the article on investopedia.
You will get a tuple containing instances of namedtuple Game. Each instance of Game has a field name and outcomes. name is just the name of the game represented as a string. outcomes is a tuple of tuples where each inner tuple represents a single possible outcome.
Example Game instance:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))

For each outcome (inner tuple), the first value represent the probability of occurrence while the second value represent the reward. In the above example there is a 50% chance of winning 20, and 50% chance of losing 20.
The function which you will construct should return the name of the game with the highest expected value of playing.
Constraints:
2 <= N <= 20
Notes:

Each input has one clear winner.
Namedtuple Game has been preloaded.

Game namedtuple:
Game = namedtuple("Game", ["name", "outcomes"])

Example with explanation:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))
g2 = Game("Go big or go home", ((0.99, -10), (0.01, 980)))

find_best_game((g1, g2)) # => "Breakeven Steven"

Breakeven Steven has a higher EV than Go big or go home (0 vs -0.1) and therefore the function should return that name.
========================================
URL: https://www.codewars.com/kata/5e16ffb7297fe00001114824
–ó–∞–¥–∞—á–∞:
At the casino you are presented with a wide array of games to play. You are there for fun, but you want to be economical about it by playing the game that maximises your profits (minimises your losses, let's be real).
To do this, you will pick the game with the highest expected value (EV). If you are unfamiliar with the concept, you can read the article on investopedia.
You will get a tuple containing instances of namedtuple Game. Each instance of Game has a field name and outcomes. name is just the name of the game represented as a string. outcomes is a tuple of tuples where each inner tuple represents a single possible outcome.
Example Game instance:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))

For each outcome (inner tuple), the first value represent the probability of occurrence while the second value represent the reward. In the above example there is a 50% chance of winning 20, and 50% chance of losing 20.
The function which you will construct should return the name of the game with the highest expected value of playing.
Constraints:
2 <= N <= 20
Notes:

Each input has one clear winner.
Namedtuple Game has been preloaded.

Game namedtuple:
Game = namedtuple("Game", ["name", "outcomes"])

Example with explanation:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))
g2 = Game("Go big or go home", ((0.99, -10), (0.01, 980)))

find_best_game((g1, g2)) # => "Breakeven Steven"

Breakeven Steven has a higher EV than Go big or go home (0 vs -0.1) and therefore the function should return that name.
========================================
URL: https://www.codewars.com/kata/5e2596a9ad937f002e510435
–ó–∞–¥–∞—á–∞:
At the casino you are presented with a wide array of games to play. You are there for fun, but you want to be economical about it by playing the game that maximises your profits (minimises your losses, let's be real).
To do this, you will pick the game with the highest expected value (EV). If you are unfamiliar with the concept, you can read the article on investopedia.
You will get a tuple containing instances of namedtuple Game. Each instance of Game has a field name and outcomes. name is just the name of the game represented as a string. outcomes is a tuple of tuples where each inner tuple represents a single possible outcome.
Example Game instance:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))

For each outcome (inner tuple), the first value represent the probability of occurrence while the second value represent the reward. In the above example there is a 50% chance of winning 20, and 50% chance of losing 20.
The function which you will construct should return the name of the game with the highest expected value of playing.
Constraints:
2 <= N <= 20
Notes:

Each input has one clear winner.
Namedtuple Game has been preloaded.

Game namedtuple:
Game = namedtuple("Game", ["name", "outcomes"])

Example with explanation:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))
g2 = Game("Go big or go home", ((0.99, -10), (0.01, 980)))

find_best_game((g1, g2)) # => "Breakeven Steven"

Breakeven Steven has a higher EV than Go big or go home (0 vs -0.1) and therefore the function should return that name.
========================================
URL: https://www.codewars.com/kata/5dfd129673aa2c002591f65d
–ó–∞–¥–∞—á–∞:
At the casino you are presented with a wide array of games to play. You are there for fun, but you want to be economical about it by playing the game that maximises your profits (minimises your losses, let's be real).
To do this, you will pick the game with the highest expected value (EV). If you are unfamiliar with the concept, you can read the article on investopedia.
You will get a tuple containing instances of namedtuple Game. Each instance of Game has a field name and outcomes. name is just the name of the game represented as a string. outcomes is a tuple of tuples where each inner tuple represents a single possible outcome.
Example Game instance:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))

For each outcome (inner tuple), the first value represent the probability of occurrence while the second value represent the reward. In the above example there is a 50% chance of winning 20, and 50% chance of losing 20.
The function which you will construct should return the name of the game with the highest expected value of playing.
Constraints:
2 <= N <= 20
Notes:

Each input has one clear winner.
Namedtuple Game has been preloaded.

Game namedtuple:
Game = namedtuple("Game", ["name", "outcomes"])

Example with explanation:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))
g2 = Game("Go big or go home", ((0.99, -10), (0.01, 980)))

find_best_game((g1, g2)) # => "Breakeven Steven"

Breakeven Steven has a higher EV than Go big or go home (0 vs -0.1) and therefore the function should return that name.
========================================
URL: https://www.codewars.com/kata/5e030f77cec18900322c535d
–ó–∞–¥–∞—á–∞:
At the casino you are presented with a wide array of games to play. You are there for fun, but you want to be economical about it by playing the game that maximises your profits (minimises your losses, let's be real).
To do this, you will pick the game with the highest expected value (EV). If you are unfamiliar with the concept, you can read the article on investopedia.
You will get a tuple containing instances of namedtuple Game. Each instance of Game has a field name and outcomes. name is just the name of the game represented as a string. outcomes is a tuple of tuples where each inner tuple represents a single possible outcome.
Example Game instance:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))

For each outcome (inner tuple), the first value represent the probability of occurrence while the second value represent the reward. In the above example there is a 50% chance of winning 20, and 50% chance of losing 20.
The function which you will construct should return the name of the game with the highest expected value of playing.
Constraints:
2 <= N <= 20
Notes:

Each input has one clear winner.
Namedtuple Game has been preloaded.

Game namedtuple:
Game = namedtuple("Game", ["name", "outcomes"])

Example with explanation:
g1 = Game("Breakeven Steven", ((0.5, 20), (0.5, -20)))
g2 = Game("Go big or go home", ((0.99, -10), (0.01, 980)))

find_best_game((g1, g2)) # => "Breakeven Steven"

Breakeven Steven has a higher EV than Go big or go home (0 vs -0.1) and therefore the function should return that name.
========================================
URL: https://www.codewars.com/kata/5df261342964c80028345a0a
–ó–∞–¥–∞—á–∞:
Given the sum and gcd of two numbers, return those two numbers in ascending order. If the numbers do not exist, return -1, (or NULL in C, tuple (-1,-1) in C#, pair (-1,-1) in C++,None in Rust, array {-1,-1}  in Java and Golang).
For example: 
Given sum = 12 and gcd = 4...

solve(12,4) = [4,8]. The two numbers 4 and 8 sum to 12 and have a gcd of 4.

solve(12,5) = -1. No two numbers exist that sum to 12 and have gcd of 5.

solve(10,2) = [2,8]. Note that [4,6] is also a possibility but we pick the one with the lower first element: 2 < 4, so we take [2,8].

More examples in test cases. 
Good luck!
========================================
URL: https://www.codewars.com/kata/5dd259444228280032b1ed2a
–ó–∞–¥–∞—á–∞:
Given the sum and gcd of two numbers, return those two numbers in ascending order. If the numbers do not exist, return -1, (or NULL in C, tuple (-1,-1) in C#, pair (-1,-1) in C++,None in Rust, array {-1,-1}  in Java and Golang).
For example: 
Given sum = 12 and gcd = 4...

solve(12,4) = [4,8]. The two numbers 4 and 8 sum to 12 and have a gcd of 4.

solve(12,5) = -1. No two numbers exist that sum to 12 and have gcd of 5.

solve(10,2) = [2,8]. Note that [4,6] is also a possibility but we pick the one with the lower first element: 2 < 4, so we take [2,8].

More examples in test cases. 
Good luck!
========================================
URL: https://www.codewars.com/kata/5deeb1cc0d5bc9000f70aa74
–ó–∞–¥–∞—á–∞:
Given the sum and gcd of two numbers, return those two numbers in ascending order. If the numbers do not exist, return -1, (or NULL in C, tuple (-1,-1) in C#, pair (-1,-1) in C++,None in Rust, array {-1,-1}  in Java and Golang).
For example: 
Given sum = 12 and gcd = 4...

solve(12,4) = [4,8]. The two numbers 4 and 8 sum to 12 and have a gcd of 4.

solve(12,5) = -1. No two numbers exist that sum to 12 and have gcd of 5.

solve(10,2) = [2,8]. Note that [4,6] is also a possibility but we pick the one with the lower first element: 2 < 4, so we take [2,8].

More examples in test cases. 
Good luck!
========================================
URL: https://www.codewars.com/kata/5df0041acec189002d06101f
–ó–∞–¥–∞—á–∞:
Given the sum and gcd of two numbers, return those two numbers in ascending order. If the numbers do not exist, return -1, (or NULL in C, tuple (-1,-1) in C#, pair (-1,-1) in C++,None in Rust, array {-1,-1}  in Java and Golang).
For example: 
Given sum = 12 and gcd = 4...

solve(12,4) = [4,8]. The two numbers 4 and 8 sum to 12 and have a gcd of 4.

solve(12,5) = -1. No two numbers exist that sum to 12 and have gcd of 5.

solve(10,2) = [2,8]. Note that [4,6] is also a possibility but we pick the one with the lower first element: 2 < 4, so we take [2,8].

More examples in test cases. 
Good luck!
========================================
URL: https://www.codewars.com/kata/5dd5128f16eced000e4c42ba
–ó–∞–¥–∞—á–∞:
Given the sum and gcd of two numbers, return those two numbers in ascending order. If the numbers do not exist, return -1, (or NULL in C, tuple (-1,-1) in C#, pair (-1,-1) in C++,None in Rust, array {-1,-1}  in Java and Golang).
For example: 
Given sum = 12 and gcd = 4...

solve(12,4) = [4,8]. The two numbers 4 and 8 sum to 12 and have a gcd of 4.

solve(12,5) = -1. No two numbers exist that sum to 12 and have gcd of 5.

solve(10,2) = [2,8]. Note that [4,6] is also a possibility but we pick the one with the lower first element: 2 < 4, so we take [2,8].

More examples in test cases. 
Good luck!
========================================
URL: https://www.codewars.com/kata/5dae2599a8f7d90025d2f15f
–ó–∞–¥–∞—á–∞:
The Challenge
Write a function that returns the number of significant figures in a given number. You can read about significant figures below.
Helpful information

the type of the given number will be string
you must return the number of significant figures as type int
no blank strings will be given

Significant Figures
What are they?
Significant Figures are the meaningful digits in a measured or computed value.
Counting significant figures
All non-zero digits are significant

4.357 has 4 significant figures
152.63 has 5 significant figures

Zeroes at the beginning of a number are not significant

0215 has 3 significant figures
0.6 has 1 significant figure

Trailing zeroes in a number with a decimal point are significant

78.200 has 5 significant figures
20.0 has 3 significant figures

Trailing zeroes in a number without a decimal point are not significant

1200 has 2 significant figures
345000 has 3 significant figures

All zeroes between significant figures are significant

90.09 has 4 significant figures
5050 has 3 significant figures
========================================
URL: https://www.codewars.com/kata/5d9fe0ace0aad7001290acb7
–ó–∞–¥–∞—á–∞:
The Challenge
Write a function that returns the number of significant figures in a given number. You can read about significant figures below.
Helpful information

the type of the given number will be string
you must return the number of significant figures as type int
no blank strings will be given

Significant Figures
What are they?
Significant Figures are the meaningful digits in a measured or computed value.
Counting significant figures
All non-zero digits are significant

4.357 has 4 significant figures
152.63 has 5 significant figures

Zeroes at the beginning of a number are not significant

0215 has 3 significant figures
0.6 has 1 significant figure

Trailing zeroes in a number with a decimal point are significant

78.200 has 5 significant figures
20.0 has 3 significant figures

Trailing zeroes in a number without a decimal point are not significant

1200 has 2 significant figures
345000 has 3 significant figures

All zeroes between significant figures are significant

90.09 has 4 significant figures
5050 has 3 significant figures
========================================
URL: https://www.codewars.com/kata/5da995d583326300293ce4cb
–ó–∞–¥–∞—á–∞:
The Challenge
Write a function that returns the number of significant figures in a given number. You can read about significant figures below.
Helpful information

the type of the given number will be string
you must return the number of significant figures as type int
no blank strings will be given

Significant Figures
What are they?
Significant Figures are the meaningful digits in a measured or computed value.
Counting significant figures
All non-zero digits are significant

4.357 has 4 significant figures
152.63 has 5 significant figures

Zeroes at the beginning of a number are not significant

0215 has 3 significant figures
0.6 has 1 significant figure

Trailing zeroes in a number with a decimal point are significant

78.200 has 5 significant figures
20.0 has 3 significant figures

Trailing zeroes in a number without a decimal point are not significant

1200 has 2 significant figures
345000 has 3 significant figures

All zeroes between significant figures are significant

90.09 has 4 significant figures
5050 has 3 significant figures
========================================
URL: https://www.codewars.com/kata/5da9973d06119a000e604cb6
–ó–∞–¥–∞—á–∞:
The Challenge
Write a function that returns the number of significant figures in a given number. You can read about significant figures below.
Helpful information

the type of the given number will be string
you must return the number of significant figures as type int
no blank strings will be given

Significant Figures
What are they?
Significant Figures are the meaningful digits in a measured or computed value.
Counting significant figures
All non-zero digits are significant

4.357 has 4 significant figures
152.63 has 5 significant figures

Zeroes at the beginning of a number are not significant

0215 has 3 significant figures
0.6 has 1 significant figure

Trailing zeroes in a number with a decimal point are significant

78.200 has 5 significant figures
20.0 has 3 significant figures

Trailing zeroes in a number without a decimal point are not significant

1200 has 2 significant figures
345000 has 3 significant figures

All zeroes between significant figures are significant

90.09 has 4 significant figures
5050 has 3 significant figures
========================================
URL: https://www.codewars.com/kata/5d9f95424a336600278a9632
–ó–∞–¥–∞—á–∞:
Traditionally, all programming languages implement the 3 most common boolean operations: and, or, not. These three form the complete boolean algebra, i.e. every possible boolean function from N arguments can be decomposed into combination of arguments and and, or, not.
In the school we have learned, that only 2 operations (not and 1 of remaining) is enough to form a complete algebra, and the last one can be expressed as a combination of the former. A great kata to test that: https://www.codewars.com/kata/boolean-logic-from-scratch/python
Several other operations may form a complete boolean algebra, i.e. xor, 1 and and. However, we are interested in an operation, which forms boolean algebra all by itself: Sheffer stroke (another operation with such a property is Peirce's arrow).
Sheffer stroke is defined as follows:
sheffer(False, False) = True
sheffer(False, True) = True
sheffer(True, False) = True
sheffer(True, True) = False

The task:
Implement functions and, not and or by only using the preloaded sheffer function. Using built-in boolean primitives is disallowed.
Note: for reasons of banning strange solutions, using anonymous functions is also disallowed.
========================================
URL: https://www.codewars.com/kata/5d82344d687f21002c71296e
–ó–∞–¥–∞—á–∞:
Traditionally, all programming languages implement the 3 most common boolean operations: and, or, not. These three form the complete boolean algebra, i.e. every possible boolean function from N arguments can be decomposed into combination of arguments and and, or, not.
In the school we have learned, that only 2 operations (not and 1 of remaining) is enough to form a complete algebra, and the last one can be expressed as a combination of the former. A great kata to test that: https://www.codewars.com/kata/boolean-logic-from-scratch/python
Several other operations may form a complete boolean algebra, i.e. xor, 1 and and. However, we are interested in an operation, which forms boolean algebra all by itself: Sheffer stroke (another operation with such a property is Peirce's arrow).
Sheffer stroke is defined as follows:
sheffer(False, False) = True
sheffer(False, True) = True
sheffer(True, False) = True
sheffer(True, True) = False

The task:
Implement functions and, not and or by only using the preloaded sheffer function. Using built-in boolean primitives is disallowed.
Note: for reasons of banning strange solutions, using anonymous functions is also disallowed.
========================================
URL: https://www.codewars.com/kata/5d8365b570a6f6001519ecc8
–ó–∞–¥–∞—á–∞:
Traditionally, all programming languages implement the 3 most common boolean operations: and, or, not. These three form the complete boolean algebra, i.e. every possible boolean function from N arguments can be decomposed into combination of arguments and and, or, not.
In the school we have learned, that only 2 operations (not and 1 of remaining) is enough to form a complete algebra, and the last one can be expressed as a combination of the former. A great kata to test that: https://www.codewars.com/kata/boolean-logic-from-scratch/python
Several other operations may form a complete boolean algebra, i.e. xor, 1 and and. However, we are interested in an operation, which forms boolean algebra all by itself: Sheffer stroke (another operation with such a property is Peirce's arrow).
Sheffer stroke is defined as follows:
sheffer(False, False) = True
sheffer(False, True) = True
sheffer(True, False) = True
sheffer(True, True) = False

The task:
Implement functions and, not and or by only using the preloaded sheffer function. Using built-in boolean primitives is disallowed.
Note: for reasons of banning strange solutions, using anonymous functions is also disallowed.
========================================
URL: https://www.codewars.com/kata/5d96030e4a3366001d24b3b7
–ó–∞–¥–∞—á–∞:
Traditionally, all programming languages implement the 3 most common boolean operations: and, or, not. These three form the complete boolean algebra, i.e. every possible boolean function from N arguments can be decomposed into combination of arguments and and, or, not.
In the school we have learned, that only 2 operations (not and 1 of remaining) is enough to form a complete algebra, and the last one can be expressed as a combination of the former. A great kata to test that: https://www.codewars.com/kata/boolean-logic-from-scratch/python
Several other operations may form a complete boolean algebra, i.e. xor, 1 and and. However, we are interested in an operation, which forms boolean algebra all by itself: Sheffer stroke (another operation with such a property is Peirce's arrow).
Sheffer stroke is defined as follows:
sheffer(False, False) = True
sheffer(False, True) = True
sheffer(True, False) = True
sheffer(True, True) = False

The task:
Implement functions and, not and or by only using the preloaded sheffer function. Using built-in boolean primitives is disallowed.
Note: for reasons of banning strange solutions, using anonymous functions is also disallowed.
========================================
URL: https://www.codewars.com/kata/5d95b7644a336600271f52ba
–ó–∞–¥–∞—á–∞:
Traditionally, all programming languages implement the 3 most common boolean operations: and, or, not. These three form the complete boolean algebra, i.e. every possible boolean function from N arguments can be decomposed into combination of arguments and and, or, not.
In the school we have learned, that only 2 operations (not and 1 of remaining) is enough to form a complete algebra, and the last one can be expressed as a combination of the former. A great kata to test that: https://www.codewars.com/kata/boolean-logic-from-scratch/python
Several other operations may form a complete boolean algebra, i.e. xor, 1 and and. However, we are interested in an operation, which forms boolean algebra all by itself: Sheffer stroke (another operation with such a property is Peirce's arrow).
Sheffer stroke is defined as follows:
sheffer(False, False) = True
sheffer(False, True) = True
sheffer(True, False) = True
sheffer(True, True) = False

The task:
Implement functions and, not and or by only using the preloaded sheffer function. Using built-in boolean primitives is disallowed.
Note: for reasons of banning strange solutions, using anonymous functions is also disallowed.
========================================
URL: https://www.codewars.com/kata/5d7c7697e8ad48001e642964
–ó–∞–¥–∞—á–∞:
It's your best friend's birthday! You already bought a box for the present. Now you want to pack the present in the box. You want to decorate the box with a ribbon and a bow.
But how much cm of ribbon do you need?
Write the method wrap that calculates that!
A box has a height, a width and a length (in cm). The ribbon is crossed on the side with the largest area. Opposite this side (also the side with the largest area) the loop is bound, calculate with 20 cm more tape.
  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  17 32 11 wrap -> 162
  13 13 13 wrap -> 124
  1  3  1  wrap -> 32

  wrap(17, 32, 11)  =>  162
  wrap(13, 13, 13)  =>  124
  wrap( 1,  3,  1)  =>   32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

Notes: 
height, width and length will always be >0 
The ribbon and the bow on the present looks like this:
========================================
URL: https://www.codewars.com/kata/5d774cfde98179002a7cb3c8
–ó–∞–¥–∞—á–∞:
It's your best friend's birthday! You already bought a box for the present. Now you want to pack the present in the box. You want to decorate the box with a ribbon and a bow.
But how much cm of ribbon do you need?
Write the method wrap that calculates that!
A box has a height, a width and a length (in cm). The ribbon is crossed on the side with the largest area. Opposite this side (also the side with the largest area) the loop is bound, calculate with 20 cm more tape.
  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  17 32 11 wrap -> 162
  13 13 13 wrap -> 124
  1  3  1  wrap -> 32

  wrap(17, 32, 11)  =>  162
  wrap(13, 13, 13)  =>  124
  wrap( 1,  3,  1)  =>   32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

Notes: 
height, width and length will always be >0 
The ribbon and the bow on the present looks like this:
========================================
URL: https://www.codewars.com/kata/5d65fbdfb96e1800282b5ee0
–ó–∞–¥–∞—á–∞:
It's your best friend's birthday! You already bought a box for the present. Now you want to pack the present in the box. You want to decorate the box with a ribbon and a bow.
But how much cm of ribbon do you need?
Write the method wrap that calculates that!
A box has a height, a width and a length (in cm). The ribbon is crossed on the side with the largest area. Opposite this side (also the side with the largest area) the loop is bound, calculate with 20 cm more tape.
  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  17 32 11 wrap -> 162
  13 13 13 wrap -> 124
  1  3  1  wrap -> 32

  wrap(17, 32, 11)  =>  162
  wrap(13, 13, 13)  =>  124
  wrap( 1,  3,  1)  =>   32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

Notes: 
height, width and length will always be >0 
The ribbon and the bow on the present looks like this:
========================================
URL: https://www.codewars.com/kata/5d72704499ee62001a7068c7
–ó–∞–¥–∞—á–∞:
It's your best friend's birthday! You already bought a box for the present. Now you want to pack the present in the box. You want to decorate the box with a ribbon and a bow.
But how much cm of ribbon do you need?
Write the method wrap that calculates that!
A box has a height, a width and a length (in cm). The ribbon is crossed on the side with the largest area. Opposite this side (also the side with the largest area) the loop is bound, calculate with 20 cm more tape.
  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  17 32 11 wrap -> 162
  13 13 13 wrap -> 124
  1  3  1  wrap -> 32

  wrap(17, 32, 11)  =>  162
  wrap(13, 13, 13)  =>  124
  wrap( 1,  3,  1)  =>   32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

Notes: 
height, width and length will always be >0 
The ribbon and the bow on the present looks like this:
========================================
URL: https://www.codewars.com/kata/5d6f49d85e45290016bf4718
–ó–∞–¥–∞—á–∞:
It's your best friend's birthday! You already bought a box for the present. Now you want to pack the present in the box. You want to decorate the box with a ribbon and a bow.
But how much cm of ribbon do you need?
Write the method wrap that calculates that!
A box has a height, a width and a length (in cm). The ribbon is crossed on the side with the largest area. Opposite this side (also the side with the largest area) the loop is bound, calculate with 20 cm more tape.
  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

  17 32 11 wrap -> 162
  13 13 13 wrap -> 124
  1  3  1  wrap -> 32

  wrap(17, 32, 11)  =>  162
  wrap(13, 13, 13)  =>  124
  wrap( 1,  3,  1)  =>   32

  wrap(17,32,11) => 162
  wrap(13,13,13) => 124
  wrap(1,3,1) => 32

Notes: 
height, width and length will always be >0 
The ribbon and the bow on the present looks like this:
========================================
URL: https://www.codewars.com/kata/5d532b1893309000125cc43d
–ó–∞–¥–∞—á–∞:
Your task is to add up letters to one letter.
The function will be given a variable amount of arguments, each one being a letter to add.
Notes:

Letters will always be lowercase.
Letters can overflow (see second to last example of the description)
If no letters are given, the function should return 'z'

Examples:
addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' # notice the letters overflowing
addLetters() = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

add_letters(c('a', 'b', 'c')) = 'f'
add_letters(c('a', 'b')) = 'c'
add_letters(c('z')) = 'z'
add_letters(c('z', 'a')) = 'a'
add_letters(c('y', 'c', 'b')) = 'd' # notice the letters overflowing
add_letters(c()) = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

{ "a" "b" "c" } add-letters ! "f"
{ "a" "b" } add-letters ! "c"
{ "z" } add-letters ! "z"
{ "z" "a" } add-letters ! "a"
{ "y" "c" "b" } add-letters ! "d" ! notice the letters overflowing
{ } add-letters ! "z"

add_letters({'a', 'b', 'c'}) = 'f'
add_letters({'a', 'b'}) = 'c'
add_letters({'z'}) = 'z'
add_letters({'z', 'a'}) = 'a'
add_letters({'y', 'c', 'b'}) = 'd' // notice the letters overflowing
add_letters({}) = 'z'

addLetters({'a', 'b', 'c'}) = 'f'
addLetters({'a', 'b'}) = 'c'
addLetters({'z'}) = 'z'
addLetters({'z', 'a'}) = 'a'
addLetters({'y', 'c', 'b'}) = 'd' -- notice the letters overflowing
addLetters({}) = 'z'

addLetters(@['a', 'b', 'c']) = 'f'
addLetters(@['a', 'b']) = 'c'
addLetters(@['z']) = 'z'
addLetters(@['z', 'a']) = 'a'
addLetters(@['y', 'c', 'b']) = 'd' # notice the letters overflowing
addLetters(@[]) = 'z'

AddLetters(@('a', 'b', 'c')) = 'f'
AddLetters(@('a', 'b')) = 'c'
AddLetters(@('z')) = 'z'
AddLetters(@('z', 'a')) = 'a'
AddLetters(@('y', 'c', 'b')) = 'd' # notice the letters overflowing
AddLetters(@()) = 'z'

add_letters(vec!['a', 'b', 'c']) = 'f'
add_letters(vec!['a', 'b']) = 'c'
add_letters(vec!['z']) = 'z'
add_letters(vec!['z', 'a']) = 'a'
add_letters(vec!['y', 'c', 'b']) = 'd' // notice the letters overflowing
add_letters(vec![]) = 'z'

AddLetters(new char[] {'a', 'b', 'c'}) = 'f'
AddLetters(new char[] {'a', 'b'}) = 'c'
AddLetters(new char[] {'z'}) = 'z'
AddLetters(new char[] {'z', 'a'}) = 'a'
AddLetters(new char[] {'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters(new char[] {}) = 'z'

AddLetters(New Char() {"a"C, "b"C, "c"C}) = "f"C
AddLetters(New Char() {"a"C, "b"C}) = "c"C
AddLetters(New Char() {"z"C}) = "z"C
AddLetters(New Char() {"z"C, "a"C}) = "a"C
AddLetters(New Char() {"y"C, "c"C, "b"C}) = "d"C ' notice the letters overflowing
AddLetters(New Char() {}) = "z"C

AddLetters([]rune{'a', 'b', 'c'}) = 'f'
AddLetters([]rune{'a', 'b'}) = 'c'
AddLetters([]rune{'z'}) = 'z'
AddLetters([]rune{'z', 'a'}) = 'a'
AddLetters([]rune{'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters([]rune{}) = 'z'

add_letters(['a', 'b', 'c']) = 'f'
add_letters(['a', 'b']) = 'c'
add_letters(['z']) = 'z'
add_letters(['z', 'a']) = 'a' # note single quotes, we work with Chars
add_letters(['y', 'c', 'b']) = 'd' # notice the letters overflowing
add_letters([] of Char) = 'z'

add_letters(["a", "b", "c"]) = "f"
add_letters(["a", "b"]) = "c"
add_letters(["z"]) = "z"
add_letters(["z", "a"]) = "a"
add_letters(["y", "c", "b"]) = "d" # notice the letters overflowing
add_letters([]) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

add_letters([a, b, c]) = f
add_letters([a, b]) = c
add_letters([z]) = z
add_letters([z, a]) = a
add_letters([y, c, b]) = d % notice the letters overflowing
add_letters([]) = z

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters(<String>[]) = 'z'

addLetters([|"a", "b", "c"|]) = "f"
addLetters([|"a", "b"|]) = "c"
addLetters([|"z"|]) = "z"
addLetters([|"z", "a"|]) = "a"
addLetters([|"y", "c", "b"|]) = "d" /* notice the letters overflowing */
addLetters([||]) = "z"

addletters('a', 'b', 'c') = 'f'
addletters('a', 'b') = 'c'
addletters('z') = 'z'
addletters('z', 'a') = 'a' # note single quotes, we work with Chars
addletters('y', 'c', 'b') = 'd' # notice the letters overflowing
addletters() = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

add_letters(3, {'a', 'b', 'c'}) == 'f'
add_letters(2, {'a', 'b'})      == 'c'
add_letters(1, {'z'})           == 'z'
add_letters(2, {'z', 'a'})      == 'a'
add_letters(3, {'y', 'c', 'b'}) == 'd' // notice letters overflowing
add_letters(0, {})              == 'z'

addLetters("a", "b", "c") = "f"
addLetters("a", "b") = "c"
addLetters("z") = "z"
addLetters("z", "a") = "a"
addLetters("y", "c", "b") = "d" // notice the letters overflowing
addLetters() = "z"

addLetters(listOf("a", "b", "c")) = "f"
addLetters(listOf("a", "b")) = "c"
addLetters(listOf("z")) = "z"
addLetters(listOf("z", "a")) = "a"
addLetters(listOf("y", "c", "b")) = "d" // notice the letters overflowing
addLetters(listOf()) = "z"

addLetters(List('a', 'b', 'c')) = 'f'
addLetters(List('a', 'b')) = 'c'
addLetters(List('z')) = 'z'
addLetters(List('z', 'a')) = 'a'
addLetters(List('y', 'c', 'b')) = 'd' // notice the letters overflowing
addLetters(List()) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([]) = 'z'

addLetters({'a', 'b', 'c'}, 3) = 'f'
addLetters({'a', 'b'}, 2) = 'c'
addLetters({'z'}, 1) = 'z'
addLetters({'z', 'a'}, 2) = 'a'
addLetters({'y', 'c', 'b'}, 3) = 'd' // notice the letters overflowing
addLetters({}, 0) = 'z'

table(letter: ["a", "b", "c"]) = "f"
table(letter: ["a", "b"]) = "c"
table(letter: ["z"]) = "z"
table(letter: ["z", "a"]) = "a"
table(letter: ["y", "c", "b"]) = "d" -- notice the letters overflowing
table(letter: []) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

run_shell(args: ['abc']) = "f"
run_shell(args: ['ab']) = "c"
run_shell(args: ['z']) = "z"
run_shell(args: ['za']) = "a"
run_shell(args: ['ycb']) = "d" # notice the letters overflowing
run_shell(args: ['']) = "z"

(add-letters '(#\a #\b #\c)) ; #\f
(add-letters '(#\z)) ; #\z
(add-letters '(#\a #\b)) ; #\c
(add-letters '(#\c)) ; #\c
(add-letters '(#\z #\a)) ; #\a
(add-letters '(#\y #\c #\b)) ; #\d ; notice the letters overflowing
(add-letters '()) ; #\z

(add-letters [\a \b \c]) ;; \f
(add-letters [\z]) ;; \z
(add-letters [\a \b]) ;; \c
(add-letters [\c]) ;; \c
(add-letters [\z \a]) ;; \a
(add-letters [\y \c \b]) ;; \d ;; notice the letters overflowing
(add-letters []) ;; \z

runBF('abc\0') == 'f'
runBF('ab\0') == 'c'
runBF('z\0') == 'z'
runBF('za\0') == 'a'
runBF('ycb\0') == 'd' // notice the letters overflowing
runBF('\0') == 'z'

addLetters(['a', 'b', 'c'] = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([' ']) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

Confused? Roll your mouse/tap over here
========================================
URL: https://www.codewars.com/kata/5d5ee4c35162d9001af7d699
–ó–∞–¥–∞—á–∞:
Your task is to add up letters to one letter.
The function will be given a variable amount of arguments, each one being a letter to add.
Notes:

Letters will always be lowercase.
Letters can overflow (see second to last example of the description)
If no letters are given, the function should return 'z'

Examples:
addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' # notice the letters overflowing
addLetters() = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

add_letters(c('a', 'b', 'c')) = 'f'
add_letters(c('a', 'b')) = 'c'
add_letters(c('z')) = 'z'
add_letters(c('z', 'a')) = 'a'
add_letters(c('y', 'c', 'b')) = 'd' # notice the letters overflowing
add_letters(c()) = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

{ "a" "b" "c" } add-letters ! "f"
{ "a" "b" } add-letters ! "c"
{ "z" } add-letters ! "z"
{ "z" "a" } add-letters ! "a"
{ "y" "c" "b" } add-letters ! "d" ! notice the letters overflowing
{ } add-letters ! "z"

add_letters({'a', 'b', 'c'}) = 'f'
add_letters({'a', 'b'}) = 'c'
add_letters({'z'}) = 'z'
add_letters({'z', 'a'}) = 'a'
add_letters({'y', 'c', 'b'}) = 'd' // notice the letters overflowing
add_letters({}) = 'z'

addLetters({'a', 'b', 'c'}) = 'f'
addLetters({'a', 'b'}) = 'c'
addLetters({'z'}) = 'z'
addLetters({'z', 'a'}) = 'a'
addLetters({'y', 'c', 'b'}) = 'd' -- notice the letters overflowing
addLetters({}) = 'z'

addLetters(@['a', 'b', 'c']) = 'f'
addLetters(@['a', 'b']) = 'c'
addLetters(@['z']) = 'z'
addLetters(@['z', 'a']) = 'a'
addLetters(@['y', 'c', 'b']) = 'd' # notice the letters overflowing
addLetters(@[]) = 'z'

AddLetters(@('a', 'b', 'c')) = 'f'
AddLetters(@('a', 'b')) = 'c'
AddLetters(@('z')) = 'z'
AddLetters(@('z', 'a')) = 'a'
AddLetters(@('y', 'c', 'b')) = 'd' # notice the letters overflowing
AddLetters(@()) = 'z'

add_letters(vec!['a', 'b', 'c']) = 'f'
add_letters(vec!['a', 'b']) = 'c'
add_letters(vec!['z']) = 'z'
add_letters(vec!['z', 'a']) = 'a'
add_letters(vec!['y', 'c', 'b']) = 'd' // notice the letters overflowing
add_letters(vec![]) = 'z'

AddLetters(new char[] {'a', 'b', 'c'}) = 'f'
AddLetters(new char[] {'a', 'b'}) = 'c'
AddLetters(new char[] {'z'}) = 'z'
AddLetters(new char[] {'z', 'a'}) = 'a'
AddLetters(new char[] {'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters(new char[] {}) = 'z'

AddLetters(New Char() {"a"C, "b"C, "c"C}) = "f"C
AddLetters(New Char() {"a"C, "b"C}) = "c"C
AddLetters(New Char() {"z"C}) = "z"C
AddLetters(New Char() {"z"C, "a"C}) = "a"C
AddLetters(New Char() {"y"C, "c"C, "b"C}) = "d"C ' notice the letters overflowing
AddLetters(New Char() {}) = "z"C

AddLetters([]rune{'a', 'b', 'c'}) = 'f'
AddLetters([]rune{'a', 'b'}) = 'c'
AddLetters([]rune{'z'}) = 'z'
AddLetters([]rune{'z', 'a'}) = 'a'
AddLetters([]rune{'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters([]rune{}) = 'z'

add_letters(['a', 'b', 'c']) = 'f'
add_letters(['a', 'b']) = 'c'
add_letters(['z']) = 'z'
add_letters(['z', 'a']) = 'a' # note single quotes, we work with Chars
add_letters(['y', 'c', 'b']) = 'd' # notice the letters overflowing
add_letters([] of Char) = 'z'

add_letters(["a", "b", "c"]) = "f"
add_letters(["a", "b"]) = "c"
add_letters(["z"]) = "z"
add_letters(["z", "a"]) = "a"
add_letters(["y", "c", "b"]) = "d" # notice the letters overflowing
add_letters([]) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

add_letters([a, b, c]) = f
add_letters([a, b]) = c
add_letters([z]) = z
add_letters([z, a]) = a
add_letters([y, c, b]) = d % notice the letters overflowing
add_letters([]) = z

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters(<String>[]) = 'z'

addLetters([|"a", "b", "c"|]) = "f"
addLetters([|"a", "b"|]) = "c"
addLetters([|"z"|]) = "z"
addLetters([|"z", "a"|]) = "a"
addLetters([|"y", "c", "b"|]) = "d" /* notice the letters overflowing */
addLetters([||]) = "z"

addletters('a', 'b', 'c') = 'f'
addletters('a', 'b') = 'c'
addletters('z') = 'z'
addletters('z', 'a') = 'a' # note single quotes, we work with Chars
addletters('y', 'c', 'b') = 'd' # notice the letters overflowing
addletters() = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

add_letters(3, {'a', 'b', 'c'}) == 'f'
add_letters(2, {'a', 'b'})      == 'c'
add_letters(1, {'z'})           == 'z'
add_letters(2, {'z', 'a'})      == 'a'
add_letters(3, {'y', 'c', 'b'}) == 'd' // notice letters overflowing
add_letters(0, {})              == 'z'

addLetters("a", "b", "c") = "f"
addLetters("a", "b") = "c"
addLetters("z") = "z"
addLetters("z", "a") = "a"
addLetters("y", "c", "b") = "d" // notice the letters overflowing
addLetters() = "z"

addLetters(listOf("a", "b", "c")) = "f"
addLetters(listOf("a", "b")) = "c"
addLetters(listOf("z")) = "z"
addLetters(listOf("z", "a")) = "a"
addLetters(listOf("y", "c", "b")) = "d" // notice the letters overflowing
addLetters(listOf()) = "z"

addLetters(List('a', 'b', 'c')) = 'f'
addLetters(List('a', 'b')) = 'c'
addLetters(List('z')) = 'z'
addLetters(List('z', 'a')) = 'a'
addLetters(List('y', 'c', 'b')) = 'd' // notice the letters overflowing
addLetters(List()) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([]) = 'z'

addLetters({'a', 'b', 'c'}, 3) = 'f'
addLetters({'a', 'b'}, 2) = 'c'
addLetters({'z'}, 1) = 'z'
addLetters({'z', 'a'}, 2) = 'a'
addLetters({'y', 'c', 'b'}, 3) = 'd' // notice the letters overflowing
addLetters({}, 0) = 'z'

table(letter: ["a", "b", "c"]) = "f"
table(letter: ["a", "b"]) = "c"
table(letter: ["z"]) = "z"
table(letter: ["z", "a"]) = "a"
table(letter: ["y", "c", "b"]) = "d" -- notice the letters overflowing
table(letter: []) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

run_shell(args: ['abc']) = "f"
run_shell(args: ['ab']) = "c"
run_shell(args: ['z']) = "z"
run_shell(args: ['za']) = "a"
run_shell(args: ['ycb']) = "d" # notice the letters overflowing
run_shell(args: ['']) = "z"

(add-letters '(#\a #\b #\c)) ; #\f
(add-letters '(#\z)) ; #\z
(add-letters '(#\a #\b)) ; #\c
(add-letters '(#\c)) ; #\c
(add-letters '(#\z #\a)) ; #\a
(add-letters '(#\y #\c #\b)) ; #\d ; notice the letters overflowing
(add-letters '()) ; #\z

(add-letters [\a \b \c]) ;; \f
(add-letters [\z]) ;; \z
(add-letters [\a \b]) ;; \c
(add-letters [\c]) ;; \c
(add-letters [\z \a]) ;; \a
(add-letters [\y \c \b]) ;; \d ;; notice the letters overflowing
(add-letters []) ;; \z

runBF('abc\0') == 'f'
runBF('ab\0') == 'c'
runBF('z\0') == 'z'
runBF('za\0') == 'a'
runBF('ycb\0') == 'd' // notice the letters overflowing
runBF('\0') == 'z'

addLetters(['a', 'b', 'c'] = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([' ']) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

Confused? Roll your mouse/tap over here
========================================
URL: https://www.codewars.com/kata/5d5f5ea8e3d37b001dfd630a
–ó–∞–¥–∞—á–∞:
Your task is to add up letters to one letter.
The function will be given a variable amount of arguments, each one being a letter to add.
Notes:

Letters will always be lowercase.
Letters can overflow (see second to last example of the description)
If no letters are given, the function should return 'z'

Examples:
addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' # notice the letters overflowing
addLetters() = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

add_letters(c('a', 'b', 'c')) = 'f'
add_letters(c('a', 'b')) = 'c'
add_letters(c('z')) = 'z'
add_letters(c('z', 'a')) = 'a'
add_letters(c('y', 'c', 'b')) = 'd' # notice the letters overflowing
add_letters(c()) = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

{ "a" "b" "c" } add-letters ! "f"
{ "a" "b" } add-letters ! "c"
{ "z" } add-letters ! "z"
{ "z" "a" } add-letters ! "a"
{ "y" "c" "b" } add-letters ! "d" ! notice the letters overflowing
{ } add-letters ! "z"

add_letters({'a', 'b', 'c'}) = 'f'
add_letters({'a', 'b'}) = 'c'
add_letters({'z'}) = 'z'
add_letters({'z', 'a'}) = 'a'
add_letters({'y', 'c', 'b'}) = 'd' // notice the letters overflowing
add_letters({}) = 'z'

addLetters({'a', 'b', 'c'}) = 'f'
addLetters({'a', 'b'}) = 'c'
addLetters({'z'}) = 'z'
addLetters({'z', 'a'}) = 'a'
addLetters({'y', 'c', 'b'}) = 'd' -- notice the letters overflowing
addLetters({}) = 'z'

addLetters(@['a', 'b', 'c']) = 'f'
addLetters(@['a', 'b']) = 'c'
addLetters(@['z']) = 'z'
addLetters(@['z', 'a']) = 'a'
addLetters(@['y', 'c', 'b']) = 'd' # notice the letters overflowing
addLetters(@[]) = 'z'

AddLetters(@('a', 'b', 'c')) = 'f'
AddLetters(@('a', 'b')) = 'c'
AddLetters(@('z')) = 'z'
AddLetters(@('z', 'a')) = 'a'
AddLetters(@('y', 'c', 'b')) = 'd' # notice the letters overflowing
AddLetters(@()) = 'z'

add_letters(vec!['a', 'b', 'c']) = 'f'
add_letters(vec!['a', 'b']) = 'c'
add_letters(vec!['z']) = 'z'
add_letters(vec!['z', 'a']) = 'a'
add_letters(vec!['y', 'c', 'b']) = 'd' // notice the letters overflowing
add_letters(vec![]) = 'z'

AddLetters(new char[] {'a', 'b', 'c'}) = 'f'
AddLetters(new char[] {'a', 'b'}) = 'c'
AddLetters(new char[] {'z'}) = 'z'
AddLetters(new char[] {'z', 'a'}) = 'a'
AddLetters(new char[] {'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters(new char[] {}) = 'z'

AddLetters(New Char() {"a"C, "b"C, "c"C}) = "f"C
AddLetters(New Char() {"a"C, "b"C}) = "c"C
AddLetters(New Char() {"z"C}) = "z"C
AddLetters(New Char() {"z"C, "a"C}) = "a"C
AddLetters(New Char() {"y"C, "c"C, "b"C}) = "d"C ' notice the letters overflowing
AddLetters(New Char() {}) = "z"C

AddLetters([]rune{'a', 'b', 'c'}) = 'f'
AddLetters([]rune{'a', 'b'}) = 'c'
AddLetters([]rune{'z'}) = 'z'
AddLetters([]rune{'z', 'a'}) = 'a'
AddLetters([]rune{'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters([]rune{}) = 'z'

add_letters(['a', 'b', 'c']) = 'f'
add_letters(['a', 'b']) = 'c'
add_letters(['z']) = 'z'
add_letters(['z', 'a']) = 'a' # note single quotes, we work with Chars
add_letters(['y', 'c', 'b']) = 'd' # notice the letters overflowing
add_letters([] of Char) = 'z'

add_letters(["a", "b", "c"]) = "f"
add_letters(["a", "b"]) = "c"
add_letters(["z"]) = "z"
add_letters(["z", "a"]) = "a"
add_letters(["y", "c", "b"]) = "d" # notice the letters overflowing
add_letters([]) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

add_letters([a, b, c]) = f
add_letters([a, b]) = c
add_letters([z]) = z
add_letters([z, a]) = a
add_letters([y, c, b]) = d % notice the letters overflowing
add_letters([]) = z

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters(<String>[]) = 'z'

addLetters([|"a", "b", "c"|]) = "f"
addLetters([|"a", "b"|]) = "c"
addLetters([|"z"|]) = "z"
addLetters([|"z", "a"|]) = "a"
addLetters([|"y", "c", "b"|]) = "d" /* notice the letters overflowing */
addLetters([||]) = "z"

addletters('a', 'b', 'c') = 'f'
addletters('a', 'b') = 'c'
addletters('z') = 'z'
addletters('z', 'a') = 'a' # note single quotes, we work with Chars
addletters('y', 'c', 'b') = 'd' # notice the letters overflowing
addletters() = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

add_letters(3, {'a', 'b', 'c'}) == 'f'
add_letters(2, {'a', 'b'})      == 'c'
add_letters(1, {'z'})           == 'z'
add_letters(2, {'z', 'a'})      == 'a'
add_letters(3, {'y', 'c', 'b'}) == 'd' // notice letters overflowing
add_letters(0, {})              == 'z'

addLetters("a", "b", "c") = "f"
addLetters("a", "b") = "c"
addLetters("z") = "z"
addLetters("z", "a") = "a"
addLetters("y", "c", "b") = "d" // notice the letters overflowing
addLetters() = "z"

addLetters(listOf("a", "b", "c")) = "f"
addLetters(listOf("a", "b")) = "c"
addLetters(listOf("z")) = "z"
addLetters(listOf("z", "a")) = "a"
addLetters(listOf("y", "c", "b")) = "d" // notice the letters overflowing
addLetters(listOf()) = "z"

addLetters(List('a', 'b', 'c')) = 'f'
addLetters(List('a', 'b')) = 'c'
addLetters(List('z')) = 'z'
addLetters(List('z', 'a')) = 'a'
addLetters(List('y', 'c', 'b')) = 'd' // notice the letters overflowing
addLetters(List()) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([]) = 'z'

addLetters({'a', 'b', 'c'}, 3) = 'f'
addLetters({'a', 'b'}, 2) = 'c'
addLetters({'z'}, 1) = 'z'
addLetters({'z', 'a'}, 2) = 'a'
addLetters({'y', 'c', 'b'}, 3) = 'd' // notice the letters overflowing
addLetters({}, 0) = 'z'

table(letter: ["a", "b", "c"]) = "f"
table(letter: ["a", "b"]) = "c"
table(letter: ["z"]) = "z"
table(letter: ["z", "a"]) = "a"
table(letter: ["y", "c", "b"]) = "d" -- notice the letters overflowing
table(letter: []) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

run_shell(args: ['abc']) = "f"
run_shell(args: ['ab']) = "c"
run_shell(args: ['z']) = "z"
run_shell(args: ['za']) = "a"
run_shell(args: ['ycb']) = "d" # notice the letters overflowing
run_shell(args: ['']) = "z"

(add-letters '(#\a #\b #\c)) ; #\f
(add-letters '(#\z)) ; #\z
(add-letters '(#\a #\b)) ; #\c
(add-letters '(#\c)) ; #\c
(add-letters '(#\z #\a)) ; #\a
(add-letters '(#\y #\c #\b)) ; #\d ; notice the letters overflowing
(add-letters '()) ; #\z

(add-letters [\a \b \c]) ;; \f
(add-letters [\z]) ;; \z
(add-letters [\a \b]) ;; \c
(add-letters [\c]) ;; \c
(add-letters [\z \a]) ;; \a
(add-letters [\y \c \b]) ;; \d ;; notice the letters overflowing
(add-letters []) ;; \z

runBF('abc\0') == 'f'
runBF('ab\0') == 'c'
runBF('z\0') == 'z'
runBF('za\0') == 'a'
runBF('ycb\0') == 'd' // notice the letters overflowing
runBF('\0') == 'z'

addLetters(['a', 'b', 'c'] = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([' ']) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

Confused? Roll your mouse/tap over here
========================================
URL: https://www.codewars.com/kata/5d62961d18198b000e2f22b3
–ó–∞–¥–∞—á–∞:
Your task is to add up letters to one letter.
The function will be given a variable amount of arguments, each one being a letter to add.
Notes:

Letters will always be lowercase.
Letters can overflow (see second to last example of the description)
If no letters are given, the function should return 'z'

Examples:
addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' # notice the letters overflowing
addLetters() = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

add_letters(c('a', 'b', 'c')) = 'f'
add_letters(c('a', 'b')) = 'c'
add_letters(c('z')) = 'z'
add_letters(c('z', 'a')) = 'a'
add_letters(c('y', 'c', 'b')) = 'd' # notice the letters overflowing
add_letters(c()) = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

{ "a" "b" "c" } add-letters ! "f"
{ "a" "b" } add-letters ! "c"
{ "z" } add-letters ! "z"
{ "z" "a" } add-letters ! "a"
{ "y" "c" "b" } add-letters ! "d" ! notice the letters overflowing
{ } add-letters ! "z"

add_letters({'a', 'b', 'c'}) = 'f'
add_letters({'a', 'b'}) = 'c'
add_letters({'z'}) = 'z'
add_letters({'z', 'a'}) = 'a'
add_letters({'y', 'c', 'b'}) = 'd' // notice the letters overflowing
add_letters({}) = 'z'

addLetters({'a', 'b', 'c'}) = 'f'
addLetters({'a', 'b'}) = 'c'
addLetters({'z'}) = 'z'
addLetters({'z', 'a'}) = 'a'
addLetters({'y', 'c', 'b'}) = 'd' -- notice the letters overflowing
addLetters({}) = 'z'

addLetters(@['a', 'b', 'c']) = 'f'
addLetters(@['a', 'b']) = 'c'
addLetters(@['z']) = 'z'
addLetters(@['z', 'a']) = 'a'
addLetters(@['y', 'c', 'b']) = 'd' # notice the letters overflowing
addLetters(@[]) = 'z'

AddLetters(@('a', 'b', 'c')) = 'f'
AddLetters(@('a', 'b')) = 'c'
AddLetters(@('z')) = 'z'
AddLetters(@('z', 'a')) = 'a'
AddLetters(@('y', 'c', 'b')) = 'd' # notice the letters overflowing
AddLetters(@()) = 'z'

add_letters(vec!['a', 'b', 'c']) = 'f'
add_letters(vec!['a', 'b']) = 'c'
add_letters(vec!['z']) = 'z'
add_letters(vec!['z', 'a']) = 'a'
add_letters(vec!['y', 'c', 'b']) = 'd' // notice the letters overflowing
add_letters(vec![]) = 'z'

AddLetters(new char[] {'a', 'b', 'c'}) = 'f'
AddLetters(new char[] {'a', 'b'}) = 'c'
AddLetters(new char[] {'z'}) = 'z'
AddLetters(new char[] {'z', 'a'}) = 'a'
AddLetters(new char[] {'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters(new char[] {}) = 'z'

AddLetters(New Char() {"a"C, "b"C, "c"C}) = "f"C
AddLetters(New Char() {"a"C, "b"C}) = "c"C
AddLetters(New Char() {"z"C}) = "z"C
AddLetters(New Char() {"z"C, "a"C}) = "a"C
AddLetters(New Char() {"y"C, "c"C, "b"C}) = "d"C ' notice the letters overflowing
AddLetters(New Char() {}) = "z"C

AddLetters([]rune{'a', 'b', 'c'}) = 'f'
AddLetters([]rune{'a', 'b'}) = 'c'
AddLetters([]rune{'z'}) = 'z'
AddLetters([]rune{'z', 'a'}) = 'a'
AddLetters([]rune{'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters([]rune{}) = 'z'

add_letters(['a', 'b', 'c']) = 'f'
add_letters(['a', 'b']) = 'c'
add_letters(['z']) = 'z'
add_letters(['z', 'a']) = 'a' # note single quotes, we work with Chars
add_letters(['y', 'c', 'b']) = 'd' # notice the letters overflowing
add_letters([] of Char) = 'z'

add_letters(["a", "b", "c"]) = "f"
add_letters(["a", "b"]) = "c"
add_letters(["z"]) = "z"
add_letters(["z", "a"]) = "a"
add_letters(["y", "c", "b"]) = "d" # notice the letters overflowing
add_letters([]) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

add_letters([a, b, c]) = f
add_letters([a, b]) = c
add_letters([z]) = z
add_letters([z, a]) = a
add_letters([y, c, b]) = d % notice the letters overflowing
add_letters([]) = z

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters(<String>[]) = 'z'

addLetters([|"a", "b", "c"|]) = "f"
addLetters([|"a", "b"|]) = "c"
addLetters([|"z"|]) = "z"
addLetters([|"z", "a"|]) = "a"
addLetters([|"y", "c", "b"|]) = "d" /* notice the letters overflowing */
addLetters([||]) = "z"

addletters('a', 'b', 'c') = 'f'
addletters('a', 'b') = 'c'
addletters('z') = 'z'
addletters('z', 'a') = 'a' # note single quotes, we work with Chars
addletters('y', 'c', 'b') = 'd' # notice the letters overflowing
addletters() = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

add_letters(3, {'a', 'b', 'c'}) == 'f'
add_letters(2, {'a', 'b'})      == 'c'
add_letters(1, {'z'})           == 'z'
add_letters(2, {'z', 'a'})      == 'a'
add_letters(3, {'y', 'c', 'b'}) == 'd' // notice letters overflowing
add_letters(0, {})              == 'z'

addLetters("a", "b", "c") = "f"
addLetters("a", "b") = "c"
addLetters("z") = "z"
addLetters("z", "a") = "a"
addLetters("y", "c", "b") = "d" // notice the letters overflowing
addLetters() = "z"

addLetters(listOf("a", "b", "c")) = "f"
addLetters(listOf("a", "b")) = "c"
addLetters(listOf("z")) = "z"
addLetters(listOf("z", "a")) = "a"
addLetters(listOf("y", "c", "b")) = "d" // notice the letters overflowing
addLetters(listOf()) = "z"

addLetters(List('a', 'b', 'c')) = 'f'
addLetters(List('a', 'b')) = 'c'
addLetters(List('z')) = 'z'
addLetters(List('z', 'a')) = 'a'
addLetters(List('y', 'c', 'b')) = 'd' // notice the letters overflowing
addLetters(List()) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([]) = 'z'

addLetters({'a', 'b', 'c'}, 3) = 'f'
addLetters({'a', 'b'}, 2) = 'c'
addLetters({'z'}, 1) = 'z'
addLetters({'z', 'a'}, 2) = 'a'
addLetters({'y', 'c', 'b'}, 3) = 'd' // notice the letters overflowing
addLetters({}, 0) = 'z'

table(letter: ["a", "b", "c"]) = "f"
table(letter: ["a", "b"]) = "c"
table(letter: ["z"]) = "z"
table(letter: ["z", "a"]) = "a"
table(letter: ["y", "c", "b"]) = "d" -- notice the letters overflowing
table(letter: []) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

run_shell(args: ['abc']) = "f"
run_shell(args: ['ab']) = "c"
run_shell(args: ['z']) = "z"
run_shell(args: ['za']) = "a"
run_shell(args: ['ycb']) = "d" # notice the letters overflowing
run_shell(args: ['']) = "z"

(add-letters '(#\a #\b #\c)) ; #\f
(add-letters '(#\z)) ; #\z
(add-letters '(#\a #\b)) ; #\c
(add-letters '(#\c)) ; #\c
(add-letters '(#\z #\a)) ; #\a
(add-letters '(#\y #\c #\b)) ; #\d ; notice the letters overflowing
(add-letters '()) ; #\z

(add-letters [\a \b \c]) ;; \f
(add-letters [\z]) ;; \z
(add-letters [\a \b]) ;; \c
(add-letters [\c]) ;; \c
(add-letters [\z \a]) ;; \a
(add-letters [\y \c \b]) ;; \d ;; notice the letters overflowing
(add-letters []) ;; \z

runBF('abc\0') == 'f'
runBF('ab\0') == 'c'
runBF('z\0') == 'z'
runBF('za\0') == 'a'
runBF('ycb\0') == 'd' // notice the letters overflowing
runBF('\0') == 'z'

addLetters(['a', 'b', 'c'] = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([' ']) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

Confused? Roll your mouse/tap over here
========================================
URL: https://www.codewars.com/kata/5d50e3914861a500121e1958
–ó–∞–¥–∞—á–∞:
Your task is to add up letters to one letter.
The function will be given a variable amount of arguments, each one being a letter to add.
Notes:

Letters will always be lowercase.
Letters can overflow (see second to last example of the description)
If no letters are given, the function should return 'z'

Examples:
addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
addLetters() = 'z'

addLetters('a', 'b', 'c') = 'f'
addLetters('a', 'b') = 'c'
addLetters('z') = 'z'
addLetters('z', 'a') = 'a'
addLetters('y', 'c', 'b') = 'd' # notice the letters overflowing
addLetters() = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

add_letters(c('a', 'b', 'c')) = 'f'
add_letters(c('a', 'b')) = 'c'
add_letters(c('z')) = 'z'
add_letters(c('z', 'a')) = 'a'
add_letters(c('y', 'c', 'b')) = 'd' # notice the letters overflowing
add_letters(c()) = 'z'

add_letters('a', 'b', 'c') = 'f'
add_letters('a', 'b') = 'c'
add_letters('z') = 'z'
add_letters('z', 'a') = 'a'
add_letters('y', 'c', 'b') = 'd' # notice the letters overflowing
add_letters() = 'z'

{ "a" "b" "c" } add-letters ! "f"
{ "a" "b" } add-letters ! "c"
{ "z" } add-letters ! "z"
{ "z" "a" } add-letters ! "a"
{ "y" "c" "b" } add-letters ! "d" ! notice the letters overflowing
{ } add-letters ! "z"

add_letters({'a', 'b', 'c'}) = 'f'
add_letters({'a', 'b'}) = 'c'
add_letters({'z'}) = 'z'
add_letters({'z', 'a'}) = 'a'
add_letters({'y', 'c', 'b'}) = 'd' // notice the letters overflowing
add_letters({}) = 'z'

addLetters({'a', 'b', 'c'}) = 'f'
addLetters({'a', 'b'}) = 'c'
addLetters({'z'}) = 'z'
addLetters({'z', 'a'}) = 'a'
addLetters({'y', 'c', 'b'}) = 'd' -- notice the letters overflowing
addLetters({}) = 'z'

addLetters(@['a', 'b', 'c']) = 'f'
addLetters(@['a', 'b']) = 'c'
addLetters(@['z']) = 'z'
addLetters(@['z', 'a']) = 'a'
addLetters(@['y', 'c', 'b']) = 'd' # notice the letters overflowing
addLetters(@[]) = 'z'

AddLetters(@('a', 'b', 'c')) = 'f'
AddLetters(@('a', 'b')) = 'c'
AddLetters(@('z')) = 'z'
AddLetters(@('z', 'a')) = 'a'
AddLetters(@('y', 'c', 'b')) = 'd' # notice the letters overflowing
AddLetters(@()) = 'z'

add_letters(vec!['a', 'b', 'c']) = 'f'
add_letters(vec!['a', 'b']) = 'c'
add_letters(vec!['z']) = 'z'
add_letters(vec!['z', 'a']) = 'a'
add_letters(vec!['y', 'c', 'b']) = 'd' // notice the letters overflowing
add_letters(vec![]) = 'z'

AddLetters(new char[] {'a', 'b', 'c'}) = 'f'
AddLetters(new char[] {'a', 'b'}) = 'c'
AddLetters(new char[] {'z'}) = 'z'
AddLetters(new char[] {'z', 'a'}) = 'a'
AddLetters(new char[] {'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters(new char[] {}) = 'z'

AddLetters(New Char() {"a"C, "b"C, "c"C}) = "f"C
AddLetters(New Char() {"a"C, "b"C}) = "c"C
AddLetters(New Char() {"z"C}) = "z"C
AddLetters(New Char() {"z"C, "a"C}) = "a"C
AddLetters(New Char() {"y"C, "c"C, "b"C}) = "d"C ' notice the letters overflowing
AddLetters(New Char() {}) = "z"C

AddLetters([]rune{'a', 'b', 'c'}) = 'f'
AddLetters([]rune{'a', 'b'}) = 'c'
AddLetters([]rune{'z'}) = 'z'
AddLetters([]rune{'z', 'a'}) = 'a'
AddLetters([]rune{'y', 'c', 'b'}) = 'd' // notice the letters overflowing
AddLetters([]rune{}) = 'z'

add_letters(['a', 'b', 'c']) = 'f'
add_letters(['a', 'b']) = 'c'
add_letters(['z']) = 'z'
add_letters(['z', 'a']) = 'a' # note single quotes, we work with Chars
add_letters(['y', 'c', 'b']) = 'd' # notice the letters overflowing
add_letters([] of Char) = 'z'

add_letters(["a", "b", "c"]) = "f"
add_letters(["a", "b"]) = "c"
add_letters(["z"]) = "z"
add_letters(["z", "a"]) = "a"
add_letters(["y", "c", "b"]) = "d" # notice the letters overflowing
add_letters([]) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

add_letters([a, b, c]) = f
add_letters([a, b]) = c
add_letters([z]) = z
add_letters([z, a]) = a
add_letters([y, c, b]) = d % notice the letters overflowing
add_letters([]) = z

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters(<String>[]) = 'z'

addLetters([|"a", "b", "c"|]) = "f"
addLetters([|"a", "b"|]) = "c"
addLetters([|"z"|]) = "z"
addLetters([|"z", "a"|]) = "a"
addLetters([|"y", "c", "b"|]) = "d" /* notice the letters overflowing */
addLetters([||]) = "z"

addletters('a', 'b', 'c') = 'f'
addletters('a', 'b') = 'c'
addletters('z') = 'z'
addletters('z', 'a') = 'a' # note single quotes, we work with Chars
addletters('y', 'c', 'b') = 'd' # notice the letters overflowing
addletters() = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

addLetters ['a', 'b', 'c'] = 'f'
addLetters ['a', 'b'] = 'c'
addLetters ['z'] = 'z'
addLetters ['z', 'a'] = 'a'
addLetters ['y', 'c', 'b'] = 'd' -- notice the letters overflowing
addLetters [] = 'z'

add_letters(3, {'a', 'b', 'c'}) == 'f'
add_letters(2, {'a', 'b'})      == 'c'
add_letters(1, {'z'})           == 'z'
add_letters(2, {'z', 'a'})      == 'a'
add_letters(3, {'y', 'c', 'b'}) == 'd' // notice letters overflowing
add_letters(0, {})              == 'z'

addLetters("a", "b", "c") = "f"
addLetters("a", "b") = "c"
addLetters("z") = "z"
addLetters("z", "a") = "a"
addLetters("y", "c", "b") = "d" // notice the letters overflowing
addLetters() = "z"

addLetters(listOf("a", "b", "c")) = "f"
addLetters(listOf("a", "b")) = "c"
addLetters(listOf("z")) = "z"
addLetters(listOf("z", "a")) = "a"
addLetters(listOf("y", "c", "b")) = "d" // notice the letters overflowing
addLetters(listOf()) = "z"

addLetters(List('a', 'b', 'c')) = 'f'
addLetters(List('a', 'b')) = 'c'
addLetters(List('z')) = 'z'
addLetters(List('z', 'a')) = 'a'
addLetters(List('y', 'c', 'b')) = 'd' // notice the letters overflowing
addLetters(List()) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

addLetters(['a', 'b', 'c']) = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([]) = 'z'

addLetters({'a', 'b', 'c'}, 3) = 'f'
addLetters({'a', 'b'}, 2) = 'c'
addLetters({'z'}, 1) = 'z'
addLetters({'z', 'a'}, 2) = 'a'
addLetters({'y', 'c', 'b'}, 3) = 'd' // notice the letters overflowing
addLetters({}, 0) = 'z'

table(letter: ["a", "b", "c"]) = "f"
table(letter: ["a", "b"]) = "c"
table(letter: ["z"]) = "z"
table(letter: ["z", "a"]) = "a"
table(letter: ["y", "c", "b"]) = "d" -- notice the letters overflowing
table(letter: []) = "z"

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

run_shell(args: ['abc']) = "f"
run_shell(args: ['ab']) = "c"
run_shell(args: ['z']) = "z"
run_shell(args: ['za']) = "a"
run_shell(args: ['ycb']) = "d" # notice the letters overflowing
run_shell(args: ['']) = "z"

(add-letters '(#\a #\b #\c)) ; #\f
(add-letters '(#\z)) ; #\z
(add-letters '(#\a #\b)) ; #\c
(add-letters '(#\c)) ; #\c
(add-letters '(#\z #\a)) ; #\a
(add-letters '(#\y #\c #\b)) ; #\d ; notice the letters overflowing
(add-letters '()) ; #\z

(add-letters [\a \b \c]) ;; \f
(add-letters [\z]) ;; \z
(add-letters [\a \b]) ;; \c
(add-letters [\c]) ;; \c
(add-letters [\z \a]) ;; \a
(add-letters [\y \c \b]) ;; \d ;; notice the letters overflowing
(add-letters []) ;; \z

runBF('abc\0') == 'f'
runBF('ab\0') == 'c'
runBF('z\0') == 'z'
runBF('za\0') == 'a'
runBF('ycb\0') == 'd' // notice the letters overflowing
runBF('\0') == 'z'

addLetters(['a', 'b', 'c'] = 'f'
addLetters(['a', 'b']) = 'c'
addLetters(['z']) = 'z'
addLetters(['z', 'a']) = 'a'
addLetters(['y', 'c', 'b']) = 'd' // notice the letters overflowing
addLetters([' ']) = 'z'

addLetters(["a", "b", "c"]) = "f"
addLetters(["a", "b"]) = "c"
addLetters(["z"]) = "z"
addLetters(["z", "a"]) = "a"
addLetters(["y", "c", "b"]) = "d" // notice the letters overflowing
addLetters([]) = "z"

Confused? Roll your mouse/tap over here
========================================
URL: https://www.codewars.com/kata/5d4dd5c9af0c4c0019247110
–ó–∞–¥–∞—á–∞:
Inside of the city there are many gangs, each with differing numbers of members wielding different weapons and possessing different strength levels. The gangs do not really want to fight one another, and so the "If you can't beat 'em, join 'em" rule applies. The gangs start combining with the most powerful gangs being joined by the weaker gangs until there is one gang left.
Challenge:
You are given a list of lists. Inside of the interior lists are numbers. Join the lists together by descending total list value ending up with one final list.
Simple example:
cant_beat_so_join([[1,2], [3,4], [5,6], [7,8], [9]]) -> [7, 8, 5, 6, 9, 3, 4, 1, 2]


In the example above, [7, 8] are the first in the list because they have the highest value


They are followed by [5, 6]
That is followed by [9] which comes before [3, 4] because the list of [9] is greater
It ends with [1, 2] which has the least amount of value

More examples:
cant_beat_so_join([[5, 1],[9, 14],[17, 23],[4, 1],[0, 1]]) -> [17, 23, 9, 14, 5, 1, 4, 1, 0, 1]
cant_beat_so_join([[13, 37], [43, 17], [2,3], [45,64], [1,9]]) -> [45, 64, 43, 17, 13, 37, 1, 9, 2, 3]
cant_beat_so_join([[], [], [], []]) -> []
cant_beat_so_join([[], [], [0], []]) -> [0]
cant_beat_so_join([[1,0,1,0,1,0], [0,1,0,0,1,0,0,1], [0], []]) -> [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]

In the case of more than one list sharing the same sum, place them in the same order that they were in the argument:
cant_beat_so_join([[0,1,1,1], [1,0,1,1], [1,1,0,1], [3]]) -> [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 3]
========================================
URL: https://www.codewars.com/kata/5d4c6809089c6e5031f189ed
–ó–∞–¥–∞—á–∞:
Inside of the city there are many gangs, each with differing numbers of members wielding different weapons and possessing different strength levels. The gangs do not really want to fight one another, and so the "If you can't beat 'em, join 'em" rule applies. The gangs start combining with the most powerful gangs being joined by the weaker gangs until there is one gang left.
Challenge:
You are given a list of lists. Inside of the interior lists are numbers. Join the lists together by descending total list value ending up with one final list.
Simple example:
cant_beat_so_join([[1,2], [3,4], [5,6], [7,8], [9]]) -> [7, 8, 5, 6, 9, 3, 4, 1, 2]


In the example above, [7, 8] are the first in the list because they have the highest value


They are followed by [5, 6]
That is followed by [9] which comes before [3, 4] because the list of [9] is greater
It ends with [1, 2] which has the least amount of value

More examples:
cant_beat_so_join([[5, 1],[9, 14],[17, 23],[4, 1],[0, 1]]) -> [17, 23, 9, 14, 5, 1, 4, 1, 0, 1]
cant_beat_so_join([[13, 37], [43, 17], [2,3], [45,64], [1,9]]) -> [45, 64, 43, 17, 13, 37, 1, 9, 2, 3]
cant_beat_so_join([[], [], [], []]) -> []
cant_beat_so_join([[], [], [0], []]) -> [0]
cant_beat_so_join([[1,0,1,0,1,0], [0,1,0,0,1,0,0,1], [0], []]) -> [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]

In the case of more than one list sharing the same sum, place them in the same order that they were in the argument:
cant_beat_so_join([[0,1,1,1], [1,0,1,1], [1,1,0,1], [3]]) -> [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 3]
========================================
URL: https://www.codewars.com/kata/5d472159d4f8c3001d81b1f8
–ó–∞–¥–∞—á–∞:
Inside of the city there are many gangs, each with differing numbers of members wielding different weapons and possessing different strength levels. The gangs do not really want to fight one another, and so the "If you can't beat 'em, join 'em" rule applies. The gangs start combining with the most powerful gangs being joined by the weaker gangs until there is one gang left.
Challenge:
You are given a list of lists. Inside of the interior lists are numbers. Join the lists together by descending total list value ending up with one final list.
Simple example:
cant_beat_so_join([[1,2], [3,4], [5,6], [7,8], [9]]) -> [7, 8, 5, 6, 9, 3, 4, 1, 2]


In the example above, [7, 8] are the first in the list because they have the highest value


They are followed by [5, 6]
That is followed by [9] which comes before [3, 4] because the list of [9] is greater
It ends with [1, 2] which has the least amount of value

More examples:
cant_beat_so_join([[5, 1],[9, 14],[17, 23],[4, 1],[0, 1]]) -> [17, 23, 9, 14, 5, 1, 4, 1, 0, 1]
cant_beat_so_join([[13, 37], [43, 17], [2,3], [45,64], [1,9]]) -> [45, 64, 43, 17, 13, 37, 1, 9, 2, 3]
cant_beat_so_join([[], [], [], []]) -> []
cant_beat_so_join([[], [], [0], []]) -> [0]
cant_beat_so_join([[1,0,1,0,1,0], [0,1,0,0,1,0,0,1], [0], []]) -> [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]

In the case of more than one list sharing the same sum, place them in the same order that they were in the argument:
cant_beat_so_join([[0,1,1,1], [1,0,1,1], [1,1,0,1], [3]]) -> [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 3]
========================================
URL: https://www.codewars.com/kata/5d37899a3b34c6002df273ee
–ó–∞–¥–∞—á–∞:
Inside of the city there are many gangs, each with differing numbers of members wielding different weapons and possessing different strength levels. The gangs do not really want to fight one another, and so the "If you can't beat 'em, join 'em" rule applies. The gangs start combining with the most powerful gangs being joined by the weaker gangs until there is one gang left.
Challenge:
You are given a list of lists. Inside of the interior lists are numbers. Join the lists together by descending total list value ending up with one final list.
Simple example:
cant_beat_so_join([[1,2], [3,4], [5,6], [7,8], [9]]) -> [7, 8, 5, 6, 9, 3, 4, 1, 2]


In the example above, [7, 8] are the first in the list because they have the highest value


They are followed by [5, 6]
That is followed by [9] which comes before [3, 4] because the list of [9] is greater
It ends with [1, 2] which has the least amount of value

More examples:
cant_beat_so_join([[5, 1],[9, 14],[17, 23],[4, 1],[0, 1]]) -> [17, 23, 9, 14, 5, 1, 4, 1, 0, 1]
cant_beat_so_join([[13, 37], [43, 17], [2,3], [45,64], [1,9]]) -> [45, 64, 43, 17, 13, 37, 1, 9, 2, 3]
cant_beat_so_join([[], [], [], []]) -> []
cant_beat_so_join([[], [], [0], []]) -> [0]
cant_beat_so_join([[1,0,1,0,1,0], [0,1,0,0,1,0,0,1], [0], []]) -> [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]

In the case of more than one list sharing the same sum, place them in the same order that they were in the argument:
cant_beat_so_join([[0,1,1,1], [1,0,1,1], [1,1,0,1], [3]]) -> [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 3]
========================================
URL: https://www.codewars.com/kata/5d49c93d089c6e000ff8428c
–ó–∞–¥–∞—á–∞:
Inside of the city there are many gangs, each with differing numbers of members wielding different weapons and possessing different strength levels. The gangs do not really want to fight one another, and so the "If you can't beat 'em, join 'em" rule applies. The gangs start combining with the most powerful gangs being joined by the weaker gangs until there is one gang left.
Challenge:
You are given a list of lists. Inside of the interior lists are numbers. Join the lists together by descending total list value ending up with one final list.
Simple example:
cant_beat_so_join([[1,2], [3,4], [5,6], [7,8], [9]]) -> [7, 8, 5, 6, 9, 3, 4, 1, 2]


In the example above, [7, 8] are the first in the list because they have the highest value


They are followed by [5, 6]
That is followed by [9] which comes before [3, 4] because the list of [9] is greater
It ends with [1, 2] which has the least amount of value

More examples:
cant_beat_so_join([[5, 1],[9, 14],[17, 23],[4, 1],[0, 1]]) -> [17, 23, 9, 14, 5, 1, 4, 1, 0, 1]
cant_beat_so_join([[13, 37], [43, 17], [2,3], [45,64], [1,9]]) -> [45, 64, 43, 17, 13, 37, 1, 9, 2, 3]
cant_beat_so_join([[], [], [], []]) -> []
cant_beat_so_join([[], [], [0], []]) -> [0]
cant_beat_so_join([[1,0,1,0,1,0], [0,1,0,0,1,0,0,1], [0], []]) -> [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]

In the case of more than one list sharing the same sum, place them in the same order that they were in the argument:
cant_beat_so_join([[0,1,1,1], [1,0,1,1], [1,1,0,1], [3]]) -> [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 3]
========================================
URL: https://www.codewars.com/kata/5d376cdc9bcee7001fcb84c0
–ó–∞–¥–∞—á–∞:
In a far away country called AlgoLandia, there are N islands numbered 1 to N. Each island is denoted by k[i]. King Algolas, king of AlgoLandia, built N - 1 bridges in the country. A bridge is built between islands k[i] and k[i+1]. Bridges are two-ways and are expensive to build.
The problem is that there are gangs who wants to destroy the bridges. In order to protect the bridges, the king wants to assign elite guards to the bridges. A bridge between islands k[i] and k[i+1] is safe when there is an elite guard in island k[i] or k[i+1]. There are already elite guards assigned in some islands.
Your task now is to determine the minimum number of additional elite guards that needs to be hired to guard all the bridges.
Note:
You are given a sequence k with N length.
k[i] = true, means that there is an elite guard in that island; k[i] = false means no elite guard. It is guaranteed that AlgoLandia have at least 2 islands.
Sample Input 1
k = [true, true, false, true, false]

Sample Output 1
0

Sample Input 2
k = [false, false, true, false, false]

Sample Output 2
2
========================================
URL: https://www.codewars.com/kata/5d2659626c7aec0022cb8006
–ó–∞–¥–∞—á–∞:
In a far away country called AlgoLandia, there are N islands numbered 1 to N. Each island is denoted by k[i]. King Algolas, king of AlgoLandia, built N - 1 bridges in the country. A bridge is built between islands k[i] and k[i+1]. Bridges are two-ways and are expensive to build.
The problem is that there are gangs who wants to destroy the bridges. In order to protect the bridges, the king wants to assign elite guards to the bridges. A bridge between islands k[i] and k[i+1] is safe when there is an elite guard in island k[i] or k[i+1]. There are already elite guards assigned in some islands.
Your task now is to determine the minimum number of additional elite guards that needs to be hired to guard all the bridges.
Note:
You are given a sequence k with N length.
k[i] = true, means that there is an elite guard in that island; k[i] = false means no elite guard. It is guaranteed that AlgoLandia have at least 2 islands.
Sample Input 1
k = [true, true, false, true, false]

Sample Output 1
0

Sample Input 2
k = [false, false, true, false, false]

Sample Output 2
2
========================================
URL: https://www.codewars.com/kata/5d0d1c14c843440026d7958e
–ó–∞–¥–∞—á–∞:
In a far away country called AlgoLandia, there are N islands numbered 1 to N. Each island is denoted by k[i]. King Algolas, king of AlgoLandia, built N - 1 bridges in the country. A bridge is built between islands k[i] and k[i+1]. Bridges are two-ways and are expensive to build.
The problem is that there are gangs who wants to destroy the bridges. In order to protect the bridges, the king wants to assign elite guards to the bridges. A bridge between islands k[i] and k[i+1] is safe when there is an elite guard in island k[i] or k[i+1]. There are already elite guards assigned in some islands.
Your task now is to determine the minimum number of additional elite guards that needs to be hired to guard all the bridges.
Note:
You are given a sequence k with N length.
k[i] = true, means that there is an elite guard in that island; k[i] = false means no elite guard. It is guaranteed that AlgoLandia have at least 2 islands.
Sample Input 1
k = [true, true, false, true, false]

Sample Output 1
0

Sample Input 2
k = [false, false, true, false, false]

Sample Output 2
2
========================================
URL: https://www.codewars.com/kata/5d1e1560c193ae0015b601a2
–ó–∞–¥–∞—á–∞:
In a far away country called AlgoLandia, there are N islands numbered 1 to N. Each island is denoted by k[i]. King Algolas, king of AlgoLandia, built N - 1 bridges in the country. A bridge is built between islands k[i] and k[i+1]. Bridges are two-ways and are expensive to build.
The problem is that there are gangs who wants to destroy the bridges. In order to protect the bridges, the king wants to assign elite guards to the bridges. A bridge between islands k[i] and k[i+1] is safe when there is an elite guard in island k[i] or k[i+1]. There are already elite guards assigned in some islands.
Your task now is to determine the minimum number of additional elite guards that needs to be hired to guard all the bridges.
Note:
You are given a sequence k with N length.
k[i] = true, means that there is an elite guard in that island; k[i] = false means no elite guard. It is guaranteed that AlgoLandia have at least 2 islands.
Sample Input 1
k = [true, true, false, true, false]

Sample Output 1
0

Sample Input 2
k = [false, false, true, false, false]

Sample Output 2
2
========================================
URL: https://www.codewars.com/kata/5d10d53a4b67bb00211ca8af
–ó–∞–¥–∞—á–∞:
In a far away country called AlgoLandia, there are N islands numbered 1 to N. Each island is denoted by k[i]. King Algolas, king of AlgoLandia, built N - 1 bridges in the country. A bridge is built between islands k[i] and k[i+1]. Bridges are two-ways and are expensive to build.
The problem is that there are gangs who wants to destroy the bridges. In order to protect the bridges, the king wants to assign elite guards to the bridges. A bridge between islands k[i] and k[i+1] is safe when there is an elite guard in island k[i] or k[i+1]. There are already elite guards assigned in some islands.
Your task now is to determine the minimum number of additional elite guards that needs to be hired to guard all the bridges.
Note:
You are given a sequence k with N length.
k[i] = true, means that there is an elite guard in that island; k[i] = false means no elite guard. It is guaranteed that AlgoLandia have at least 2 islands.
Sample Input 1
k = [true, true, false, true, false]

Sample Output 1
0

Sample Input 2
k = [false, false, true, false, false]

Sample Output 2
2
========================================
URL: https://www.codewars.com/kata/5d076515e102162ac0dc514e
–ó–∞–¥–∞—á–∞:
In this Kata, we will check if a string contains consecutive letters as they appear in the English alphabet and if each letter occurs only once. 
Rules are: (1) the letters are adjacent in the English alphabet, and (2) each letter occurs only once.

For example: 
solve("abc") = True, because it contains a,b,c
solve("abd") = False, because a, b, d are not consecutive/adjacent in the alphabet, and c is missing.
solve("dabc") = True, because it contains a, b, c, d
solve("abbc") = False, because b does not occur once.
solve("v") = True

All inputs will be lowercase letters. 
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5d0365accfd09600130a00c9
–ó–∞–¥–∞—á–∞:
In this Kata, we will check if a string contains consecutive letters as they appear in the English alphabet and if each letter occurs only once. 
Rules are: (1) the letters are adjacent in the English alphabet, and (2) each letter occurs only once.

For example: 
solve("abc") = True, because it contains a,b,c
solve("abd") = False, because a, b, d are not consecutive/adjacent in the alphabet, and c is missing.
solve("dabc") = True, because it contains a, b, c, d
solve("abbc") = False, because b does not occur once.
solve("v") = True

All inputs will be lowercase letters. 
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5ce6cf94cb83dc0020da1929
–ó–∞–¥–∞—á–∞:
In this Kata, we will check if a string contains consecutive letters as they appear in the English alphabet and if each letter occurs only once. 
Rules are: (1) the letters are adjacent in the English alphabet, and (2) each letter occurs only once.

For example: 
solve("abc") = True, because it contains a,b,c
solve("abd") = False, because a, b, d are not consecutive/adjacent in the alphabet, and c is missing.
solve("dabc") = True, because it contains a, b, c, d
solve("abbc") = False, because b does not occur once.
solve("v") = True

All inputs will be lowercase letters. 
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5ce6728c939bf80029988b57
–ó–∞–¥–∞—á–∞:
In this Kata, we will check if a string contains consecutive letters as they appear in the English alphabet and if each letter occurs only once. 
Rules are: (1) the letters are adjacent in the English alphabet, and (2) each letter occurs only once.

For example: 
solve("abc") = True, because it contains a,b,c
solve("abd") = False, because a, b, d are not consecutive/adjacent in the alphabet, and c is missing.
solve("dabc") = True, because it contains a, b, c, d
solve("abbc") = False, because b does not occur once.
solve("v") = True

All inputs will be lowercase letters. 
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5ce04eadd103f4001edd8986
–ó–∞–¥–∞—á–∞:
A stem-and-leaf plot groups data points that have the same leading digit, resembling a histogram. For example, for the input [11, 35, 14, 9, 39, 23, 35], it might look something like this:
stem | leaf
-----------
  0  | 9
  1  | 1 4
  2  | 3
  3  | 5 5 9

Some important things to notice: 

Any single-digit number, such as 9, has 0 as its stem; 
The leaves are presented in ascending order; 
Leaves can be repeated (as with the two 5's in the last row).

Create a function called stem_and_leaf that, given a list of integers i as input (0 <= i <= 99), returns a Python dictionary containing a stem-and-leaf plot. Each key of the dictionary should be a stem and each value should be a list of leaves, following the format above.
For the example above, the output would be:
{0: [9], 1: [1, 4], 2: [3], 3: [5, 5, 9]}
========================================
URL: https://www.codewars.com/kata/5cd12646cf44af0020c727dd
–ó–∞–¥–∞—á–∞:
A stem-and-leaf plot groups data points that have the same leading digit, resembling a histogram. For example, for the input [11, 35, 14, 9, 39, 23, 35], it might look something like this:
stem | leaf
-----------
  0  | 9
  1  | 1 4
  2  | 3
  3  | 5 5 9

Some important things to notice: 

Any single-digit number, such as 9, has 0 as its stem; 
The leaves are presented in ascending order; 
Leaves can be repeated (as with the two 5's in the last row).

Create a function called stem_and_leaf that, given a list of integers i as input (0 <= i <= 99), returns a Python dictionary containing a stem-and-leaf plot. Each key of the dictionary should be a stem and each value should be a list of leaves, following the format above.
For the example above, the output would be:
{0: [9], 1: [1, 4], 2: [3], 3: [5, 5, 9]}
========================================
URL: https://www.codewars.com/kata/5cc80fbe701f0d001136e5eb
–ó–∞–¥–∞—á–∞:
A stem-and-leaf plot groups data points that have the same leading digit, resembling a histogram. For example, for the input [11, 35, 14, 9, 39, 23, 35], it might look something like this:
stem | leaf
-----------
  0  | 9
  1  | 1 4
  2  | 3
  3  | 5 5 9

Some important things to notice: 

Any single-digit number, such as 9, has 0 as its stem; 
The leaves are presented in ascending order; 
Leaves can be repeated (as with the two 5's in the last row).

Create a function called stem_and_leaf that, given a list of integers i as input (0 <= i <= 99), returns a Python dictionary containing a stem-and-leaf plot. Each key of the dictionary should be a stem and each value should be a list of leaves, following the format above.
For the example above, the output would be:
{0: [9], 1: [1, 4], 2: [3], 3: [5, 5, 9]}
========================================
URL: https://www.codewars.com/kata/5cd5ba1ce4471a00256930c0
–ó–∞–¥–∞—á–∞:
A stem-and-leaf plot groups data points that have the same leading digit, resembling a histogram. For example, for the input [11, 35, 14, 9, 39, 23, 35], it might look something like this:
stem | leaf
-----------
  0  | 9
  1  | 1 4
  2  | 3
  3  | 5 5 9

Some important things to notice: 

Any single-digit number, such as 9, has 0 as its stem; 
The leaves are presented in ascending order; 
Leaves can be repeated (as with the two 5's in the last row).

Create a function called stem_and_leaf that, given a list of integers i as input (0 <= i <= 99), returns a Python dictionary containing a stem-and-leaf plot. Each key of the dictionary should be a stem and each value should be a list of leaves, following the format above.
For the example above, the output would be:
{0: [9], 1: [1, 4], 2: [3], 3: [5, 5, 9]}
========================================
URL: https://www.codewars.com/kata/5ccfcfad7306d900269da53f
–ó–∞–¥–∞—á–∞:
A stem-and-leaf plot groups data points that have the same leading digit, resembling a histogram. For example, for the input [11, 35, 14, 9, 39, 23, 35], it might look something like this:
stem | leaf
-----------
  0  | 9
  1  | 1 4
  2  | 3
  3  | 5 5 9

Some important things to notice: 

Any single-digit number, such as 9, has 0 as its stem; 
The leaves are presented in ascending order; 
Leaves can be repeated (as with the two 5's in the last row).

Create a function called stem_and_leaf that, given a list of integers i as input (0 <= i <= 99), returns a Python dictionary containing a stem-and-leaf plot. Each key of the dictionary should be a stem and each value should be a list of leaves, following the format above.
For the example above, the output would be:
{0: [9], 1: [1, 4], 2: [3], 3: [5, 5, 9]}
========================================
URL: https://www.codewars.com/kata/5cba04533e6dce000eaf6126
–ó–∞–¥–∞—á–∞:
Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ

Multiply all the digits of a nonnegative integer n by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the multiplicative persistence.
Create a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.
Examples
per(1)  = []

per(10) = [0]
// 1*0 = 0

per(69) = [54, 20, 0]
// 6*9 = 54 --> 5*4 = 20 --> 2*0 = 0

per(277777788888899) = [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]
// 2*7*7*7*7*7*7*8*8*8*8*8*8*9*9 = 4996238671872 --> 4*9*9*6*2*3*8*6*7*1*8*7*2 = 4478976 --> ...
========================================
URL: https://www.codewars.com/kata/5cb99d1a1e00460024827738
–ó–∞–¥–∞—á–∞:
Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ

Multiply all the digits of a nonnegative integer n by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the multiplicative persistence.
Create a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.
Examples
per(1)  = []

per(10) = [0]
// 1*0 = 0

per(69) = [54, 20, 0]
// 6*9 = 54 --> 5*4 = 20 --> 2*0 = 0

per(277777788888899) = [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]
// 2*7*7*7*7*7*7*8*8*8*8*8*8*9*9 = 4996238671872 --> 4*9*9*6*2*3*8*6*7*1*8*7*2 = 4478976 --> ...
========================================
URL: https://www.codewars.com/kata/5cb05eee03c3ff002153d4ef
–ó–∞–¥–∞—á–∞:
Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ

Multiply all the digits of a nonnegative integer n by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the multiplicative persistence.
Create a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.
Examples
per(1)  = []

per(10) = [0]
// 1*0 = 0

per(69) = [54, 20, 0]
// 6*9 = 54 --> 5*4 = 20 --> 2*0 = 0

per(277777788888899) = [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]
// 2*7*7*7*7*7*7*8*8*8*8*8*8*9*9 = 4996238671872 --> 4*9*9*6*2*3*8*6*7*1*8*7*2 = 4478976 --> ...
========================================
URL: https://www.codewars.com/kata/5cb7baa989b1c50014a53333
–ó–∞–¥–∞—á–∞:
Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ

Multiply all the digits of a nonnegative integer n by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the multiplicative persistence.
Create a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.
Examples
per(1)  = []

per(10) = [0]
// 1*0 = 0

per(69) = [54, 20, 0]
// 6*9 = 54 --> 5*4 = 20 --> 2*0 = 0

per(277777788888899) = [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]
// 2*7*7*7*7*7*7*8*8*8*8*8*8*9*9 = 4996238671872 --> 4*9*9*6*2*3*8*6*7*1*8*7*2 = 4478976 --> ...
========================================
URL: https://www.codewars.com/kata/5c942f40bc4575001a3ea7ec
–ó–∞–¥–∞—á–∞:
Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ

Multiply all the digits of a nonnegative integer n by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the multiplicative persistence.
Create a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.
Examples
per(1)  = []

per(10) = [0]
// 1*0 = 0

per(69) = [54, 20, 0]
// 6*9 = 54 --> 5*4 = 20 --> 2*0 = 0

per(277777788888899) = [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]
// 2*7*7*7*7*7*7*8*8*8*8*8*8*9*9 = 4996238671872 --> 4*9*9*6*2*3*8*6*7*1*8*7*2 = 4478976 --> ...
========================================
URL: https://www.codewars.com/kata/5c79c07b4ba1e100097f4e1a
–ó–∞–¥–∞—á–∞:
Echo Program
Write an echoProgram function (or echo_program depend on language) that returns your solution source code as a string.
Note:
Function.prototype.toString has been disabled.
========================================
URL: https://www.codewars.com/kata/5c744111cb0cdd3206f96665
–ó–∞–¥–∞—á–∞:
Echo Program
Write an echoProgram function (or echo_program depend on language) that returns your solution source code as a string.
Note:
Function.prototype.toString has been disabled.
========================================
URL: https://www.codewars.com/kata/5c784110bfe2ef660cb90369
–ó–∞–¥–∞—á–∞:
Echo Program
Write an echoProgram function (or echo_program depend on language) that returns your solution source code as a string.
Note:
Function.prototype.toString has been disabled.
========================================
URL: https://www.codewars.com/kata/5c745b30f6216a301dc4dda5
–ó–∞–¥–∞—á–∞:
Echo Program
Write an echoProgram function (or echo_program depend on language) that returns your solution source code as a string.
Note:
Function.prototype.toString has been disabled.
========================================
URL: https://www.codewars.com/kata/5c6dc504abcd1628cd174bea
–ó–∞–¥–∞—á–∞:
Echo Program
Write an echoProgram function (or echo_program depend on language) that returns your solution source code as a string.
Note:
Function.prototype.toString has been disabled.
========================================
URL: https://www.codewars.com/kata/5c5abf56052d1c0001b22ce5
–ó–∞–¥–∞—á–∞:
Scenario
A construction master applies specific rules when creating walls. But the construction master cannot calculate the exact number of bricks to be spent on the walls.
For this reason, you are expected to write a method that calculates the number of bricks that need to be spent for the wall whose width and height are clear.
Rules

Only 3 kinds of bricks can be used. Large Brick(60 cm), 
Medium Brick(40 cm) and Small Brick(20cm)
The height of all bricks is 5 cm and wall height is always 5 cm and multiples.
The Wall width is always 60 cm and multiples.
The lowest row should be composed of only large bricks.
After that, the first brick from the right of the next row must be the middle brick, the first brick from the left is the small brick.
Finally, The first brick from the right of the next row must be the small brick, the first brick from the left is the medium brick.
The first row after the series is completed again consists of large bricks and the cycle continues.
The number of bricks used should return to the following format. 
"21L6M6S"
If number of medium and small bricks is 0, then answer should be the following format. "21L"

Example Wall

Wall height is 45 cm and wall width is 180 cm.
There are 21 large bricks. (Yellow bricks)
There are 6 medium bricks. (Green bricks)
There are 6 small bricks. (Pink bricks)
So answer is "21L6M6S"
========================================
URL: https://www.codewars.com/kata/5c511d8877c0070e2c195faf
–ó–∞–¥–∞—á–∞:
Scenario
A construction master applies specific rules when creating walls. But the construction master cannot calculate the exact number of bricks to be spent on the walls.
For this reason, you are expected to write a method that calculates the number of bricks that need to be spent for the wall whose width and height are clear.
Rules

Only 3 kinds of bricks can be used. Large Brick(60 cm), 
Medium Brick(40 cm) and Small Brick(20cm)
The height of all bricks is 5 cm and wall height is always 5 cm and multiples.
The Wall width is always 60 cm and multiples.
The lowest row should be composed of only large bricks.
After that, the first brick from the right of the next row must be the middle brick, the first brick from the left is the small brick.
Finally, The first brick from the right of the next row must be the small brick, the first brick from the left is the medium brick.
The first row after the series is completed again consists of large bricks and the cycle continues.
The number of bricks used should return to the following format. 
"21L6M6S"
If number of medium and small bricks is 0, then answer should be the following format. "21L"

Example Wall

Wall height is 45 cm and wall width is 180 cm.
There are 21 large bricks. (Yellow bricks)
There are 6 medium bricks. (Green bricks)
There are 6 small bricks. (Pink bricks)
So answer is "21L6M6S"
========================================
URL: https://www.codewars.com/kata/5c556845d7e0334c74698706
–ó–∞–¥–∞—á–∞:
Scenario
A construction master applies specific rules when creating walls. But the construction master cannot calculate the exact number of bricks to be spent on the walls.
For this reason, you are expected to write a method that calculates the number of bricks that need to be spent for the wall whose width and height are clear.
Rules

Only 3 kinds of bricks can be used. Large Brick(60 cm), 
Medium Brick(40 cm) and Small Brick(20cm)
The height of all bricks is 5 cm and wall height is always 5 cm and multiples.
The Wall width is always 60 cm and multiples.
The lowest row should be composed of only large bricks.
After that, the first brick from the right of the next row must be the middle brick, the first brick from the left is the small brick.
Finally, The first brick from the right of the next row must be the small brick, the first brick from the left is the medium brick.
The first row after the series is completed again consists of large bricks and the cycle continues.
The number of bricks used should return to the following format. 
"21L6M6S"
If number of medium and small bricks is 0, then answer should be the following format. "21L"

Example Wall

Wall height is 45 cm and wall width is 180 cm.
There are 21 large bricks. (Yellow bricks)
There are 6 medium bricks. (Green bricks)
There are 6 small bricks. (Pink bricks)
So answer is "21L6M6S"
========================================
URL: https://www.codewars.com/kata/5c50a0e8cdc6aa29703f6805
–ó–∞–¥–∞—á–∞:
Scenario
A construction master applies specific rules when creating walls. But the construction master cannot calculate the exact number of bricks to be spent on the walls.
For this reason, you are expected to write a method that calculates the number of bricks that need to be spent for the wall whose width and height are clear.
Rules

Only 3 kinds of bricks can be used. Large Brick(60 cm), 
Medium Brick(40 cm) and Small Brick(20cm)
The height of all bricks is 5 cm and wall height is always 5 cm and multiples.
The Wall width is always 60 cm and multiples.
The lowest row should be composed of only large bricks.
After that, the first brick from the right of the next row must be the middle brick, the first brick from the left is the small brick.
Finally, The first brick from the right of the next row must be the small brick, the first brick from the left is the medium brick.
The first row after the series is completed again consists of large bricks and the cycle continues.
The number of bricks used should return to the following format. 
"21L6M6S"
If number of medium and small bricks is 0, then answer should be the following format. "21L"

Example Wall

Wall height is 45 cm and wall width is 180 cm.
There are 21 large bricks. (Yellow bricks)
There are 6 medium bricks. (Green bricks)
There are 6 small bricks. (Pink bricks)
So answer is "21L6M6S"
========================================
URL: https://www.codewars.com/kata/5c563cb78dac1951c2d60f01
–ó–∞–¥–∞—á–∞:
Scenario
A construction master applies specific rules when creating walls. But the construction master cannot calculate the exact number of bricks to be spent on the walls.
For this reason, you are expected to write a method that calculates the number of bricks that need to be spent for the wall whose width and height are clear.
Rules

Only 3 kinds of bricks can be used. Large Brick(60 cm), 
Medium Brick(40 cm) and Small Brick(20cm)
The height of all bricks is 5 cm and wall height is always 5 cm and multiples.
The Wall width is always 60 cm and multiples.
The lowest row should be composed of only large bricks.
After that, the first brick from the right of the next row must be the middle brick, the first brick from the left is the small brick.
Finally, The first brick from the right of the next row must be the small brick, the first brick from the left is the medium brick.
The first row after the series is completed again consists of large bricks and the cycle continues.
The number of bricks used should return to the following format. 
"21L6M6S"
If number of medium and small bricks is 0, then answer should be the following format. "21L"

Example Wall

Wall height is 45 cm and wall width is 180 cm.
There are 21 large bricks. (Yellow bricks)
There are 6 medium bricks. (Green bricks)
There are 6 small bricks. (Pink bricks)
So answer is "21L6M6S"
========================================
URL: https://www.codewars.com/kata/5c5086287bc6600001c7589a
–ó–∞–¥–∞—á–∞:
Return the nth term of the Recam√°n's sequence.
a(0) = 0;

        a(n-1) - n, if this value is positive and not yet in the sequence
      /
a(n) <
      \
        a(n-1) + n, otherwise

input range: 0 ‚Äì 30 000

Numberphile video about Recam√°n's sequence
========================================
URL: https://www.codewars.com/kata/5c4cb8fc3cf185147a5bdd02
–ó–∞–¥–∞—á–∞:
Return the nth term of the Recam√°n's sequence.
a(0) = 0;

        a(n-1) - n, if this value is positive and not yet in the sequence
      /
a(n) <
      \
        a(n-1) + n, otherwise

input range: 0 ‚Äì 30 000

Numberphile video about Recam√°n's sequence
========================================
URL: https://www.codewars.com/kata/5c44b0b200ce187106452139
–ó–∞–¥–∞—á–∞:
Return the nth term of the Recam√°n's sequence.
a(0) = 0;

        a(n-1) - n, if this value is positive and not yet in the sequence
      /
a(n) <
      \
        a(n-1) + n, otherwise

input range: 0 ‚Äì 30 000

Numberphile video about Recam√°n's sequence
========================================
URL: https://www.codewars.com/kata/5c46ea433dd41b19af1ca3b3
–ó–∞–¥–∞—á–∞:
Return the nth term of the Recam√°n's sequence.
a(0) = 0;

        a(n-1) - n, if this value is positive and not yet in the sequence
      /
a(n) <
      \
        a(n-1) + n, otherwise

input range: 0 ‚Äì 30 000

Numberphile video about Recam√°n's sequence
========================================
URL: https://www.codewars.com/kata/5c3f31c2460e9b4020780aa2
–ó–∞–¥–∞—á–∞:
Return the nth term of the Recam√°n's sequence.
a(0) = 0;

        a(n-1) - n, if this value is positive and not yet in the sequence
      /
a(n) <
      \
        a(n-1) + n, otherwise

input range: 0 ‚Äì 30 000

Numberphile video about Recam√°n's sequence
========================================
URL: https://www.codewars.com/kata/5c3433a4d828182e420f4197
–ó–∞–¥–∞—á–∞:
Welcome to yet another kata on palindromes!
Your job is to return a string with 2 requirements:
1 . The first half of the string should represent a proper function expression in your chosen language.
2 . The string should be a palindrome.
Wait... that's too easy -- let's add one more requirement:
Call x the sum of the character codes of the full string we want to return.
To pass the kata, make sure the function represented in your string will return x when it is given as an input.
========================================
URL: https://www.codewars.com/kata/5c1a334516537ccd450000d8
–ó–∞–¥–∞—á–∞:
Welcome to yet another kata on palindromes!
Your job is to return a string with 2 requirements:
1 . The first half of the string should represent a proper function expression in your chosen language.
2 . The string should be a palindrome.
Wait... that's too easy -- let's add one more requirement:
Call x the sum of the character codes of the full string we want to return.
To pass the kata, make sure the function represented in your string will return x when it is given as an input.
========================================
URL: https://www.codewars.com/kata/5c15dd0fb48e91d81b0000c6
–ó–∞–¥–∞—á–∞:
Welcome to yet another kata on palindromes!
Your job is to return a string with 2 requirements:
1 . The first half of the string should represent a proper function expression in your chosen language.
2 . The string should be a palindrome.
Wait... that's too easy -- let's add one more requirement:
Call x the sum of the character codes of the full string we want to return.
To pass the kata, make sure the function represented in your string will return x when it is given as an input.
========================================
URL: https://www.codewars.com/kata/5c11c3f757415b1735000338
–ó–∞–¥–∞—á–∞:
Welcome to yet another kata on palindromes!
Your job is to return a string with 2 requirements:
1 . The first half of the string should represent a proper function expression in your chosen language.
2 . The string should be a palindrome.
Wait... that's too easy -- let's add one more requirement:
Call x the sum of the character codes of the full string we want to return.
To pass the kata, make sure the function represented in your string will return x when it is given as an input.
========================================
URL: https://www.codewars.com/kata/5c1ac4f002c59c725900003f
–ó–∞–¥–∞—á–∞:
Welcome to yet another kata on palindromes!
Your job is to return a string with 2 requirements:
1 . The first half of the string should represent a proper function expression in your chosen language.
2 . The string should be a palindrome.
Wait... that's too easy -- let's add one more requirement:
Call x the sum of the character codes of the full string we want to return.
To pass the kata, make sure the function represented in your string will return x when it is given as an input.
========================================
URL: https://www.codewars.com/kata/5bf774a81505a7413400006a
–ó–∞–¥–∞—á–∞:
Task
You are given a positive integer n. We intend to make some ascending sequences according to the following rules:

Make a sequence of length 1: [ n ]

Or, insert a number to the left side of the sequence. But this number can not exceed half of the first number of the sequence. 

Follow rule 2, continue insert number to the left side of the sequence.


Your task is to count the number of all possible sequences, and return it.
If you do not understand the task, please read the rewritten version below:
You are given a positive integer n. Your task is to count the number of such sequences: 

It should be an ascending sequence;

It should end with number n.

Each number in the sequence should smaller or equals to the half of its right, except for the last number n.

We define that a sequence containing only a number n is a valid ascending sequence.


Examples
For n = 6, the output should be 6.
All sequences we made are:
[6]

insert a number to the left:

[1,6]
[2,6]
[3,6]

continue insert number:

[1,2,6]
[1,3,6]

There are 6 sequences in total.
For n = 10, the output should be 14.
All sequences we made are:
[10]

insert a number to the left:

[1,10]
[2,10]
[3,10]
[4,10]
[5,10]

continue insert number:

[1,2,10]
[1,3,10]
[1,4,10]
[2,4,10]
[1,5,10]
[2,5,10]

continue insert number:

[1,2,4,10]
[1,2,5,10]

There are 14 sequences in total.
Note

1 <= n <= 1000

3 fixed testcases

100 random testcases, testing for correctness of solution

All inputs are valid.
========================================
URL: https://www.codewars.com/kata/5be0f1786279697939000157
–ó–∞–¥–∞—á–∞:
Task
You are given a positive integer n. We intend to make some ascending sequences according to the following rules:

Make a sequence of length 1: [ n ]

Or, insert a number to the left side of the sequence. But this number can not exceed half of the first number of the sequence. 

Follow rule 2, continue insert number to the left side of the sequence.


Your task is to count the number of all possible sequences, and return it.
If you do not understand the task, please read the rewritten version below:
You are given a positive integer n. Your task is to count the number of such sequences: 

It should be an ascending sequence;

It should end with number n.

Each number in the sequence should smaller or equals to the half of its right, except for the last number n.

We define that a sequence containing only a number n is a valid ascending sequence.


Examples
For n = 6, the output should be 6.
All sequences we made are:
[6]

insert a number to the left:

[1,6]
[2,6]
[3,6]

continue insert number:

[1,2,6]
[1,3,6]

There are 6 sequences in total.
For n = 10, the output should be 14.
All sequences we made are:
[10]

insert a number to the left:

[1,10]
[2,10]
[3,10]
[4,10]
[5,10]

continue insert number:

[1,2,10]
[1,3,10]
[1,4,10]
[2,4,10]
[1,5,10]
[2,5,10]

continue insert number:

[1,2,4,10]
[1,2,5,10]

There are 14 sequences in total.
Note

1 <= n <= 1000

3 fixed testcases

100 random testcases, testing for correctness of solution

All inputs are valid.
========================================
URL: https://www.codewars.com/kata/5becace7063291bebf0001d5
–ó–∞–¥–∞—á–∞:
Task
You are given a positive integer n. We intend to make some ascending sequences according to the following rules:

Make a sequence of length 1: [ n ]

Or, insert a number to the left side of the sequence. But this number can not exceed half of the first number of the sequence. 

Follow rule 2, continue insert number to the left side of the sequence.


Your task is to count the number of all possible sequences, and return it.
If you do not understand the task, please read the rewritten version below:
You are given a positive integer n. Your task is to count the number of such sequences: 

It should be an ascending sequence;

It should end with number n.

Each number in the sequence should smaller or equals to the half of its right, except for the last number n.

We define that a sequence containing only a number n is a valid ascending sequence.


Examples
For n = 6, the output should be 6.
All sequences we made are:
[6]

insert a number to the left:

[1,6]
[2,6]
[3,6]

continue insert number:

[1,2,6]
[1,3,6]

There are 6 sequences in total.
For n = 10, the output should be 14.
All sequences we made are:
[10]

insert a number to the left:

[1,10]
[2,10]
[3,10]
[4,10]
[5,10]

continue insert number:

[1,2,10]
[1,3,10]
[1,4,10]
[2,4,10]
[1,5,10]
[2,5,10]

continue insert number:

[1,2,4,10]
[1,2,5,10]

There are 14 sequences in total.
Note

1 <= n <= 1000

3 fixed testcases

100 random testcases, testing for correctness of solution

All inputs are valid.
========================================
URL: https://www.codewars.com/kata/5be7f613f59e0355ee00000f
–ó–∞–¥–∞—á–∞:
Task
You are given a positive integer n. We intend to make some ascending sequences according to the following rules:

Make a sequence of length 1: [ n ]

Or, insert a number to the left side of the sequence. But this number can not exceed half of the first number of the sequence. 

Follow rule 2, continue insert number to the left side of the sequence.


Your task is to count the number of all possible sequences, and return it.
If you do not understand the task, please read the rewritten version below:
You are given a positive integer n. Your task is to count the number of such sequences: 

It should be an ascending sequence;

It should end with number n.

Each number in the sequence should smaller or equals to the half of its right, except for the last number n.

We define that a sequence containing only a number n is a valid ascending sequence.


Examples
For n = 6, the output should be 6.
All sequences we made are:
[6]

insert a number to the left:

[1,6]
[2,6]
[3,6]

continue insert number:

[1,2,6]
[1,3,6]

There are 6 sequences in total.
For n = 10, the output should be 14.
All sequences we made are:
[10]

insert a number to the left:

[1,10]
[2,10]
[3,10]
[4,10]
[5,10]

continue insert number:

[1,2,10]
[1,3,10]
[1,4,10]
[2,4,10]
[1,5,10]
[2,5,10]

continue insert number:

[1,2,4,10]
[1,2,5,10]

There are 14 sequences in total.
Note

1 <= n <= 1000

3 fixed testcases

100 random testcases, testing for correctness of solution

All inputs are valid.
========================================
URL: https://www.codewars.com/kata/5be1a950d2055d589500005b
–ó–∞–¥–∞—á–∞:
Task
You are given a positive integer n. We intend to make some ascending sequences according to the following rules:

Make a sequence of length 1: [ n ]

Or, insert a number to the left side of the sequence. But this number can not exceed half of the first number of the sequence. 

Follow rule 2, continue insert number to the left side of the sequence.


Your task is to count the number of all possible sequences, and return it.
If you do not understand the task, please read the rewritten version below:
You are given a positive integer n. Your task is to count the number of such sequences: 

It should be an ascending sequence;

It should end with number n.

Each number in the sequence should smaller or equals to the half of its right, except for the last number n.

We define that a sequence containing only a number n is a valid ascending sequence.


Examples
For n = 6, the output should be 6.
All sequences we made are:
[6]

insert a number to the left:

[1,6]
[2,6]
[3,6]

continue insert number:

[1,2,6]
[1,3,6]

There are 6 sequences in total.
For n = 10, the output should be 14.
All sequences we made are:
[10]

insert a number to the left:

[1,10]
[2,10]
[3,10]
[4,10]
[5,10]

continue insert number:

[1,2,10]
[1,3,10]
[1,4,10]
[2,4,10]
[1,5,10]
[2,5,10]

continue insert number:

[1,2,4,10]
[1,2,5,10]

There are 14 sequences in total.
Note

1 <= n <= 1000

3 fixed testcases

100 random testcases, testing for correctness of solution

All inputs are valid.
========================================
URL: https://www.codewars.com/kata/5bdc191306a8a678f6000187
–ó–∞–¥–∞—á–∞:
In this kata you will be given a random string of letters and tasked with returning them as a string of comma-separated sequences sorted alphabetically, with each sequence starting with an uppercase character followed by n-1 lowercase characters, where n is the letter's alphabet position 1-26.
Example
alphaSeq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

alpha_seq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

Technical Details

The string will include only letters.
The first letter of each sequence is uppercase followed by n-1 lowercase.
Each sequence is separated with a comma.
Return value needs to be a string.
========================================
URL: https://www.codewars.com/kata/5bdc1558ab6bc57f47000b8e
–ó–∞–¥–∞—á–∞:
In this kata you will be given a random string of letters and tasked with returning them as a string of comma-separated sequences sorted alphabetically, with each sequence starting with an uppercase character followed by n-1 lowercase characters, where n is the letter's alphabet position 1-26.
Example
alphaSeq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

alpha_seq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

Technical Details

The string will include only letters.
The first letter of each sequence is uppercase followed by n-1 lowercase.
Each sequence is separated with a comma.
Return value needs to be a string.
========================================
URL: https://www.codewars.com/kata/5be085e418bcfd260b000028
–ó–∞–¥–∞—á–∞:
In this kata you will be given a random string of letters and tasked with returning them as a string of comma-separated sequences sorted alphabetically, with each sequence starting with an uppercase character followed by n-1 lowercase characters, where n is the letter's alphabet position 1-26.
Example
alphaSeq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

alpha_seq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

Technical Details

The string will include only letters.
The first letter of each sequence is uppercase followed by n-1 lowercase.
Each sequence is separated with a comma.
Return value needs to be a string.
========================================
URL: https://www.codewars.com/kata/5bd00c99dbc73908bb00057a
–ó–∞–¥–∞—á–∞:
In this kata you will be given a random string of letters and tasked with returning them as a string of comma-separated sequences sorted alphabetically, with each sequence starting with an uppercase character followed by n-1 lowercase characters, where n is the letter's alphabet position 1-26.
Example
alphaSeq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

alpha_seq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

Technical Details

The string will include only letters.
The first letter of each sequence is uppercase followed by n-1 lowercase.
Each sequence is separated with a comma.
Return value needs to be a string.
========================================
URL: https://www.codewars.com/kata/5bd776533a7e2720c40000e5
–ó–∞–¥–∞—á–∞:
In this kata you will be given a random string of letters and tasked with returning them as a string of comma-separated sequences sorted alphabetically, with each sequence starting with an uppercase character followed by n-1 lowercase characters, where n is the letter's alphabet position 1-26.
Example
alphaSeq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

alpha_seq("ZpglnRxqenU") -> "Eeeee,Ggggggg,Llllllllllll,Nnnnnnnnnnnnnn,Nnnnnnnnnnnnnn,Pppppppppppppppp,Qqqqqqqqqqqqqqqqq,Rrrrrrrrrrrrrrrrrr,Uuuuuuuuuuuuuuuuuuuuu,Xxxxxxxxxxxxxxxxxxxxxxxx,Zzzzzzzzzzzzzzzzzzzzzzzzzz"

Technical Details

The string will include only letters.
The first letter of each sequence is uppercase followed by n-1 lowercase.
Each sequence is separated with a comma.
Return value needs to be a string.
========================================
URL: https://www.codewars.com/kata/5bc8c9db40ecc7f792002308
–ó–∞–¥–∞—á–∞:
There is no single treatment that works for every phobia, but some people cure it by being gradually exposed to the phobic situation or object. In this kata we will try curing arachnophobia by drawing primitive spiders.
Our spiders will have legs, body, eyes and a mouth. Here are some examples:
/\((OOwOO))/\

/‚ï≤(((0000w0000)))‚ï±\

^(oWo)^

You will be given four values:  

leg size where each value stands for its own leg type: 1 for "^ ^", 2 for "/\ /\", 3 for "/‚ï≤ ‚ï±\", 4 for "‚ï±‚ï≤ ‚ï±‚ï≤" 
body size where each value stands for its own body type: 1 for "( )", 2 for "(( ))", 3 for "((( )))" 
mouth representing the spider's mouth  
eye representing the spider's eye

Note: the eyes are symmetric, and their total amount is 2 to the power of body size.
You will also be given only valid data. That's it for the instructions, you can start coding!
========================================
URL: https://www.codewars.com/kata/5bce125d3bb2adff0d000245
–ó–∞–¥–∞—á–∞:
There is no single treatment that works for every phobia, but some people cure it by being gradually exposed to the phobic situation or object. In this kata we will try curing arachnophobia by drawing primitive spiders.
Our spiders will have legs, body, eyes and a mouth. Here are some examples:
/\((OOwOO))/\

/‚ï≤(((0000w0000)))‚ï±\

^(oWo)^

You will be given four values:  

leg size where each value stands for its own leg type: 1 for "^ ^", 2 for "/\ /\", 3 for "/‚ï≤ ‚ï±\", 4 for "‚ï±‚ï≤ ‚ï±‚ï≤" 
body size where each value stands for its own body type: 1 for "( )", 2 for "(( ))", 3 for "((( )))" 
mouth representing the spider's mouth  
eye representing the spider's eye

Note: the eyes are symmetric, and their total amount is 2 to the power of body size.
You will also be given only valid data. That's it for the instructions, you can start coding!
========================================
URL: https://www.codewars.com/kata/5bcac5a01cbff756e900003e
–ó–∞–¥–∞—á–∞:
There is no single treatment that works for every phobia, but some people cure it by being gradually exposed to the phobic situation or object. In this kata we will try curing arachnophobia by drawing primitive spiders.
Our spiders will have legs, body, eyes and a mouth. Here are some examples:
/\((OOwOO))/\

/‚ï≤(((0000w0000)))‚ï±\

^(oWo)^

You will be given four values:  

leg size where each value stands for its own leg type: 1 for "^ ^", 2 for "/\ /\", 3 for "/‚ï≤ ‚ï±\", 4 for "‚ï±‚ï≤ ‚ï±‚ï≤" 
body size where each value stands for its own body type: 1 for "( )", 2 for "(( ))", 3 for "((( )))" 
mouth representing the spider's mouth  
eye representing the spider's eye

Note: the eyes are symmetric, and their total amount is 2 to the power of body size.
You will also be given only valid data. That's it for the instructions, you can start coding!
========================================
URL: https://www.codewars.com/kata/5bc73331797b005d18000255
–ó–∞–¥–∞—á–∞:
There is no single treatment that works for every phobia, but some people cure it by being gradually exposed to the phobic situation or object. In this kata we will try curing arachnophobia by drawing primitive spiders.
Our spiders will have legs, body, eyes and a mouth. Here are some examples:
/\((OOwOO))/\

/‚ï≤(((0000w0000)))‚ï±\

^(oWo)^

You will be given four values:  

leg size where each value stands for its own leg type: 1 for "^ ^", 2 for "/\ /\", 3 for "/‚ï≤ ‚ï±\", 4 for "‚ï±‚ï≤ ‚ï±‚ï≤" 
body size where each value stands for its own body type: 1 for "( )", 2 for "(( ))", 3 for "((( )))" 
mouth representing the spider's mouth  
eye representing the spider's eye

Note: the eyes are symmetric, and their total amount is 2 to the power of body size.
You will also be given only valid data. That's it for the instructions, you can start coding!
========================================
URL: https://www.codewars.com/kata/5bc9951026f1cdc77400011c
–ó–∞–¥–∞—á–∞:
There is no single treatment that works for every phobia, but some people cure it by being gradually exposed to the phobic situation or object. In this kata we will try curing arachnophobia by drawing primitive spiders.
Our spiders will have legs, body, eyes and a mouth. Here are some examples:
/\((OOwOO))/\

/‚ï≤(((0000w0000)))‚ï±\

^(oWo)^

You will be given four values:  

leg size where each value stands for its own leg type: 1 for "^ ^", 2 for "/\ /\", 3 for "/‚ï≤ ‚ï±\", 4 for "‚ï±‚ï≤ ‚ï±‚ï≤" 
body size where each value stands for its own body type: 1 for "( )", 2 for "(( ))", 3 for "((( )))" 
mouth representing the spider's mouth  
eye representing the spider's eye

Note: the eyes are symmetric, and their total amount is 2 to the power of body size.
You will also be given only valid data. That's it for the instructions, you can start coding!
========================================
URL: https://www.codewars.com/kata/5bbd279c8f8bbd5ee500000f
–ó–∞–¥–∞—á–∞:
Background
I have stacked some pool balls in a triangle.
Like this,

Kata Task
Given the number of layers of my stack, what is the total height?
Return the height as multiple of the ball diameter.
Example
The image above shows a stack of 5 layers.
Notes

layers >= 0
approximate answers (within 0.001) are good enough


See Also

Stacked Balls - 2D
Stacked Balls - 3D with square base
Stacked Balls - 3D with triangle base
========================================
URL: https://www.codewars.com/kata/5bc052f93f43de7054000188
–ó–∞–¥–∞—á–∞:
Background
I have stacked some pool balls in a triangle.
Like this,

Kata Task
Given the number of layers of my stack, what is the total height?
Return the height as multiple of the ball diameter.
Example
The image above shows a stack of 5 layers.
Notes

layers >= 0
approximate answers (within 0.001) are good enough


See Also

Stacked Balls - 2D
Stacked Balls - 3D with square base
Stacked Balls - 3D with triangle base
========================================
URL: https://www.codewars.com/kata/5bbb8887484fcd36fb0020ca
–ó–∞–¥–∞—á–∞:
Background
I have stacked some pool balls in a triangle.
Like this,

Kata Task
Given the number of layers of my stack, what is the total height?
Return the height as multiple of the ball diameter.
Example
The image above shows a stack of 5 layers.
Notes

layers >= 0
approximate answers (within 0.001) are good enough


See Also

Stacked Balls - 2D
Stacked Balls - 3D with square base
Stacked Balls - 3D with triangle base
========================================
URL: https://www.codewars.com/kata/5bb804397274c772b40000ca
–ó–∞–¥–∞—á–∞:
Background
I have stacked some pool balls in a triangle.
Like this,

Kata Task
Given the number of layers of my stack, what is the total height?
Return the height as multiple of the ball diameter.
Example
The image above shows a stack of 5 layers.
Notes

layers >= 0
approximate answers (within 0.001) are good enough


See Also

Stacked Balls - 2D
Stacked Balls - 3D with square base
Stacked Balls - 3D with triangle base
========================================
URL: https://www.codewars.com/kata/5bbad1082ce5333f8b000006
–ó–∞–¥–∞—á–∞:
Background
I have stacked some pool balls in a triangle.
Like this,

Kata Task
Given the number of layers of my stack, what is the total height?
Return the height as multiple of the ball diameter.
Example
The image above shows a stack of 5 layers.
Notes

layers >= 0
approximate answers (within 0.001) are good enough


See Also

Stacked Balls - 2D
Stacked Balls - 3D with square base
Stacked Balls - 3D with triangle base
========================================
URL: https://www.codewars.com/kata/5bb50eb68f8bbdb4b300021d
–ó–∞–¥–∞—á–∞:
We have two consecutive integers k1 and k2, k2 = k1 + 1
We need to calculate the lowest strictly positive integer n, such that:
the values nk1 and nk2 have the same digits but in different order.
E.g.# 1:
k1 = 100
k2 = 101
n = 8919
#Because 8919 * 100 = 891900 
and      8919 * 101 = 900819

E.g.# 2:
k1 = 325
k2 = 326
n = 477
#Because 477 * 325 = 155025
and      477 * 326 = 155502

Your task is to prepare a function that will receive the value of k and outputs the value of n.
The examples given above will be:
find_lowest_int(100) === 8919
find_lowest_int(325) ===  477

Features of the random tests
10 < k < 10.000.000.000.000.000 (For Python, Ruby and Haskell)
10 < k < 1.000.000.000  (For Javascript and D 1e9)

Enjoy it!!
========================================
URL: https://www.codewars.com/kata/5bb3e299484fcd5dbb002912
–ó–∞–¥–∞—á–∞:
We have two consecutive integers k1 and k2, k2 = k1 + 1
We need to calculate the lowest strictly positive integer n, such that:
the values nk1 and nk2 have the same digits but in different order.
E.g.# 1:
k1 = 100
k2 = 101
n = 8919
#Because 8919 * 100 = 891900 
and      8919 * 101 = 900819

E.g.# 2:
k1 = 325
k2 = 326
n = 477
#Because 477 * 325 = 155025
and      477 * 326 = 155502

Your task is to prepare a function that will receive the value of k and outputs the value of n.
The examples given above will be:
find_lowest_int(100) === 8919
find_lowest_int(325) ===  477

Features of the random tests
10 < k < 10.000.000.000.000.000 (For Python, Ruby and Haskell)
10 < k < 1.000.000.000  (For Javascript and D 1e9)

Enjoy it!!
========================================
URL: https://www.codewars.com/kata/5ba38ba180824a86850000f7
–ó–∞–¥–∞—á–∞:
We have two consecutive integers k1 and k2, k2 = k1 + 1
We need to calculate the lowest strictly positive integer n, such that:
the values nk1 and nk2 have the same digits but in different order.
E.g.# 1:
k1 = 100
k2 = 101
n = 8919
#Because 8919 * 100 = 891900 
and      8919 * 101 = 900819

E.g.# 2:
k1 = 325
k2 = 326
n = 477
#Because 477 * 325 = 155025
and      477 * 326 = 155502

Your task is to prepare a function that will receive the value of k and outputs the value of n.
The examples given above will be:
find_lowest_int(100) === 8919
find_lowest_int(325) ===  477

Features of the random tests
10 < k < 10.000.000.000.000.000 (For Python, Ruby and Haskell)
10 < k < 1.000.000.000  (For Javascript and D 1e9)

Enjoy it!!
========================================
URL: https://www.codewars.com/kata/5bb493932ce53339dc0000c2
–ó–∞–¥–∞—á–∞:
We have two consecutive integers k1 and k2, k2 = k1 + 1
We need to calculate the lowest strictly positive integer n, such that:
the values nk1 and nk2 have the same digits but in different order.
E.g.# 1:
k1 = 100
k2 = 101
n = 8919
#Because 8919 * 100 = 891900 
and      8919 * 101 = 900819

E.g.# 2:
k1 = 325
k2 = 326
n = 477
#Because 477 * 325 = 155025
and      477 * 326 = 155502

Your task is to prepare a function that will receive the value of k and outputs the value of n.
The examples given above will be:
find_lowest_int(100) === 8919
find_lowest_int(325) ===  477

Features of the random tests
10 < k < 10.000.000.000.000.000 (For Python, Ruby and Haskell)
10 < k < 1.000.000.000  (For Javascript and D 1e9)

Enjoy it!!
========================================
URL: https://www.codewars.com/kata/5ba178be875de960a6000187
–ó–∞–¥–∞—á–∞:
We have two consecutive integers k1 and k2, k2 = k1 + 1
We need to calculate the lowest strictly positive integer n, such that:
the values nk1 and nk2 have the same digits but in different order.
E.g.# 1:
k1 = 100
k2 = 101
n = 8919
#Because 8919 * 100 = 891900 
and      8919 * 101 = 900819

E.g.# 2:
k1 = 325
k2 = 326
n = 477
#Because 477 * 325 = 155025
and      477 * 326 = 155502

Your task is to prepare a function that will receive the value of k and outputs the value of n.
The examples given above will be:
find_lowest_int(100) === 8919
find_lowest_int(325) ===  477

Features of the random tests
10 < k < 10.000.000.000.000.000 (For Python, Ruby and Haskell)
10 < k < 1.000.000.000  (For Javascript and D 1e9)

Enjoy it!!
========================================
URL: https://www.codewars.com/kata/5b9e29dc1d5ed219910000a7
–ó–∞–¥–∞—á–∞:
An eviternity number is a number which:

contains only digits 8, 5 and 3, and 
the count of the digit 8 >= count of digit 5 >= count of digit 3.

The first few eviternity numbers are as follows. 
[8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

You will be given two integers, a and b, and your task is to return the number of eviternity numbers in the range >= a and < b.
For example:
a=0, b=1000 => 14, because they are [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

The upper bound will not exceed 500,000.
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b94d7eb1d5ed297680000ca
–ó–∞–¥–∞—á–∞:
An eviternity number is a number which:

contains only digits 8, 5 and 3, and 
the count of the digit 8 >= count of digit 5 >= count of digit 3.

The first few eviternity numbers are as follows. 
[8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

You will be given two integers, a and b, and your task is to return the number of eviternity numbers in the range >= a and < b.
For example:
a=0, b=1000 => 14, because they are [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

The upper bound will not exceed 500,000.
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b93f268563417c7ed0001bd
–ó–∞–¥–∞—á–∞:
An eviternity number is a number which:

contains only digits 8, 5 and 3, and 
the count of the digit 8 >= count of digit 5 >= count of digit 3.

The first few eviternity numbers are as follows. 
[8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

You will be given two integers, a and b, and your task is to return the number of eviternity numbers in the range >= a and < b.
For example:
a=0, b=1000 => 14, because they are [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

The upper bound will not exceed 500,000.
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b93fecd8463745630001d05
–ó–∞–¥–∞—á–∞:
An eviternity number is a number which:

contains only digits 8, 5 and 3, and 
the count of the digit 8 >= count of digit 5 >= count of digit 3.

The first few eviternity numbers are as follows. 
[8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

You will be given two integers, a and b, and your task is to return the number of eviternity numbers in the range >= a and < b.
For example:
a=0, b=1000 => 14, because they are [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

The upper bound will not exceed 500,000.
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b9cf881d6b09fc9ee0002b1
–ó–∞–¥–∞—á–∞:
An eviternity number is a number which:

contains only digits 8, 5 and 3, and 
the count of the digit 8 >= count of digit 5 >= count of digit 3.

The first few eviternity numbers are as follows. 
[8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

You will be given two integers, a and b, and your task is to return the number of eviternity numbers in the range >= a and < b.
For example:
a=0, b=1000 => 14, because they are [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]

The upper bound will not exceed 500,000.
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b93636ba28ce032600000b7
–ó–∞–¥–∞—á–∞:
Consider the string "adfa" and the following rules: 
a) each character MUST be changed either to the one before or the one after in alphabet. 
b) "a" can only be changed to "b" and "z" to "y". 

From our string, we get:
"adfa" -> ["begb","beeb","bcgb","bceb"]

Here is another example: 
"bd" -> ["ae","ac","ce","cc"]

--We see that in each example, one of the outcomes is a palindrome. That is, "beeb" and "cc".

You will be given a lowercase string and your task is to return True if at least one of the outcomes is a palindrome or False otherwise. 
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b83c1c44a6acac33400009a
–ó–∞–¥–∞—á–∞:
Consider the string "adfa" and the following rules: 
a) each character MUST be changed either to the one before or the one after in alphabet. 
b) "a" can only be changed to "b" and "z" to "y". 

From our string, we get:
"adfa" -> ["begb","beeb","bcgb","bceb"]

Here is another example: 
"bd" -> ["ae","ac","ce","cc"]

--We see that in each example, one of the outcomes is a palindrome. That is, "beeb" and "cc".

You will be given a lowercase string and your task is to return True if at least one of the outcomes is a palindrome or False otherwise. 
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b8dc84b8ce20454bd00002e
–ó–∞–¥–∞—á–∞:
Consider the string "adfa" and the following rules: 
a) each character MUST be changed either to the one before or the one after in alphabet. 
b) "a" can only be changed to "b" and "z" to "y". 

From our string, we get:
"adfa" -> ["begb","beeb","bcgb","bceb"]

Here is another example: 
"bd" -> ["ae","ac","ce","cc"]

--We see that in each example, one of the outcomes is a palindrome. That is, "beeb" and "cc".

You will be given a lowercase string and your task is to return True if at least one of the outcomes is a palindrome or False otherwise. 
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b7bd90ef643c4df7400015d
–ó–∞–¥–∞—á–∞:
Consider the string "adfa" and the following rules: 
a) each character MUST be changed either to the one before or the one after in alphabet. 
b) "a" can only be changed to "b" and "z" to "y". 

From our string, we get:
"adfa" -> ["begb","beeb","bcgb","bceb"]

Here is another example: 
"bd" -> ["ae","ac","ce","cc"]

--We see that in each example, one of the outcomes is a palindrome. That is, "beeb" and "cc".

You will be given a lowercase string and your task is to return True if at least one of the outcomes is a palindrome or False otherwise. 
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b8be3ae36332f341e00015e
–ó–∞–¥–∞—á–∞:
Consider the string "adfa" and the following rules: 
a) each character MUST be changed either to the one before or the one after in alphabet. 
b) "a" can only be changed to "b" and "z" to "y". 

From our string, we get:
"adfa" -> ["begb","beeb","bcgb","bceb"]

Here is another example: 
"bd" -> ["ae","ac","ce","cc"]

--We see that in each example, one of the outcomes is a palindrome. That is, "beeb" and "cc".

You will be given a lowercase string and your task is to return True if at least one of the outcomes is a palindrome or False otherwise. 
More examples in test cases. Good luck!
========================================
URL: https://www.codewars.com/kata/5b752a42b11814b09c00005d
–ó–∞–¥–∞—á–∞:
Ronny the robot is watching someone perform the Cups and Balls magic trick. The magician has one ball and three cups, he shows Ronny which cup he hides the ball under (b), he then mixes all the cups around by performing multiple two-cup switches (arr). Ronny can record the switches but can't work out where the ball is. Write a programme to help him do this. 
Rules: 

There will only ever be three cups.
Only two cups will be swapped at a time. 
The cups and their switches will be refered to by their index in a row of three, beginning at one. So [[1,2]] means the cup at position one, is swapped with the cup at position two. 
Arr will be an array of integers 1 - 3 organised in pairs. 
There won't be any empty sub-arrays.
If arr is just an empty array b should be returned.

Examples: 
(b) = 2, 
(arr) = [[1,2]]
The ball is under cup number : 1

(b) = 1, 
(arr) = [[2,3],[1,2],[1,2]]
The ball is under cup number : 1

(b) = 2, 
(arr) = [[1,3],[1,2],[2,1],[2,3]]
The ball is under cup number : 3
========================================
URL: https://www.codewars.com/kata/5b728f801db5cec7320000c7
–ó–∞–¥–∞—á–∞:
Ronny the robot is watching someone perform the Cups and Balls magic trick. The magician has one ball and three cups, he shows Ronny which cup he hides the ball under (b), he then mixes all the cups around by performing multiple two-cup switches (arr). Ronny can record the switches but can't work out where the ball is. Write a programme to help him do this. 
Rules: 

There will only ever be three cups.
Only two cups will be swapped at a time. 
The cups and their switches will be refered to by their index in a row of three, beginning at one. So [[1,2]] means the cup at position one, is swapped with the cup at position two. 
Arr will be an array of integers 1 - 3 organised in pairs. 
There won't be any empty sub-arrays.
If arr is just an empty array b should be returned.

Examples: 
(b) = 2, 
(arr) = [[1,2]]
The ball is under cup number : 1

(b) = 1, 
(arr) = [[2,3],[1,2],[1,2]]
The ball is under cup number : 1

(b) = 2, 
(arr) = [[1,3],[1,2],[2,1],[2,3]]
The ball is under cup number : 3
========================================
URL: https://www.codewars.com/kata/5b71af678adeae41df00008c
–ó–∞–¥–∞—á–∞:
Ronny the robot is watching someone perform the Cups and Balls magic trick. The magician has one ball and three cups, he shows Ronny which cup he hides the ball under (b), he then mixes all the cups around by performing multiple two-cup switches (arr). Ronny can record the switches but can't work out where the ball is. Write a programme to help him do this. 
Rules: 

There will only ever be three cups.
Only two cups will be swapped at a time. 
The cups and their switches will be refered to by their index in a row of three, beginning at one. So [[1,2]] means the cup at position one, is swapped with the cup at position two. 
Arr will be an array of integers 1 - 3 organised in pairs. 
There won't be any empty sub-arrays.
If arr is just an empty array b should be returned.

Examples: 
(b) = 2, 
(arr) = [[1,2]]
The ball is under cup number : 1

(b) = 1, 
(arr) = [[2,3],[1,2],[1,2]]
The ball is under cup number : 1

(b) = 2, 
(arr) = [[1,3],[1,2],[2,1],[2,3]]
The ball is under cup number : 3
========================================
URL: https://www.codewars.com/kata/5b715fd11db5ce5912000019
–ó–∞–¥–∞—á–∞:
Ronny the robot is watching someone perform the Cups and Balls magic trick. The magician has one ball and three cups, he shows Ronny which cup he hides the ball under (b), he then mixes all the cups around by performing multiple two-cup switches (arr). Ronny can record the switches but can't work out where the ball is. Write a programme to help him do this. 
Rules: 

There will only ever be three cups.
Only two cups will be swapped at a time. 
The cups and their switches will be refered to by their index in a row of three, beginning at one. So [[1,2]] means the cup at position one, is swapped with the cup at position two. 
Arr will be an array of integers 1 - 3 organised in pairs. 
There won't be any empty sub-arrays.
If arr is just an empty array b should be returned.

Examples: 
(b) = 2, 
(arr) = [[1,2]]
The ball is under cup number : 1

(b) = 1, 
(arr) = [[2,3],[1,2],[1,2]]
The ball is under cup number : 1

(b) = 2, 
(arr) = [[1,3],[1,2],[2,1],[2,3]]
The ball is under cup number : 3
========================================
URL: https://www.codewars.com/kata/5b74532131ef05150d000109
–ó–∞–¥–∞—á–∞:
Ronny the robot is watching someone perform the Cups and Balls magic trick. The magician has one ball and three cups, he shows Ronny which cup he hides the ball under (b), he then mixes all the cups around by performing multiple two-cup switches (arr). Ronny can record the switches but can't work out where the ball is. Write a programme to help him do this. 
Rules: 

There will only ever be three cups.
Only two cups will be swapped at a time. 
The cups and their switches will be refered to by their index in a row of three, beginning at one. So [[1,2]] means the cup at position one, is swapped with the cup at position two. 
Arr will be an array of integers 1 - 3 organised in pairs. 
There won't be any empty sub-arrays.
If arr is just an empty array b should be returned.

Examples: 
(b) = 2, 
(arr) = [[1,2]]
The ball is under cup number : 1

(b) = 1, 
(arr) = [[2,3],[1,2],[1,2]]
The ball is under cup number : 1

(b) = 2, 
(arr) = [[1,3],[1,2],[2,1],[2,3]]
The ball is under cup number : 3
========================================
URL: https://www.codewars.com/kata/5b707fbc8adeaee7ac00000c
–ó–∞–¥–∞—á–∞:
Given a non-empty array of non-empty integer arrays, multiply the contents of each nested array and return the smallest total.
Example
input = [
  [1, 5],
  [2],
  [-1, -3]
]

result = 2
========================================
URL: https://www.codewars.com/kata/5b6d065a1db5ce9b4c00003c
–ó–∞–¥–∞—á–∞:
Given a non-empty array of non-empty integer arrays, multiply the contents of each nested array and return the smallest total.
Example
input = [
  [1, 5],
  [2],
  [-1, -3]
]

result = 2
========================================
URL: https://www.codewars.com/kata/5b6b128783d648c4c4000129
–ó–∞–¥–∞—á–∞:
Given a non-empty array of non-empty integer arrays, multiply the contents of each nested array and return the smallest total.
Example
input = [
  [1, 5],
  [2],
  [-1, -3]
]

result = 2
========================================
URL: https://www.codewars.com/kata/5b6c220fa0a661fbf200005d
–ó–∞–¥–∞—á–∞:
Given a non-empty array of non-empty integer arrays, multiply the contents of each nested array and return the smallest total.
Example
input = [
  [1, 5],
  [2],
  [-1, -3]
]

result = 2
========================================
URL: https://www.codewars.com/kata/5b6ee22ac5cc71833f0010d7
–ó–∞–¥–∞—á–∞:
Given a non-empty array of non-empty integer arrays, multiply the contents of each nested array and return the smallest total.
Example
input = [
  [1, 5],
  [2],
  [-1, -3]
]

result = 2
========================================
URL: https://www.codewars.com/kata/5b662d286d0db722bd000013
–ó–∞–¥–∞—á–∞:
You have a string of numbers; starting with the third number each number is the result of an operation performed using the previous two numbers.
Complete the function which returns a string of the operations in order and separated by a comma and a space, e.g. "subtraction, subtraction, addition"
The available operations are (in this order of preference):
1) addition
2) subtraction
3) multiplication
4) division

Notes:

All input data is valid
The number of numbers in the input string >= 3
For a case like "2 2 4" - when multiple variants are possible - choose the first possible operation from the list (in this case "addition")
Integer division should be used

Example
"9 4 5 20 25"  -->  "subtraction, multiplication, addition"

Because:
9 - 4 = 5   --> subtraction
4 * 5 = 20  --> multiplication
5 + 20 = 25 --> addition
========================================
URL: https://www.codewars.com/kata/5b6375f707a2664ada00002a
–ó–∞–¥–∞—á–∞:
You have a string of numbers; starting with the third number each number is the result of an operation performed using the previous two numbers.
Complete the function which returns a string of the operations in order and separated by a comma and a space, e.g. "subtraction, subtraction, addition"
The available operations are (in this order of preference):
1) addition
2) subtraction
3) multiplication
4) division

Notes:

All input data is valid
The number of numbers in the input string >= 3
For a case like "2 2 4" - when multiple variants are possible - choose the first possible operation from the list (in this case "addition")
Integer division should be used

Example
"9 4 5 20 25"  -->  "subtraction, multiplication, addition"

Because:
9 - 4 = 5   --> subtraction
4 * 5 = 20  --> multiplication
5 + 20 = 25 --> addition
========================================
URL: https://www.codewars.com/kata/5b64334ab1788374fb0000c8
–ó–∞–¥–∞—á–∞:
You have a string of numbers; starting with the third number each number is the result of an operation performed using the previous two numbers.
Complete the function which returns a string of the operations in order and separated by a comma and a space, e.g. "subtraction, subtraction, addition"
The available operations are (in this order of preference):
1) addition
2) subtraction
3) multiplication
4) division

Notes:

All input data is valid
The number of numbers in the input string >= 3
For a case like "2 2 4" - when multiple variants are possible - choose the first possible operation from the list (in this case "addition")
Integer division should be used

Example
"9 4 5 20 25"  -->  "subtraction, multiplication, addition"

Because:
9 - 4 = 5   --> subtraction
4 * 5 = 20  --> multiplication
5 + 20 = 25 --> addition
========================================
URL: https://www.codewars.com/kata/5b5e0c0d83d64866bc00001d
–ó–∞–¥–∞—á–∞:
You have a string of numbers; starting with the third number each number is the result of an operation performed using the previous two numbers.
Complete the function which returns a string of the operations in order and separated by a comma and a space, e.g. "subtraction, subtraction, addition"
The available operations are (in this order of preference):
1) addition
2) subtraction
3) multiplication
4) division

Notes:

All input data is valid
The number of numbers in the input string >= 3
For a case like "2 2 4" - when multiple variants are possible - choose the first possible operation from the list (in this case "addition")
Integer division should be used

Example
"9 4 5 20 25"  -->  "subtraction, multiplication, addition"

Because:
9 - 4 = 5   --> subtraction
4 * 5 = 20  --> multiplication
5 + 20 = 25 --> addition
========================================
URL: https://www.codewars.com/kata/5b5e0ef007a26632c400002a
–ó–∞–¥–∞—á–∞:
You have a string of numbers; starting with the third number each number is the result of an operation performed using the previous two numbers.
Complete the function which returns a string of the operations in order and separated by a comma and a space, e.g. "subtraction, subtraction, addition"
The available operations are (in this order of preference):
1) addition
2) subtraction
3) multiplication
4) division

Notes:

All input data is valid
The number of numbers in the input string >= 3
For a case like "2 2 4" - when multiple variants are possible - choose the first possible operation from the list (in this case "addition")
Integer division should be used

Example
"9 4 5 20 25"  -->  "subtraction, multiplication, addition"

Because:
9 - 4 = 5   --> subtraction
4 * 5 = 20  --> multiplication
5 + 20 = 25 --> addition
========================================
URL: https://www.codewars.com/kata/5b538734beb8654d6b00016d
–ó–∞–¥–∞—á–∞:
Task
Implement a function which finds the numbers less than 2, and the indices of numbers greater than 1 in the given sequence, and returns them as a pair of sequences. 
Return a nested array or a tuple depending on the language:

The first sequence being only the 1s and 0s from the original sequence. 
The second sequence being the indexes of the elements greater than 1 in the original sequence.

Examples
[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => [ [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] ]

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

Please upvote and enjoy!
========================================
URL: https://www.codewars.com/kata/5b5097324a317afc740000fe
–ó–∞–¥–∞—á–∞:
Task
Implement a function which finds the numbers less than 2, and the indices of numbers greater than 1 in the given sequence, and returns them as a pair of sequences. 
Return a nested array or a tuple depending on the language:

The first sequence being only the 1s and 0s from the original sequence. 
The second sequence being the indexes of the elements greater than 1 in the original sequence.

Examples
[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => [ [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] ]

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

Please upvote and enjoy!
========================================
URL: https://www.codewars.com/kata/5b5604e26dc79e6832000101
–ó–∞–¥–∞—á–∞:
Task
Implement a function which finds the numbers less than 2, and the indices of numbers greater than 1 in the given sequence, and returns them as a pair of sequences. 
Return a nested array or a tuple depending on the language:

The first sequence being only the 1s and 0s from the original sequence. 
The second sequence being the indexes of the elements greater than 1 in the original sequence.

Examples
[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => [ [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] ]

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

Please upvote and enjoy!
========================================
URL: https://www.codewars.com/kata/5b5736abf1d553f844000050
–ó–∞–¥–∞—á–∞:
Task
Implement a function which finds the numbers less than 2, and the indices of numbers greater than 1 in the given sequence, and returns them as a pair of sequences. 
Return a nested array or a tuple depending on the language:

The first sequence being only the 1s and 0s from the original sequence. 
The second sequence being the indexes of the elements greater than 1 in the original sequence.

Examples
[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => [ [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] ]

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

Please upvote and enjoy!
========================================
URL: https://www.codewars.com/kata/5b56e42805f04b1780000073
–ó–∞–¥–∞—á–∞:
Task
Implement a function which finds the numbers less than 2, and the indices of numbers greater than 1 in the given sequence, and returns them as a pair of sequences. 
Return a nested array or a tuple depending on the language:

The first sequence being only the 1s and 0s from the original sequence. 
The second sequence being the indexes of the elements greater than 1 in the original sequence.

Examples
[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => [ [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] ]

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

[ 0, 1, 2, 1, 5, 6, 2, 1, 1, 0 ] => ( [ 0, 1, 1, 1, 1, 0 ], [ 2, 4, 5, 6 ] )

Please upvote and enjoy!
========================================
URL: https://www.codewars.com/kata/5b4e474305f04bea11000148
–ó–∞–¥–∞—á–∞:
Your task is to remove all duplicate words from a string, leaving only single (first) words entries.
Example:
Input:
'alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta'
Output:
'alpha beta gamma delta'
========================================
URL: https://www.codewars.com/kata/5b39e91ee7a2c103300018b3
–ó–∞–¥–∞—á–∞:
Your task is to remove all duplicate words from a string, leaving only single (first) words entries.
Example:
Input:
'alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta'
Output:
'alpha beta gamma delta'
========================================
URL: https://www.codewars.com/kata/5b45e4b3f41dd36bf9000090
–ó–∞–¥–∞—á–∞:
Your task is to remove all duplicate words from a string, leaving only single (first) words entries.
Example:
Input:
'alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta'
Output:
'alpha beta gamma delta'
========================================
URL: https://www.codewars.com/kata/5b3e1dca3da310a4390000f3
–ó–∞–¥–∞—á–∞:
Your task is to remove all duplicate words from a string, leaving only single (first) words entries.
Example:
Input:
'alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta'
Output:
'alpha beta gamma delta'
========================================
URL: https://www.codewars.com/kata/5b39e3772ae7545f650000fc
–ó–∞–¥–∞—á–∞:
Your task is to remove all duplicate words from a string, leaving only single (first) words entries.
Example:
Input:
'alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta'
Output:
'alpha beta gamma delta'
========================================
URL: https://www.codewars.com/kata/5b37a50642b27ebf2e000010
–ó–∞–¥–∞—á–∞:
Create a Circular List
A circular list is of finite size, but can infititely be asked for its previous and next elements. This is because it acts like it is joined at the ends and loops around.
For example, imagine a CircularList of [1, 2, 3, 4]. Five invocations of next() in a row should return 1, 2, 3, 4 and then 1 again. At this point, five invocations of prev() in a row should return 4, 3, 2, 1 and then 4 again.
Your CircularList is created by passing a vargargs parameter in, e.g. new CircularList(1, 2, 3). Your list constructor/init code should throw an Exception if nothing is passed in.
========================================
URL: https://www.codewars.com/kata/5b2f6ad842b27ea689000082
–ó–∞–¥–∞—á–∞:
Create a Circular List
A circular list is of finite size, but can infititely be asked for its previous and next elements. This is because it acts like it is joined at the ends and loops around.
For example, imagine a CircularList of [1, 2, 3, 4]. Five invocations of next() in a row should return 1, 2, 3, 4 and then 1 again. At this point, five invocations of prev() in a row should return 4, 3, 2, 1 and then 4 again.
Your CircularList is created by passing a vargargs parameter in, e.g. new CircularList(1, 2, 3). Your list constructor/init code should throw an Exception if nothing is passed in.
========================================
URL: https://www.codewars.com/kata/5b2e60742ae7543f9d00005d
–ó–∞–¥–∞—á–∞:
Create a Circular List
A circular list is of finite size, but can infititely be asked for its previous and next elements. This is because it acts like it is joined at the ends and loops around.
For example, imagine a CircularList of [1, 2, 3, 4]. Five invocations of next() in a row should return 1, 2, 3, 4 and then 1 again. At this point, five invocations of prev() in a row should return 4, 3, 2, 1 and then 4 again.
Your CircularList is created by passing a vargargs parameter in, e.g. new CircularList(1, 2, 3). Your list constructor/init code should throw an Exception if nothing is passed in.
========================================
URL: https://www.codewars.com/kata/5b36137991c74600f200001b
–ó–∞–¥–∞—á–∞:
Create a Circular List
A circular list is of finite size, but can infititely be asked for its previous and next elements. This is because it acts like it is joined at the ends and loops around.
For example, imagine a CircularList of [1, 2, 3, 4]. Five invocations of next() in a row should return 1, 2, 3, 4 and then 1 again. At this point, five invocations of prev() in a row should return 4, 3, 2, 1 and then 4 again.
Your CircularList is created by passing a vargargs parameter in, e.g. new CircularList(1, 2, 3). Your list constructor/init code should throw an Exception if nothing is passed in.
========================================
URL: https://www.codewars.com/kata/5b358a1e228d316283001892
–ó–∞–¥–∞—á–∞:
Create a Circular List
A circular list is of finite size, but can infititely be asked for its previous and next elements. This is because it acts like it is joined at the ends and loops around.
For example, imagine a CircularList of [1, 2, 3, 4]. Five invocations of next() in a row should return 1, 2, 3, 4 and then 1 again. At this point, five invocations of prev() in a row should return 4, 3, 2, 1 and then 4 again.
Your CircularList is created by passing a vargargs parameter in, e.g. new CircularList(1, 2, 3). Your list constructor/init code should throw an Exception if nothing is passed in.
========================================
URL: https://www.codewars.com/kata/5b2e5a02a454c82fb9000048
–ó–∞–¥–∞—á–∞:
You are the Dungeon Master for a public DnD game at your local comic shop and recently you've had some trouble keeping your players' info neat and organized so you've decided to write a bit of code to help keep them sorted!
The goal of this code is to create an array of objects that stores a player's name and contact number from a given string.
The method should return an empty array if the argument passed is an empty string or nil/None/null.
Examples
player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
player_manager(nil) returns []
player_manager("") returns []

player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{"player": "John Doe", "contact": 8167238327}, {"player": "Jane Doe", "contact": 8163723827}]
player_manager(None) returns []
player_manager("")   returns []

playerManager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
playerManager(null) returns []
playerManager("")   returns []

Have at thee!
========================================
URL: https://www.codewars.com/kata/5b2be37991c7460d17000009
–ó–∞–¥–∞—á–∞:
You are the Dungeon Master for a public DnD game at your local comic shop and recently you've had some trouble keeping your players' info neat and organized so you've decided to write a bit of code to help keep them sorted!
The goal of this code is to create an array of objects that stores a player's name and contact number from a given string.
The method should return an empty array if the argument passed is an empty string or nil/None/null.
Examples
player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
player_manager(nil) returns []
player_manager("") returns []

player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{"player": "John Doe", "contact": 8167238327}, {"player": "Jane Doe", "contact": 8163723827}]
player_manager(None) returns []
player_manager("")   returns []

playerManager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
playerManager(null) returns []
playerManager("")   returns []

Have at thee!
========================================
URL: https://www.codewars.com/kata/5b2117eea454c89d4400005f
–ó–∞–¥–∞—á–∞:
You are the Dungeon Master for a public DnD game at your local comic shop and recently you've had some trouble keeping your players' info neat and organized so you've decided to write a bit of code to help keep them sorted!
The goal of this code is to create an array of objects that stores a player's name and contact number from a given string.
The method should return an empty array if the argument passed is an empty string or nil/None/null.
Examples
player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
player_manager(nil) returns []
player_manager("") returns []

player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{"player": "John Doe", "contact": 8167238327}, {"player": "Jane Doe", "contact": 8163723827}]
player_manager(None) returns []
player_manager("")   returns []

playerManager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
playerManager(null) returns []
playerManager("")   returns []

Have at thee!
========================================
URL: https://www.codewars.com/kata/5b23d98da97f02a5f4000a4c
–ó–∞–¥–∞—á–∞:
You are the Dungeon Master for a public DnD game at your local comic shop and recently you've had some trouble keeping your players' info neat and organized so you've decided to write a bit of code to help keep them sorted!
The goal of this code is to create an array of objects that stores a player's name and contact number from a given string.
The method should return an empty array if the argument passed is an empty string or nil/None/null.
Examples
player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
player_manager(nil) returns []
player_manager("") returns []

player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{"player": "John Doe", "contact": 8167238327}, {"player": "Jane Doe", "contact": 8163723827}]
player_manager(None) returns []
player_manager("")   returns []

playerManager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
playerManager(null) returns []
playerManager("")   returns []

Have at thee!
========================================
URL: https://www.codewars.com/kata/5b203de891c7469b520000b4
–ó–∞–¥–∞—á–∞:
You are the Dungeon Master for a public DnD game at your local comic shop and recently you've had some trouble keeping your players' info neat and organized so you've decided to write a bit of code to help keep them sorted!
The goal of this code is to create an array of objects that stores a player's name and contact number from a given string.
The method should return an empty array if the argument passed is an empty string or nil/None/null.
Examples
player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
player_manager(nil) returns []
player_manager("") returns []

player_manager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{"player": "John Doe", "contact": 8167238327}, {"player": "Jane Doe", "contact": 8163723827}]
player_manager(None) returns []
player_manager("")   returns []

playerManager("John Doe, 8167238327, Jane Doe, 8163723827") returns [{player: "John Doe", contact: 8167238327}, {player: "Jane Doe", contact: 8163723827}]
playerManager(null) returns []
playerManager("")   returns []

Have at thee!
========================================
URL: https://www.codewars.com/kata/5b18e9e06aefb52e1d0001e9
–ó–∞–¥–∞—á–∞:
Task
You are given a dictionary/hash/object containing some languages and your test results in the given languages. Return the list of languages where your test score is at least 60, in descending order of the scores.
Note: the scores will always be unique (so no duplicate values)
Examples
{"Java" => 10, "Ruby" => 80, "Python" => 65}   -->  ["Ruby", "Python"]
{"Hindi" => 60, "Dutch" => 93, "Greek" => 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++" => 50, "ASM" => 10, "Haskell" => 20}    -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

new Dictionary<string, int> {{"Java", 10}, {"Ruby", 80}, {"Python", 65}}   --> {"Ruby", "Python"}
new Dictionary<string, int> {{"Hindi", 60}, {"Greek", 71}, {"Dutch", 93}}  --> {"Dutch", "Greek", "Hindi"}
new Dictionary<string, int> {{"C++", 50}, {"ASM", 10}, {"Haskell", 20}}    --> {}

@{"Java" = 10; "Ruby" = 80; "Python" = 65}  --> @("Ruby", "Python")
@{"Hindi"= 60; "Greek"= 71; "Dutch"= 93}    --> @("Dutch", "Greek", "Hindi")
@{"C++"= 50; "ASM"= 10; "Haskell"= 20}      --> @()

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

Map("Java" -> 10, "Ruby" -> 80, "Python" -> 65)   -->  Seq("Ruby", "Python")
Map("Hindi" -> 60, "Dutch" -> 93, "Greek" -> 71)  -->  Seq("Dutch", "Greek", "Hindi")
Map("C++" -> 50, "ASM" -> 10, "Haskell" -> 20)    -->  Seq()


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5b1d1812b6989d61bd00004f
–ó–∞–¥–∞—á–∞:
Task
You are given a dictionary/hash/object containing some languages and your test results in the given languages. Return the list of languages where your test score is at least 60, in descending order of the scores.
Note: the scores will always be unique (so no duplicate values)
Examples
{"Java" => 10, "Ruby" => 80, "Python" => 65}   -->  ["Ruby", "Python"]
{"Hindi" => 60, "Dutch" => 93, "Greek" => 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++" => 50, "ASM" => 10, "Haskell" => 20}    -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

new Dictionary<string, int> {{"Java", 10}, {"Ruby", 80}, {"Python", 65}}   --> {"Ruby", "Python"}
new Dictionary<string, int> {{"Hindi", 60}, {"Greek", 71}, {"Dutch", 93}}  --> {"Dutch", "Greek", "Hindi"}
new Dictionary<string, int> {{"C++", 50}, {"ASM", 10}, {"Haskell", 20}}    --> {}

@{"Java" = 10; "Ruby" = 80; "Python" = 65}  --> @("Ruby", "Python")
@{"Hindi"= 60; "Greek"= 71; "Dutch"= 93}    --> @("Dutch", "Greek", "Hindi")
@{"C++"= 50; "ASM"= 10; "Haskell"= 20}      --> @()

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

Map("Java" -> 10, "Ruby" -> 80, "Python" -> 65)   -->  Seq("Ruby", "Python")
Map("Hindi" -> 60, "Dutch" -> 93, "Greek" -> 71)  -->  Seq("Dutch", "Greek", "Hindi")
Map("C++" -> 50, "ASM" -> 10, "Haskell" -> 20)    -->  Seq()


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5b190aa7803388ec97000054
–ó–∞–¥–∞—á–∞:
Task
You are given a dictionary/hash/object containing some languages and your test results in the given languages. Return the list of languages where your test score is at least 60, in descending order of the scores.
Note: the scores will always be unique (so no duplicate values)
Examples
{"Java" => 10, "Ruby" => 80, "Python" => 65}   -->  ["Ruby", "Python"]
{"Hindi" => 60, "Dutch" => 93, "Greek" => 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++" => 50, "ASM" => 10, "Haskell" => 20}    -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

new Dictionary<string, int> {{"Java", 10}, {"Ruby", 80}, {"Python", 65}}   --> {"Ruby", "Python"}
new Dictionary<string, int> {{"Hindi", 60}, {"Greek", 71}, {"Dutch", 93}}  --> {"Dutch", "Greek", "Hindi"}
new Dictionary<string, int> {{"C++", 50}, {"ASM", 10}, {"Haskell", 20}}    --> {}

@{"Java" = 10; "Ruby" = 80; "Python" = 65}  --> @("Ruby", "Python")
@{"Hindi"= 60; "Greek"= 71; "Dutch"= 93}    --> @("Dutch", "Greek", "Hindi")
@{"C++"= 50; "ASM"= 10; "Haskell"= 20}      --> @()

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

Map("Java" -> 10, "Ruby" -> 80, "Python" -> 65)   -->  Seq("Ruby", "Python")
Map("Hindi" -> 60, "Dutch" -> 93, "Greek" -> 71)  -->  Seq("Dutch", "Greek", "Hindi")
Map("C++" -> 50, "ASM" -> 10, "Haskell" -> 20)    -->  Seq()


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5b180e9fedaa564a7000009a
–ó–∞–¥–∞—á–∞:
Task
You are given a dictionary/hash/object containing some languages and your test results in the given languages. Return the list of languages where your test score is at least 60, in descending order of the scores.
Note: the scores will always be unique (so no duplicate values)
Examples
{"Java" => 10, "Ruby" => 80, "Python" => 65}   -->  ["Ruby", "Python"]
{"Hindi" => 60, "Dutch" => 93, "Greek" => 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++" => 50, "ASM" => 10, "Haskell" => 20}    -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

new Dictionary<string, int> {{"Java", 10}, {"Ruby", 80}, {"Python", 65}}   --> {"Ruby", "Python"}
new Dictionary<string, int> {{"Hindi", 60}, {"Greek", 71}, {"Dutch", 93}}  --> {"Dutch", "Greek", "Hindi"}
new Dictionary<string, int> {{"C++", 50}, {"ASM", 10}, {"Haskell", 20}}    --> {}

@{"Java" = 10; "Ruby" = 80; "Python" = 65}  --> @("Ruby", "Python")
@{"Hindi"= 60; "Greek"= 71; "Dutch"= 93}    --> @("Dutch", "Greek", "Hindi")
@{"C++"= 50; "ASM"= 10; "Haskell"= 20}      --> @()

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

Map("Java" -> 10, "Ruby" -> 80, "Python" -> 65)   -->  Seq("Ruby", "Python")
Map("Hindi" -> 60, "Dutch" -> 93, "Greek" -> 71)  -->  Seq("Dutch", "Greek", "Hindi")
Map("C++" -> 50, "ASM" -> 10, "Haskell" -> 20)    -->  Seq()


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5b16490986b6d336c900007d
–ó–∞–¥–∞—á–∞:
Task
You are given a dictionary/hash/object containing some languages and your test results in the given languages. Return the list of languages where your test score is at least 60, in descending order of the scores.
Note: the scores will always be unique (so no duplicate values)
Examples
{"Java" => 10, "Ruby" => 80, "Python" => 65}   -->  ["Ruby", "Python"]
{"Hindi" => 60, "Dutch" => 93, "Greek" => 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++" => 50, "ASM" => 10, "Haskell" => 20}    -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

{"Java": 10, "Ruby": 80, "Python": 65}    -->  ["Ruby", "Python"]
{"Hindi": 60, "Dutch" : 93, "Greek": 71}  -->  ["Dutch", "Greek", "Hindi"]
{"C++": 50, "ASM": 10, "Haskell": 20}     -->  []

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

new Dictionary<string, int> {{"Java", 10}, {"Ruby", 80}, {"Python", 65}}   --> {"Ruby", "Python"}
new Dictionary<string, int> {{"Hindi", 60}, {"Greek", 71}, {"Dutch", 93}}  --> {"Dutch", "Greek", "Hindi"}
new Dictionary<string, int> {{"C++", 50}, {"ASM", 10}, {"Haskell", 20}}    --> {}

@{"Java" = 10; "Ruby" = 80; "Python" = 65}  --> @("Ruby", "Python")
@{"Hindi"= 60; "Greek"= 71; "Dutch"= 93}    --> @("Dutch", "Greek", "Hindi")
@{"C++"= 50; "ASM"= 10; "Haskell"= 20}      --> @()

[ ("Java", 10), ("Ruby", 80), ("Python", 65) ]     -->  ["Ruby", "Python"]
[ ("Hindi", 60), ("Dutch", 93), ("Greek", 71) ]    -->  ["Dutch", "Greek", "Hindi"]
[ ("C++", 50), ("ASM", 10), ("Haskell", 20) ]      -->  []

Map("Java" -> 10, "Ruby" -> 80, "Python" -> 65)   -->  Seq("Ruby", "Python")
Map("Hindi" -> 60, "Dutch" -> 93, "Greek" -> 71)  -->  Seq("Dutch", "Greek", "Hindi")
Map("C++" -> 50, "ASM" -> 10, "Haskell" -> 20)    -->  Seq()


My other katas
If you enjoyed this kata then please try my other katas! :-)
Translations are welcome!
========================================
URL: https://www.codewars.com/kata/5b0d67c1cb35dfa10b0022c7
–ó–∞–¥–∞—á–∞:
Background:
In Japan, a game called Shiritori is played. The rules are simple, a group of people take turns calling out a word whose beginning syllable is the same as the previous player's ending syllable. For example, the first person would say the word „Å≠„Åì, and the second player must make a word that starts with „Åì, like„ÄÄ„Åì„ÇÄ„Åé. This repeats until a player can not think of a word fast enough or makes a word that ends in „Çì, because there are no words that begin with „Çì„ÄÄin the Japanese language.
English Shiritori has the same principle, with the first and last letters of words. That being said the lose condition is saying a word that doesn't start with the previous word's last letter or not saying a word quick enough. 
For example: apple -> eggs -> salmon -> nut -> turkey ...
Your Task:
You will be given a list of strings, a transcript of an English Shiritori match. Your task is to find out if the game ended early, and return a list that contains every valid string until the mistake. If a list is empty return an empty list. If one of the elements is an empty string, that is invalid and should be handled. 

Examples:
All elements valid:
The array {"dog","goose","elephant","tiger","rhino","orc","cat"}
should return {"dog","goose","elephant","tiger","rhino","orc","cat"}
An invalid element at index 2:
The array {"dog","goose","tiger","cat", "elephant","rhino","orc"} 
should return ("dog","goose") 
since goose ends in 'e' and tiger starts with 't'
An invalid empty string at index 2:
The array {"ab","bc","","cd"} 
should return ("ab","bc")
All invalid empty string at index 0:
The array {"","bc","","cd"} 
should return An Empty List

Resources:
https://en.wikipedia.org/wiki/Shiritori
Notes:
  Áå´ = „Å≠„Åì = neko = cat
  Â∞èÈ∫¶ = „Åì„ÇÄ„Åé = komugi = wheat
========================================
URL: https://www.codewars.com/kata/5b097da6c3323ac067000036
–ó–∞–¥–∞—á–∞:
Background:
In Japan, a game called Shiritori is played. The rules are simple, a group of people take turns calling out a word whose beginning syllable is the same as the previous player's ending syllable. For example, the first person would say the word „Å≠„Åì, and the second player must make a word that starts with „Åì, like„ÄÄ„Åì„ÇÄ„Åé. This repeats until a player can not think of a word fast enough or makes a word that ends in „Çì, because there are no words that begin with „Çì„ÄÄin the Japanese language.
English Shiritori has the same principle, with the first and last letters of words. That being said the lose condition is saying a word that doesn't start with the previous word's last letter or not saying a word quick enough. 
For example: apple -> eggs -> salmon -> nut -> turkey ...
Your Task:
You will be given a list of strings, a transcript of an English Shiritori match. Your task is to find out if the game ended early, and return a list that contains every valid string until the mistake. If a list is empty return an empty list. If one of the elements is an empty string, that is invalid and should be handled. 

Examples:
All elements valid:
The array {"dog","goose","elephant","tiger","rhino","orc","cat"}
should return {"dog","goose","elephant","tiger","rhino","orc","cat"}
An invalid element at index 2:
The array {"dog","goose","tiger","cat", "elephant","rhino","orc"} 
should return ("dog","goose") 
since goose ends in 'e' and tiger starts with 't'
An invalid empty string at index 2:
The array {"ab","bc","","cd"} 
should return ("ab","bc")
All invalid empty string at index 0:
The array {"","bc","","cd"} 
should return An Empty List

Resources:
https://en.wikipedia.org/wiki/Shiritori
Notes:
  Áå´ = „Å≠„Åì = neko = cat
  Â∞èÈ∫¶ = „Åì„ÇÄ„Åé = komugi = wheat
========================================
URL: https://www.codewars.com/kata/5b096efeaf15bef812000010
–ó–∞–¥–∞—á–∞:
Background:
In Japan, a game called Shiritori is played. The rules are simple, a group of people take turns calling out a word whose beginning syllable is the same as the previous player's ending syllable. For example, the first person would say the word „Å≠„Åì, and the second player must make a word that starts with „Åì, like„ÄÄ„Åì„ÇÄ„Åé. This repeats until a player can not think of a word fast enough or makes a word that ends in „Çì, because there are no words that begin with „Çì„ÄÄin the Japanese language.
English Shiritori has the same principle, with the first and last letters of words. That being said the lose condition is saying a word that doesn't start with the previous word's last letter or not saying a word quick enough. 
For example: apple -> eggs -> salmon -> nut -> turkey ...
Your Task:
You will be given a list of strings, a transcript of an English Shiritori match. Your task is to find out if the game ended early, and return a list that contains every valid string until the mistake. If a list is empty return an empty list. If one of the elements is an empty string, that is invalid and should be handled. 

Examples:
All elements valid:
The array {"dog","goose","elephant","tiger","rhino","orc","cat"}
should return {"dog","goose","elephant","tiger","rhino","orc","cat"}
An invalid element at index 2:
The array {"dog","goose","tiger","cat", "elephant","rhino","orc"} 
should return ("dog","goose") 
since goose ends in 'e' and tiger starts with 't'
An invalid empty string at index 2:
The array {"ab","bc","","cd"} 
should return ("ab","bc")
All invalid empty string at index 0:
The array {"","bc","","cd"} 
should return An Empty List

Resources:
https://en.wikipedia.org/wiki/Shiritori
Notes:
  Áå´ = „Å≠„Åì = neko = cat
  Â∞èÈ∫¶ = „Åì„ÇÄ„Åé = komugi = wheat
========================================
URL: https://www.codewars.com/kata/5b0c0ec907756ffcff00006e
–ó–∞–¥–∞—á–∞:
Background:
In Japan, a game called Shiritori is played. The rules are simple, a group of people take turns calling out a word whose beginning syllable is the same as the previous player's ending syllable. For example, the first person would say the word „Å≠„Åì, and the second player must make a word that starts with „Åì, like„ÄÄ„Åì„ÇÄ„Åé. This repeats until a player can not think of a word fast enough or makes a word that ends in „Çì, because there are no words that begin with „Çì„ÄÄin the Japanese language.
English Shiritori has the same principle, with the first and last letters of words. That being said the lose condition is saying a word that doesn't start with the previous word's last letter or not saying a word quick enough. 
For example: apple -> eggs -> salmon -> nut -> turkey ...
Your Task:
You will be given a list of strings, a transcript of an English Shiritori match. Your task is to find out if the game ended early, and return a list that contains every valid string until the mistake. If a list is empty return an empty list. If one of the elements is an empty string, that is invalid and should be handled. 

Examples:
All elements valid:
The array {"dog","goose","elephant","tiger","rhino","orc","cat"}
should return {"dog","goose","elephant","tiger","rhino","orc","cat"}
An invalid element at index 2:
The array {"dog","goose","tiger","cat", "elephant","rhino","orc"} 
should return ("dog","goose") 
since goose ends in 'e' and tiger starts with 't'
An invalid empty string at index 2:
The array {"ab","bc","","cd"} 
should return ("ab","bc")
All invalid empty string at index 0:
The array {"","bc","","cd"} 
should return An Empty List

Resources:
https://en.wikipedia.org/wiki/Shiritori
Notes:
  Áå´ = „Å≠„Åì = neko = cat
  Â∞èÈ∫¶ = „Åì„ÇÄ„Åé = komugi = wheat
========================================
URL: https://www.codewars.com/kata/5b04be641839f1a0ab000151
–ó–∞–¥–∞—á–∞:
Background:
In Japan, a game called Shiritori is played. The rules are simple, a group of people take turns calling out a word whose beginning syllable is the same as the previous player's ending syllable. For example, the first person would say the word „Å≠„Åì, and the second player must make a word that starts with „Åì, like„ÄÄ„Åì„ÇÄ„Åé. This repeats until a player can not think of a word fast enough or makes a word that ends in „Çì, because there are no words that begin with „Çì„ÄÄin the Japanese language.
English Shiritori has the same principle, with the first and last letters of words. That being said the lose condition is saying a word that doesn't start with the previous word's last letter or not saying a word quick enough. 
For example: apple -> eggs -> salmon -> nut -> turkey ...
Your Task:
You will be given a list of strings, a transcript of an English Shiritori match. Your task is to find out if the game ended early, and return a list that contains every valid string until the mistake. If a list is empty return an empty list. If one of the elements is an empty string, that is invalid and should be handled. 

Examples:
All elements valid:
The array {"dog","goose","elephant","tiger","rhino","orc","cat"}
should return {"dog","goose","elephant","tiger","rhino","orc","cat"}
An invalid element at index 2:
The array {"dog","goose","tiger","cat", "elephant","rhino","orc"} 
should return ("dog","goose") 
since goose ends in 'e' and tiger starts with 't'
An invalid empty string at index 2:
The array {"ab","bc","","cd"} 
should return ("ab","bc")
All invalid empty string at index 0:
The array {"","bc","","cd"} 
should return An Empty List

Resources:
https://en.wikipedia.org/wiki/Shiritori
Notes:
  Áå´ = „Å≠„Åì = neko = cat
  Â∞èÈ∫¶ = „Åì„ÇÄ„Åé = komugi = wheat
========================================
URL: https://www.codewars.com/kata/5b049d57de4c7f6a6c0001d7
–ó–∞–¥–∞—á–∞:
You are given a length of string and two thumbtacks. On thumbtack goes into the focus point F‚ÇÄ with coordinates x‚ÇÄ and y‚ÇÄ, and the other does into point F‚ÇÅ with points x‚ÇÅ and y‚ÇÅ. The string is then tied at the ends to the thumbtacks and has length l excluding the knots at the ends. If you pull the string taught with a pencil and draw around the plane you'll have an ellipse with focuses at F‚ÇÄ and F‚ÇÅ. Given a new point P, determine if it falls inside of the ellipse.
You must write a function that takes arguments f0, f1, l, and p and returns true or false depending on whether or not p falls inside the ellipse. 
Each of f0, f1, and p has has properties x and y for its coordinates.
You will never be given the case where the string is too short to reach between the points.
========================================
URL: https://www.codewars.com/kata/5b02ae6aa2afd8f1b4001ba4
–ó–∞–¥–∞—á–∞:
You are given a length of string and two thumbtacks. On thumbtack goes into the focus point F‚ÇÄ with coordinates x‚ÇÄ and y‚ÇÄ, and the other does into point F‚ÇÅ with points x‚ÇÅ and y‚ÇÅ. The string is then tied at the ends to the thumbtacks and has length l excluding the knots at the ends. If you pull the string taught with a pencil and draw around the plane you'll have an ellipse with focuses at F‚ÇÄ and F‚ÇÅ. Given a new point P, determine if it falls inside of the ellipse.
You must write a function that takes arguments f0, f1, l, and p and returns true or false depending on whether or not p falls inside the ellipse. 
Each of f0, f1, and p has has properties x and y for its coordinates.
You will never be given the case where the string is too short to reach between the points.
========================================
URL: https://www.codewars.com/kata/5b01abb9de4c7f3c22000012
–ó–∞–¥–∞—á–∞:
You are given a length of string and two thumbtacks. On thumbtack goes into the focus point F‚ÇÄ with coordinates x‚ÇÄ and y‚ÇÄ, and the other does into point F‚ÇÅ with points x‚ÇÅ and y‚ÇÅ. The string is then tied at the ends to the thumbtacks and has length l excluding the knots at the ends. If you pull the string taught with a pencil and draw around the plane you'll have an ellipse with focuses at F‚ÇÄ and F‚ÇÅ. Given a new point P, determine if it falls inside of the ellipse.
You must write a function that takes arguments f0, f1, l, and p and returns true or false depending on whether or not p falls inside the ellipse. 
Each of f0, f1, and p has has properties x and y for its coordinates.
You will never be given the case where the string is too short to reach between the points.
========================================
URL: https://www.codewars.com/kata/5b047875de4c7f9af800011b
–ó–∞–¥–∞—á–∞:
You are given a length of string and two thumbtacks. On thumbtack goes into the focus point F‚ÇÄ with coordinates x‚ÇÄ and y‚ÇÄ, and the other does into point F‚ÇÅ with points x‚ÇÅ and y‚ÇÅ. The string is then tied at the ends to the thumbtacks and has length l excluding the knots at the ends. If you pull the string taught with a pencil and draw around the plane you'll have an ellipse with focuses at F‚ÇÄ and F‚ÇÅ. Given a new point P, determine if it falls inside of the ellipse.
You must write a function that takes arguments f0, f1, l, and p and returns true or false depending on whether or not p falls inside the ellipse. 
Each of f0, f1, and p has has properties x and y for its coordinates.
You will never be given the case where the string is too short to reach between the points.
========================================
URL: https://www.codewars.com/kata/5b043e3886d0752685000009
–ó–∞–¥–∞—á–∞:
You are given a length of string and two thumbtacks. On thumbtack goes into the focus point F‚ÇÄ with coordinates x‚ÇÄ and y‚ÇÄ, and the other does into point F‚ÇÅ with points x‚ÇÅ and y‚ÇÅ. The string is then tied at the ends to the thumbtacks and has length l excluding the knots at the ends. If you pull the string taught with a pencil and draw around the plane you'll have an ellipse with focuses at F‚ÇÄ and F‚ÇÅ. Given a new point P, determine if it falls inside of the ellipse.
You must write a function that takes arguments f0, f1, l, and p and returns true or false depending on whether or not p falls inside the ellipse. 
Each of f0, f1, and p has has properties x and y for its coordinates.
You will never be given the case where the string is too short to reach between the points.
========================================
URL: https://www.codewars.com/kata/5b011461de4c7f8d78000052
–ó–∞–¥–∞—á–∞:
You are given an array of documents (strings), a term (string), and two booleans finetuning your indexing operation.
Return an array containing the document IDs (1-based indices of documents in the array), where the term occurs, sorted in ascending order.
Booleans:

CaseSensitive: test matches test, but not TestNot CaseSensitive: test matches both test and Test 

Exact Match: test matches test and .test!, but not attest or test42Not Exact Match: test matches both test and attest


Example:
buildInvertedIndex(["Sign", "sign", "Signature", "Sign-ature"], "Sign", true, true)

return [1,4]

build_inverted_index(["Sign", "sign", "Signature", "Sign-ature"], "Sign", True, True)

return [1, 4]


NLP-Series:
Part 1:
Inverted Index</a href>
========================================
URL: https://www.codewars.com/kata/5aff237c578a14752d0035ae
–ó–∞–¥–∞—á–∞:
You are given an array of documents (strings), a term (string), and two booleans finetuning your indexing operation.
Return an array containing the document IDs (1-based indices of documents in the array), where the term occurs, sorted in ascending order.
Booleans:

CaseSensitive: test matches test, but not TestNot CaseSensitive: test matches both test and Test 

Exact Match: test matches test and .test!, but not attest or test42Not Exact Match: test matches both test and attest


Example:
buildInvertedIndex(["Sign", "sign", "Signature", "Sign-ature"], "Sign", true, true)

return [1,4]

build_inverted_index(["Sign", "sign", "Signature", "Sign-ature"], "Sign", True, True)

return [1, 4]


NLP-Series:
Part 1:
Inverted Index</a href>
========================================
URL: https://www.codewars.com/kata/5af823451839f1768f00009d
–ó–∞–¥–∞—á–∞:
You are given an array of documents (strings), a term (string), and two booleans finetuning your indexing operation.
Return an array containing the document IDs (1-based indices of documents in the array), where the term occurs, sorted in ascending order.
Booleans:

CaseSensitive: test matches test, but not TestNot CaseSensitive: test matches both test and Test 

Exact Match: test matches test and .test!, but not attest or test42Not Exact Match: test matches both test and attest


Example:
buildInvertedIndex(["Sign", "sign", "Signature", "Sign-ature"], "Sign", true, true)

return [1,4]

build_inverted_index(["Sign", "sign", "Signature", "Sign-ature"], "Sign", True, True)

return [1, 4]


NLP-Series:
Part 1:
Inverted Index</a href>
========================================
URL: https://www.codewars.com/kata/5af974846bf32304a2000e98
–ó–∞–¥–∞—á–∞:
You are given an array of documents (strings), a term (string), and two booleans finetuning your indexing operation.
Return an array containing the document IDs (1-based indices of documents in the array), where the term occurs, sorted in ascending order.
Booleans:

CaseSensitive: test matches test, but not TestNot CaseSensitive: test matches both test and Test 

Exact Match: test matches test and .test!, but not attest or test42Not Exact Match: test matches both test and attest


Example:
buildInvertedIndex(["Sign", "sign", "Signature", "Sign-ature"], "Sign", true, true)

return [1,4]

build_inverted_index(["Sign", "sign", "Signature", "Sign-ature"], "Sign", True, True)

return [1, 4]


NLP-Series:
Part 1:
Inverted Index</a href>
========================================
URL: https://www.codewars.com/kata/5afd81d0de4c7f45f4000239
–ó–∞–¥–∞—á–∞:
You are given an array of documents (strings), a term (string), and two booleans finetuning your indexing operation.
Return an array containing the document IDs (1-based indices of documents in the array), where the term occurs, sorted in ascending order.
Booleans:

CaseSensitive: test matches test, but not TestNot CaseSensitive: test matches both test and Test 

Exact Match: test matches test and .test!, but not attest or test42Not Exact Match: test matches both test and attest


Example:
buildInvertedIndex(["Sign", "sign", "Signature", "Sign-ature"], "Sign", true, true)

return [1,4]

build_inverted_index(["Sign", "sign", "Signature", "Sign-ature"], "Sign", True, True)

return [1, 4]


NLP-Series:
Part 1:
Inverted Index</a href>
========================================
URL: https://www.codewars.com/kata/5af15a37de4c7f223e00012d
–ó–∞–¥–∞—á–∞:
Quadratic equations come in the form y(x) = ax^2 + bx + c. Substituting in different values of x gives us different coordinates/points on the graph of the given quadratic function.
Task:
Your job is to create a function that does the following:

Takes in three required parameters: a, b, and c, and two keyword/optional parameters, start and step. If start is not provided, it should be set as default to 0, and if step is not provided, its default value should be 1 (all of them will be passed in JS when needed).
It should return an enumerator/generator which is dynamic and created based on the arguments taken in.

What the enumerator/generator must do:
Essentially, the method you write should return an enumerator/generator which, when called, should start by yielding [start, a(start)^2 + b(start) + c], where a, b, and c, are provided when the method was called. Then start should be incremented by step and continue the sequence.
Examples:
enum = quadratic_enum(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

enum = quadratic_enum(1, 0, 0, start: 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

enum = quadratic_enum(1, 0, 0, step: 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

enum = quadratic_enum(1, 0, 0, step: -1)   # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

enum = quadratic_enum(1, 0, 0, step: 0.5)   # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadratic_gen(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadratic_gen(1, 0, 0, start = 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadratic_gen(1, 0, 0, step = 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadratic_gen(1, 0, 0, step = -1)  # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadratic_gen(1, 0, 0, step = 0.5)  # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadraticGen(1, 0, 0)   // this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadraticGen(1, 0, 0, start = 2)   // different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadraticGen(1, 0, 0, step = 2)   // different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadraticGen(1, 0, 0, step = -1)  // tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadraticGen(1, 0, 0, step = 0.5)  // step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

Solutions are rounded to 6 decimal places during tests to prevent rounding errors from causing problems.
========================================
URL: https://www.codewars.com/kata/5aefd0a686d075d5f3000091
–ó–∞–¥–∞—á–∞:
Quadratic equations come in the form y(x) = ax^2 + bx + c. Substituting in different values of x gives us different coordinates/points on the graph of the given quadratic function.
Task:
Your job is to create a function that does the following:

Takes in three required parameters: a, b, and c, and two keyword/optional parameters, start and step. If start is not provided, it should be set as default to 0, and if step is not provided, its default value should be 1 (all of them will be passed in JS when needed).
It should return an enumerator/generator which is dynamic and created based on the arguments taken in.

What the enumerator/generator must do:
Essentially, the method you write should return an enumerator/generator which, when called, should start by yielding [start, a(start)^2 + b(start) + c], where a, b, and c, are provided when the method was called. Then start should be incremented by step and continue the sequence.
Examples:
enum = quadratic_enum(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

enum = quadratic_enum(1, 0, 0, start: 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

enum = quadratic_enum(1, 0, 0, step: 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

enum = quadratic_enum(1, 0, 0, step: -1)   # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

enum = quadratic_enum(1, 0, 0, step: 0.5)   # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadratic_gen(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadratic_gen(1, 0, 0, start = 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadratic_gen(1, 0, 0, step = 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadratic_gen(1, 0, 0, step = -1)  # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadratic_gen(1, 0, 0, step = 0.5)  # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadraticGen(1, 0, 0)   // this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadraticGen(1, 0, 0, start = 2)   // different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadraticGen(1, 0, 0, step = 2)   // different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadraticGen(1, 0, 0, step = -1)  // tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadraticGen(1, 0, 0, step = 0.5)  // step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

Solutions are rounded to 6 decimal places during tests to prevent rounding errors from causing problems.
========================================
URL: https://www.codewars.com/kata/5af43416882143534300142c
–ó–∞–¥–∞—á–∞:
Quadratic equations come in the form y(x) = ax^2 + bx + c. Substituting in different values of x gives us different coordinates/points on the graph of the given quadratic function.
Task:
Your job is to create a function that does the following:

Takes in three required parameters: a, b, and c, and two keyword/optional parameters, start and step. If start is not provided, it should be set as default to 0, and if step is not provided, its default value should be 1 (all of them will be passed in JS when needed).
It should return an enumerator/generator which is dynamic and created based on the arguments taken in.

What the enumerator/generator must do:
Essentially, the method you write should return an enumerator/generator which, when called, should start by yielding [start, a(start)^2 + b(start) + c], where a, b, and c, are provided when the method was called. Then start should be incremented by step and continue the sequence.
Examples:
enum = quadratic_enum(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

enum = quadratic_enum(1, 0, 0, start: 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

enum = quadratic_enum(1, 0, 0, step: 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

enum = quadratic_enum(1, 0, 0, step: -1)   # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

enum = quadratic_enum(1, 0, 0, step: 0.5)   # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadratic_gen(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadratic_gen(1, 0, 0, start = 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadratic_gen(1, 0, 0, step = 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadratic_gen(1, 0, 0, step = -1)  # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadratic_gen(1, 0, 0, step = 0.5)  # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadraticGen(1, 0, 0)   // this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadraticGen(1, 0, 0, start = 2)   // different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadraticGen(1, 0, 0, step = 2)   // different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadraticGen(1, 0, 0, step = -1)  // tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadraticGen(1, 0, 0, step = 0.5)  // step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

Solutions are rounded to 6 decimal places during tests to prevent rounding errors from causing problems.
========================================
URL: https://www.codewars.com/kata/5aee96e22c5061ee90000024
–ó–∞–¥–∞—á–∞:
Quadratic equations come in the form y(x) = ax^2 + bx + c. Substituting in different values of x gives us different coordinates/points on the graph of the given quadratic function.
Task:
Your job is to create a function that does the following:

Takes in three required parameters: a, b, and c, and two keyword/optional parameters, start and step. If start is not provided, it should be set as default to 0, and if step is not provided, its default value should be 1 (all of them will be passed in JS when needed).
It should return an enumerator/generator which is dynamic and created based on the arguments taken in.

What the enumerator/generator must do:
Essentially, the method you write should return an enumerator/generator which, when called, should start by yielding [start, a(start)^2 + b(start) + c], where a, b, and c, are provided when the method was called. Then start should be incremented by step and continue the sequence.
Examples:
enum = quadratic_enum(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

enum = quadratic_enum(1, 0, 0, start: 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

enum = quadratic_enum(1, 0, 0, step: 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

enum = quadratic_enum(1, 0, 0, step: -1)   # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

enum = quadratic_enum(1, 0, 0, step: 0.5)   # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadratic_gen(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadratic_gen(1, 0, 0, start = 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadratic_gen(1, 0, 0, step = 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadratic_gen(1, 0, 0, step = -1)  # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadratic_gen(1, 0, 0, step = 0.5)  # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadraticGen(1, 0, 0)   // this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadraticGen(1, 0, 0, start = 2)   // different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadraticGen(1, 0, 0, step = 2)   // different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadraticGen(1, 0, 0, step = -1)  // tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadraticGen(1, 0, 0, step = 0.5)  // step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

Solutions are rounded to 6 decimal places during tests to prevent rounding errors from causing problems.
========================================
URL: https://www.codewars.com/kata/5af2b240d2ee2764420000a2
–ó–∞–¥–∞—á–∞:
Quadratic equations come in the form y(x) = ax^2 + bx + c. Substituting in different values of x gives us different coordinates/points on the graph of the given quadratic function.
Task:
Your job is to create a function that does the following:

Takes in three required parameters: a, b, and c, and two keyword/optional parameters, start and step. If start is not provided, it should be set as default to 0, and if step is not provided, its default value should be 1 (all of them will be passed in JS when needed).
It should return an enumerator/generator which is dynamic and created based on the arguments taken in.

What the enumerator/generator must do:
Essentially, the method you write should return an enumerator/generator which, when called, should start by yielding [start, a(start)^2 + b(start) + c], where a, b, and c, are provided when the method was called. Then start should be incremented by step and continue the sequence.
Examples:
enum = quadratic_enum(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

enum = quadratic_enum(1, 0, 0, start: 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

enum = quadratic_enum(1, 0, 0, step: 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

enum = quadratic_enum(1, 0, 0, step: -1)   # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

enum = quadratic_enum(1, 0, 0, step: 0.5)   # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadratic_gen(1, 0, 0)   # this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadratic_gen(1, 0, 0, start = 2)   # different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadratic_gen(1, 0, 0, step = 2)   # different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadratic_gen(1, 0, 0, step = -1)  # tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadratic_gen(1, 0, 0, step = 0.5)  # step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

gen = quadraticGen(1, 0, 0)   // this is the equation of y = x^2
First 10 values: [[0, 0], [1, 1], [2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81]]

gen = quadraticGen(1, 0, 0, start = 2)   // different start point
First 10 values: [[2, 4], [3, 9], [4, 16], [5, 25], [6, 36], [7, 49], [8, 64], [9, 81], [10, 100], [11, 121]]

gen = quadraticGen(1, 0, 0, step = 2)   // different step value
First 10 values: [[0, 0], [2, 4], [4, 16], [6, 36], [8, 64], [10, 100], [12, 144], [14, 196], [16, 256], [18, 324]]

gen = quadraticGen(1, 0, 0, step = -1)  // tracing backwards
First 10 values: [[0, 0], [-1, 1], [-2, 4], [-3, 9], [-4, 16], [-5, 25], [-6, 36], [-7, 49], [-8, 64], [-9, 81]]

gen = quadraticGen(1, 0, 0, step = 0.5)  // step is a float
First 10 values: [[0, 0], [0.5, 0.25], [1.0, 1.0], [1.5, 2.25], [2.0, 4.0], [2.5, 6.25], [3.0, 9.0], [3.5, 12.25], [4.0, 16.0], [4.5, 20.25]]

Solutions are rounded to 6 decimal places during tests to prevent rounding errors from causing problems.
========================================
URL: https://www.codewars.com/kata/5aee86c5783bb432cd000018
–ó–∞–¥–∞—á–∞:
7 Wonders
7 Wonders is a board game that consists of building your city, gathering resources and fighting your neighbors.
One part of the game is also to research science in order to gain points at the end of the game.
There are 3 types of science glyphs you can gather:

Compasses
Gears
Tablets

The way points are added up works as described here:
Step 1
Each distinct set of three different glyphs is worth 7 points:
1 Compass, 1 Gear and 1 Tablet    =  7 points
2 Compasses, 1 Gear and 1 Tablet  =  7 points (because it's just one disctinct set)

Note that a distinct set of three different glyphs means 1 Compass, 1 Gear and 1 Tablet. No more, no less!
Step 2
The amount of each glyph you own is squared and then summed up:
1 Compass, 1 Gear and 1 Tablet    =  1*1 + 1*1 + 1*1  =  3 points
2 Compasses, 1 Gear and 1 Tablet  =  2*2 + 1*1 + 1*1  =  6 points

Finally
The total science points is equal to the sum of the two steps:
1 Compass, 1 Gear and 1 Tablet    =  7 + 3  =  10 points
2 Compasses, 1 Gear and 1 Tablet  =  7 + 6  =  13 points

You will be given 3 inputs corresponding to the amount of each glyph you have acquired in the game. Your task is to output the final score.
Take into account that you may have no glyphs at all!
========================================
URL: https://www.codewars.com/kata/5ae7e3f068e6445bc8000046
–ó–∞–¥–∞—á–∞:
7 Wonders
7 Wonders is a board game that consists of building your city, gathering resources and fighting your neighbors.
One part of the game is also to research science in order to gain points at the end of the game.
There are 3 types of science glyphs you can gather:

Compasses
Gears
Tablets

The way points are added up works as described here:
Step 1
Each distinct set of three different glyphs is worth 7 points:
1 Compass, 1 Gear and 1 Tablet    =  7 points
2 Compasses, 1 Gear and 1 Tablet  =  7 points (because it's just one disctinct set)

Note that a distinct set of three different glyphs means 1 Compass, 1 Gear and 1 Tablet. No more, no less!
Step 2
The amount of each glyph you own is squared and then summed up:
1 Compass, 1 Gear and 1 Tablet    =  1*1 + 1*1 + 1*1  =  3 points
2 Compasses, 1 Gear and 1 Tablet  =  2*2 + 1*1 + 1*1  =  6 points

Finally
The total science points is equal to the sum of the two steps:
1 Compass, 1 Gear and 1 Tablet    =  7 + 3  =  10 points
2 Compasses, 1 Gear and 1 Tablet  =  7 + 6  =  13 points

You will be given 3 inputs corresponding to the amount of each glyph you have acquired in the game. Your task is to output the final score.
Take into account that you may have no glyphs at all!
========================================
URL: https://www.codewars.com/kata/5ae1dcde9c0e489ae00019fc
–ó–∞–¥–∞—á–∞:
7 Wonders
7 Wonders is a board game that consists of building your city, gathering resources and fighting your neighbors.
One part of the game is also to research science in order to gain points at the end of the game.
There are 3 types of science glyphs you can gather:

Compasses
Gears
Tablets

The way points are added up works as described here:
Step 1
Each distinct set of three different glyphs is worth 7 points:
1 Compass, 1 Gear and 1 Tablet    =  7 points
2 Compasses, 1 Gear and 1 Tablet  =  7 points (because it's just one disctinct set)

Note that a distinct set of three different glyphs means 1 Compass, 1 Gear and 1 Tablet. No more, no less!
Step 2
The amount of each glyph you own is squared and then summed up:
1 Compass, 1 Gear and 1 Tablet    =  1*1 + 1*1 + 1*1  =  3 points
2 Compasses, 1 Gear and 1 Tablet  =  2*2 + 1*1 + 1*1  =  6 points

Finally
The total science points is equal to the sum of the two steps:
1 Compass, 1 Gear and 1 Tablet    =  7 + 3  =  10 points
2 Compasses, 1 Gear and 1 Tablet  =  7 + 6  =  13 points

You will be given 3 inputs corresponding to the amount of each glyph you have acquired in the game. Your task is to output the final score.
Take into account that you may have no glyphs at all!
========================================
URL: https://www.codewars.com/kata/5ae7e1522c5061beb7000051
–ó–∞–¥–∞—á–∞:
7 Wonders
7 Wonders is a board game that consists of building your city, gathering resources and fighting your neighbors.
One part of the game is also to research science in order to gain points at the end of the game.
There are 3 types of science glyphs you can gather:

Compasses
Gears
Tablets

The way points are added up works as described here:
Step 1
Each distinct set of three different glyphs is worth 7 points:
1 Compass, 1 Gear and 1 Tablet    =  7 points
2 Compasses, 1 Gear and 1 Tablet  =  7 points (because it's just one disctinct set)

Note that a distinct set of three different glyphs means 1 Compass, 1 Gear and 1 Tablet. No more, no less!
Step 2
The amount of each glyph you own is squared and then summed up:
1 Compass, 1 Gear and 1 Tablet    =  1*1 + 1*1 + 1*1  =  3 points
2 Compasses, 1 Gear and 1 Tablet  =  2*2 + 1*1 + 1*1  =  6 points

Finally
The total science points is equal to the sum of the two steps:
1 Compass, 1 Gear and 1 Tablet    =  7 + 3  =  10 points
2 Compasses, 1 Gear and 1 Tablet  =  7 + 6  =  13 points

You will be given 3 inputs corresponding to the amount of each glyph you have acquired in the game. Your task is to output the final score.
Take into account that you may have no glyphs at all!
========================================
URL: https://www.codewars.com/kata/5adadcb36edb07df5600092e
–ó–∞–¥–∞—á–∞:
7 Wonders
7 Wonders is a board game that consists of building your city, gathering resources and fighting your neighbors.
One part of the game is also to research science in order to gain points at the end of the game.
There are 3 types of science glyphs you can gather:

Compasses
Gears
Tablets

The way points are added up works as described here:
Step 1
Each distinct set of three different glyphs is worth 7 points:
1 Compass, 1 Gear and 1 Tablet    =  7 points
2 Compasses, 1 Gear and 1 Tablet  =  7 points (because it's just one disctinct set)

Note that a distinct set of three different glyphs means 1 Compass, 1 Gear and 1 Tablet. No more, no less!
Step 2
The amount of each glyph you own is squared and then summed up:
1 Compass, 1 Gear and 1 Tablet    =  1*1 + 1*1 + 1*1  =  3 points
2 Compasses, 1 Gear and 1 Tablet  =  2*2 + 1*1 + 1*1  =  6 points

Finally
The total science points is equal to the sum of the two steps:
1 Compass, 1 Gear and 1 Tablet    =  7 + 3  =  10 points
2 Compasses, 1 Gear and 1 Tablet  =  7 + 6  =  13 points

You will be given 3 inputs corresponding to the amount of each glyph you have acquired in the game. Your task is to output the final score.
Take into account that you may have no glyphs at all!
========================================
URL: https://www.codewars.com/kata/5ad29cd95e8240dd85000b54
–ó–∞–¥–∞—á–∞:
This is a problem that involves adding numbers to items in a list. In a list you will have to add the item's remainder when divided by a given divisor to each item.
For example if the item is 40 and the divisor is 3 you would have to add 1 since 40 minus the closest multiple of 3 which is 39 is 1. So the 40 in the list will become 41. You would have to return the modified list in this problem.
For this problem you will receive a divisor called div as well as simple list of whole numbers called nums. Good luck and happy coding.
Examples
nums = [2, 7, 5, 9, 100, 34, 32, 0], div = 3
  ==>  [4, 8, 7, 9, 101, 35, 34, 0] 

nums = [1000, 999, 998, 997], div = 5
   ==> [1000, 1003, 1001, 999]

nums = [], div = 2
   ==> []

Note: random tests check lists containing up to 10000 elements.
========================================
URL: https://www.codewars.com/kata/5ace2d9f307eb29430000092
–ó–∞–¥–∞—á–∞:
This is a problem that involves adding numbers to items in a list. In a list you will have to add the item's remainder when divided by a given divisor to each item.
For example if the item is 40 and the divisor is 3 you would have to add 1 since 40 minus the closest multiple of 3 which is 39 is 1. So the 40 in the list will become 41. You would have to return the modified list in this problem.
For this problem you will receive a divisor called div as well as simple list of whole numbers called nums. Good luck and happy coding.
Examples
nums = [2, 7, 5, 9, 100, 34, 32, 0], div = 3
  ==>  [4, 8, 7, 9, 101, 35, 34, 0] 

nums = [1000, 999, 998, 997], div = 5
   ==> [1000, 1003, 1001, 999]

nums = [], div = 2
   ==> []

Note: random tests check lists containing up to 10000 elements.
========================================
URL: https://www.codewars.com/kata/5acc3634c6fde760ec0001f7
–ó–∞–¥–∞—á–∞:
This is a problem that involves adding numbers to items in a list. In a list you will have to add the item's remainder when divided by a given divisor to each item.
For example if the item is 40 and the divisor is 3 you would have to add 1 since 40 minus the closest multiple of 3 which is 39 is 1. So the 40 in the list will become 41. You would have to return the modified list in this problem.
For this problem you will receive a divisor called div as well as simple list of whole numbers called nums. Good luck and happy coding.
Examples
nums = [2, 7, 5, 9, 100, 34, 32, 0], div = 3
  ==>  [4, 8, 7, 9, 101, 35, 34, 0] 

nums = [1000, 999, 998, 997], div = 5
   ==> [1000, 1003, 1001, 999]

nums = [], div = 2
   ==> []

Note: random tests check lists containing up to 10000 elements.
========================================
URL: https://www.codewars.com/kata/5acc79efc6fde7838a0000a0
–ó–∞–¥–∞—á–∞:
This is a problem that involves adding numbers to items in a list. In a list you will have to add the item's remainder when divided by a given divisor to each item.
For example if the item is 40 and the divisor is 3 you would have to add 1 since 40 minus the closest multiple of 3 which is 39 is 1. So the 40 in the list will become 41. You would have to return the modified list in this problem.
For this problem you will receive a divisor called div as well as simple list of whole numbers called nums. Good luck and happy coding.
Examples
nums = [2, 7, 5, 9, 100, 34, 32, 0], div = 3
  ==>  [4, 8, 7, 9, 101, 35, 34, 0] 

nums = [1000, 999, 998, 997], div = 5
   ==> [1000, 1003, 1001, 999]

nums = [], div = 2
   ==> []

Note: random tests check lists containing up to 10000 elements.
========================================
URL: https://www.codewars.com/kata/5acf710f46b4cb00810001e2
–ó–∞–¥–∞—á–∞:
This is a problem that involves adding numbers to items in a list. In a list you will have to add the item's remainder when divided by a given divisor to each item.
For example if the item is 40 and the divisor is 3 you would have to add 1 since 40 minus the closest multiple of 3 which is 39 is 1. So the 40 in the list will become 41. You would have to return the modified list in this problem.
For this problem you will receive a divisor called div as well as simple list of whole numbers called nums. Good luck and happy coding.
Examples
nums = [2, 7, 5, 9, 100, 34, 32, 0], div = 3
  ==>  [4, 8, 7, 9, 101, 35, 34, 0] 

nums = [1000, 999, 998, 997], div = 5
   ==> [1000, 1003, 1001, 999]

nums = [], div = 2
   ==> []

Note: random tests check lists containing up to 10000 elements.
========================================
URL: https://www.codewars.com/kata/5acbc3b3481ebb23a400007d
–ó–∞–¥–∞—á–∞:
Given a string of characters, I want the function findMiddle()/find_middle() to return the middle number in the product of each digit in the string.
Example: 's7d8jd9' -> 7, 8, 9 -> 7*8*9=504, thus 0 should be returned as an integer.
Not all strings will contain digits. In this case and the case for any non-strings, return -1.
If the product has an even number of digits, return the middle two digits
Example: 1563 -> 56
NOTE: Remove leading zeros if product is even and the first digit of the two is a zero.
Example 2016 -> 1
========================================
URL: https://www.codewars.com/kata/5ac6932b2f317b96980000ca
–ó–∞–¥–∞—á–∞:
Given a string of characters, I want the function findMiddle()/find_middle() to return the middle number in the product of each digit in the string.
Example: 's7d8jd9' -> 7, 8, 9 -> 7*8*9=504, thus 0 should be returned as an integer.
Not all strings will contain digits. In this case and the case for any non-strings, return -1.
If the product has an even number of digits, return the middle two digits
Example: 1563 -> 56
NOTE: Remove leading zeros if product is even and the first digit of the two is a zero.
Example 2016 -> 1
========================================
URL: https://www.codewars.com/kata/5aca48db188ab3558e0030fa
–ó–∞–¥–∞—á–∞:
Given a string of characters, I want the function findMiddle()/find_middle() to return the middle number in the product of each digit in the string.
Example: 's7d8jd9' -> 7, 8, 9 -> 7*8*9=504, thus 0 should be returned as an integer.
Not all strings will contain digits. In this case and the case for any non-strings, return -1.
If the product has an even number of digits, return the middle two digits
Example: 1563 -> 56
NOTE: Remove leading zeros if product is even and the first digit of the two is a zero.
Example 2016 -> 1
========================================
URL: https://www.codewars.com/kata/5ac5e9aa3853da25d9000102
–ó–∞–¥–∞—á–∞:
Given a string of characters, I want the function findMiddle()/find_middle() to return the middle number in the product of each digit in the string.
Example: 's7d8jd9' -> 7, 8, 9 -> 7*8*9=504, thus 0 should be returned as an integer.
Not all strings will contain digits. In this case and the case for any non-strings, return -1.
If the product has an even number of digits, return the middle two digits
Example: 1563 -> 56
NOTE: Remove leading zeros if product is even and the first digit of the two is a zero.
Example 2016 -> 1
========================================
URL: https://www.codewars.com/kata/5ac54bcbb925d9b437000001
–ó–∞–¥–∞—á–∞:
Given a string of characters, I want the function findMiddle()/find_middle() to return the middle number in the product of each digit in the string.
Example: 's7d8jd9' -> 7, 8, 9 -> 7*8*9=504, thus 0 should be returned as an integer.
Not all strings will contain digits. In this case and the case for any non-strings, return -1.
If the product has an even number of digits, return the middle two digits
Example: 1563 -> 56
NOTE: Remove leading zeros if product is even and the first digit of the two is a zero.
Example 2016 -> 1
========================================
URL: https://www.codewars.com/kata/5abbb33396194245d5000161
–ó–∞–¥–∞—á–∞:
Mr Leicester's cheese factory is the pride of the East Midlands, but he's feeling a little blue. It's the time of the year when the taxman is coming round to take a slice of his cheddar - and the final thing he has to work out is how much money he's spending on his staff. Poor Mr Leicester can barely sleep he's so stressed. Can you help? 

Mr Leicester employs 4 staff, who together make 10 wheels of cheese every 6 minutes.
Worker pay is calculated on how many wheels of cheese they produce in a day. 
Mr Leicester pays his staff according to the UK living wage, which is currently ¬£8.75p an hour. There are 100 pence (p) to the UK pound (¬£).

The input for function payCheese will be provided as an array of five integers, one for each amount of cheese wheels produced each day.
When the workforce don't work a nice integer number of minutes - much to the chagrin of the company accountant - Mr Leicester very generously rounds up to the nearest hour at the end of the week (not the end of each day). Which means if the workers make 574 wheels on each day of the week, they're each paid 29 hours for the week (28.699 hours rounded up) and not 30 (6 hours a day rounded up * 5).
The return value should be a string (with the ¬£ included) of the total ¬£ of staff wages for that week.
========================================
URL: https://www.codewars.com/kata/5abd66a5ccfd1130b30000a9
–ó–∞–¥–∞—á–∞:
Mr Leicester's cheese factory is the pride of the East Midlands, but he's feeling a little blue. It's the time of the year when the taxman is coming round to take a slice of his cheddar - and the final thing he has to work out is how much money he's spending on his staff. Poor Mr Leicester can barely sleep he's so stressed. Can you help? 

Mr Leicester employs 4 staff, who together make 10 wheels of cheese every 6 minutes.
Worker pay is calculated on how many wheels of cheese they produce in a day. 
Mr Leicester pays his staff according to the UK living wage, which is currently ¬£8.75p an hour. There are 100 pence (p) to the UK pound (¬£).

The input for function payCheese will be provided as an array of five integers, one for each amount of cheese wheels produced each day.
When the workforce don't work a nice integer number of minutes - much to the chagrin of the company accountant - Mr Leicester very generously rounds up to the nearest hour at the end of the week (not the end of each day). Which means if the workers make 574 wheels on each day of the week, they're each paid 29 hours for the week (28.699 hours rounded up) and not 30 (6 hours a day rounded up * 5).
The return value should be a string (with the ¬£ included) of the total ¬£ of staff wages for that week.
========================================
URL: https://www.codewars.com/kata/5aba780a6a176b029800041c
–ó–∞–¥–∞—á–∞:
Mr Leicester's cheese factory is the pride of the East Midlands, but he's feeling a little blue. It's the time of the year when the taxman is coming round to take a slice of his cheddar - and the final thing he has to work out is how much money he's spending on his staff. Poor Mr Leicester can barely sleep he's so stressed. Can you help? 

Mr Leicester employs 4 staff, who together make 10 wheels of cheese every 6 minutes.
Worker pay is calculated on how many wheels of cheese they produce in a day. 
Mr Leicester pays his staff according to the UK living wage, which is currently ¬£8.75p an hour. There are 100 pence (p) to the UK pound (¬£).

The input for function payCheese will be provided as an array of five integers, one for each amount of cheese wheels produced each day.
When the workforce don't work a nice integer number of minutes - much to the chagrin of the company accountant - Mr Leicester very generously rounds up to the nearest hour at the end of the week (not the end of each day). Which means if the workers make 574 wheels on each day of the week, they're each paid 29 hours for the week (28.699 hours rounded up) and not 30 (6 hours a day rounded up * 5).
The return value should be a string (with the ¬£ included) of the total ¬£ of staff wages for that week.
========================================
URL: https://www.codewars.com/kata/5aba0a08379d20026e0000be
–ó–∞–¥–∞—á–∞:
Mr Leicester's cheese factory is the pride of the East Midlands, but he's feeling a little blue. It's the time of the year when the taxman is coming round to take a slice of his cheddar - and the final thing he has to work out is how much money he's spending on his staff. Poor Mr Leicester can barely sleep he's so stressed. Can you help? 

Mr Leicester employs 4 staff, who together make 10 wheels of cheese every 6 minutes.
Worker pay is calculated on how many wheels of cheese they produce in a day. 
Mr Leicester pays his staff according to the UK living wage, which is currently ¬£8.75p an hour. There are 100 pence (p) to the UK pound (¬£).

The input for function payCheese will be provided as an array of five integers, one for each amount of cheese wheels produced each day.
When the workforce don't work a nice integer number of minutes - much to the chagrin of the company accountant - Mr Leicester very generously rounds up to the nearest hour at the end of the week (not the end of each day). Which means if the workers make 574 wheels on each day of the week, they're each paid 29 hours for the week (28.699 hours rounded up) and not 30 (6 hours a day rounded up * 5).
The return value should be a string (with the ¬£ included) of the total ¬£ of staff wages for that week.
========================================
URL: https://www.codewars.com/kata/5ab7ee556a176b1043000047
–ó–∞–¥–∞—á–∞:
Mr Leicester's cheese factory is the pride of the East Midlands, but he's feeling a little blue. It's the time of the year when the taxman is coming round to take a slice of his cheddar - and the final thing he has to work out is how much money he's spending on his staff. Poor Mr Leicester can barely sleep he's so stressed. Can you help? 

Mr Leicester employs 4 staff, who together make 10 wheels of cheese every 6 minutes.
Worker pay is calculated on how many wheels of cheese they produce in a day. 
Mr Leicester pays his staff according to the UK living wage, which is currently ¬£8.75p an hour. There are 100 pence (p) to the UK pound (¬£).

The input for function payCheese will be provided as an array of five integers, one for each amount of cheese wheels produced each day.
When the workforce don't work a nice integer number of minutes - much to the chagrin of the company accountant - Mr Leicester very generously rounds up to the nearest hour at the end of the week (not the end of each day). Which means if the workers make 574 wheels on each day of the week, they're each paid 29 hours for the week (28.699 hours rounded up) and not 30 (6 hours a day rounded up * 5).
The return value should be a string (with the ¬£ included) of the total ¬£ of staff wages for that week.
========================================
URL: https://www.codewars.com/kata/5ab363ff6a176b29880000dd
–ó–∞–¥–∞—á–∞:
You're given an ancient book that unfortunately has a few pages in the wrong position, fortunately your computer has a list of every page number in order from 1 to n.
You're supplied with an array of numbers, and should return an array with each page number that is out of place. Incorrect page numbers may appear next to each other. Duplicate incorrect page numbers are possible.
Example:
Given: list = [1,2,10,3,4,5,8,6,7]
Return: [10,8]

Your returning list should have the incorrect page numbers in the order they were found.
========================================
URL: https://www.codewars.com/kata/5aa39ba75084d7cf45000008
–ó–∞–¥–∞—á–∞:
You're given an ancient book that unfortunately has a few pages in the wrong position, fortunately your computer has a list of every page number in order from 1 to n.
You're supplied with an array of numbers, and should return an array with each page number that is out of place. Incorrect page numbers may appear next to each other. Duplicate incorrect page numbers are possible.
Example:
Given: list = [1,2,10,3,4,5,8,6,7]
Return: [10,8]

Your returning list should have the incorrect page numbers in the order they were found.
========================================
URL: https://www.codewars.com/kata/5ab3495595df9ec78f0000b4
–ó–∞–¥–∞—á–∞:
You're given an ancient book that unfortunately has a few pages in the wrong position, fortunately your computer has a list of every page number in order from 1 to n.
You're supplied with an array of numbers, and should return an array with each page number that is out of place. Incorrect page numbers may appear next to each other. Duplicate incorrect page numbers are possible.
Example:
Given: list = [1,2,10,3,4,5,8,6,7]
Return: [10,8]

Your returning list should have the incorrect page numbers in the order they were found.
========================================
URL: https://www.codewars.com/kata/5aa20a964a6b34417c00008d
–ó–∞–¥–∞—á–∞:
You're given an ancient book that unfortunately has a few pages in the wrong position, fortunately your computer has a list of every page number in order from 1 to n.
You're supplied with an array of numbers, and should return an array with each page number that is out of place. Incorrect page numbers may appear next to each other. Duplicate incorrect page numbers are possible.
Example:
Given: list = [1,2,10,3,4,5,8,6,7]
Return: [10,8]

Your returning list should have the incorrect page numbers in the order they were found.
========================================
URL: https://www.codewars.com/kata/5aa3af22ba1bb5209f000037
–ó–∞–¥–∞—á–∞:
You're given an ancient book that unfortunately has a few pages in the wrong position, fortunately your computer has a list of every page number in order from 1 to n.
You're supplied with an array of numbers, and should return an array with each page number that is out of place. Incorrect page numbers may appear next to each other. Duplicate incorrect page numbers are possible.
Example:
Given: list = [1,2,10,3,4,5,8,6,7]
Return: [10,8]

Your returning list should have the incorrect page numbers in the order they were found.
========================================
URL: https://www.codewars.com/kata/5aa1bcda373c2eb596000112
–ó–∞–¥–∞—á–∞:
Story
The construction of the new Death Star is almost complete. It only needs a certain amount of 3 materials ‚Äì iron, steel, and chromium. The emperor wants the construction finished within a week because he senses an impending rebel attack and knows the battle station will be destroyed if it is not completed within this timeframe. He has already ordered enough material delivered to the station within a week. The problem is, the rebels are attacking the supply routes and there are different amounts of material arriving at the station each week. Will the station be ready in time or will it be destroyed?
Task
The required resources are:

100 Gt of iron
75 Gt of steel
50 Gt of chromium

The input will consist of an array with 8 elements:

The first 7 elements are the shipments - 3-elements-long arrays where each number corresponds to the amount of material that was ordered (iron, steel, and chromium)
The last element is a number representing the day of the rebel attack (0-indexed) - any materials which should have been delivered that day will be lost, and later shipments will be cancelled due to the trading route becoming unsafe

The output will be one of the two possible string:

In case enough resources were delivered before the attack, return "The station is completed!"
Otherwise, return "The station is destroyed! It needed X iron, Y steel and Z chromium for completion.", where X, Y and Z are the quantities of the respective material
========================================
URL: https://www.codewars.com/kata/5a996f3d5084d73a7100040c
–ó–∞–¥–∞—á–∞:
Story
The construction of the new Death Star is almost complete. It only needs a certain amount of 3 materials ‚Äì iron, steel, and chromium. The emperor wants the construction finished within a week because he senses an impending rebel attack and knows the battle station will be destroyed if it is not completed within this timeframe. He has already ordered enough material delivered to the station within a week. The problem is, the rebels are attacking the supply routes and there are different amounts of material arriving at the station each week. Will the station be ready in time or will it be destroyed?
Task
The required resources are:

100 Gt of iron
75 Gt of steel
50 Gt of chromium

The input will consist of an array with 8 elements:

The first 7 elements are the shipments - 3-elements-long arrays where each number corresponds to the amount of material that was ordered (iron, steel, and chromium)
The last element is a number representing the day of the rebel attack (0-indexed) - any materials which should have been delivered that day will be lost, and later shipments will be cancelled due to the trading route becoming unsafe

The output will be one of the two possible string:

In case enough resources were delivered before the attack, return "The station is completed!"
Otherwise, return "The station is destroyed! It needed X iron, Y steel and Z chromium for completion.", where X, Y and Z are the quantities of the respective material
========================================
URL: https://www.codewars.com/kata/5a9e86705ee396d6be000091
–ó–∞–¥–∞—á–∞:
Story
The construction of the new Death Star is almost complete. It only needs a certain amount of 3 materials ‚Äì iron, steel, and chromium. The emperor wants the construction finished within a week because he senses an impending rebel attack and knows the battle station will be destroyed if it is not completed within this timeframe. He has already ordered enough material delivered to the station within a week. The problem is, the rebels are attacking the supply routes and there are different amounts of material arriving at the station each week. Will the station be ready in time or will it be destroyed?
Task
The required resources are:

100 Gt of iron
75 Gt of steel
50 Gt of chromium

The input will consist of an array with 8 elements:

The first 7 elements are the shipments - 3-elements-long arrays where each number corresponds to the amount of material that was ordered (iron, steel, and chromium)
The last element is a number representing the day of the rebel attack (0-indexed) - any materials which should have been delivered that day will be lost, and later shipments will be cancelled due to the trading route becoming unsafe

The output will be one of the two possible string:

In case enough resources were delivered before the attack, return "The station is completed!"
Otherwise, return "The station is destroyed! It needed X iron, Y steel and Z chromium for completion.", where X, Y and Z are the quantities of the respective material
========================================
URL: https://www.codewars.com/kata/5a99a1418e503ffb8300384c
–ó–∞–¥–∞—á–∞:
Story
The construction of the new Death Star is almost complete. It only needs a certain amount of 3 materials ‚Äì iron, steel, and chromium. The emperor wants the construction finished within a week because he senses an impending rebel attack and knows the battle station will be destroyed if it is not completed within this timeframe. He has already ordered enough material delivered to the station within a week. The problem is, the rebels are attacking the supply routes and there are different amounts of material arriving at the station each week. Will the station be ready in time or will it be destroyed?
Task
The required resources are:

100 Gt of iron
75 Gt of steel
50 Gt of chromium

The input will consist of an array with 8 elements:

The first 7 elements are the shipments - 3-elements-long arrays where each number corresponds to the amount of material that was ordered (iron, steel, and chromium)
The last element is a number representing the day of the rebel attack (0-indexed) - any materials which should have been delivered that day will be lost, and later shipments will be cancelled due to the trading route becoming unsafe

The output will be one of the two possible string:

In case enough resources were delivered before the attack, return "The station is completed!"
Otherwise, return "The station is destroyed! It needed X iron, Y steel and Z chromium for completion.", where X, Y and Z are the quantities of the respective material
========================================
URL: https://www.codewars.com/kata/5a9996fa8e503f2b4a002e7a
–ó–∞–¥–∞—á–∞:
Story
The construction of the new Death Star is almost complete. It only needs a certain amount of 3 materials ‚Äì iron, steel, and chromium. The emperor wants the construction finished within a week because he senses an impending rebel attack and knows the battle station will be destroyed if it is not completed within this timeframe. He has already ordered enough material delivered to the station within a week. The problem is, the rebels are attacking the supply routes and there are different amounts of material arriving at the station each week. Will the station be ready in time or will it be destroyed?
Task
The required resources are:

100 Gt of iron
75 Gt of steel
50 Gt of chromium

The input will consist of an array with 8 elements:

The first 7 elements are the shipments - 3-elements-long arrays where each number corresponds to the amount of material that was ordered (iron, steel, and chromium)
The last element is a number representing the day of the rebel attack (0-indexed) - any materials which should have been delivered that day will be lost, and later shipments will be cancelled due to the trading route becoming unsafe

The output will be one of the two possible string:

In case enough resources were delivered before the attack, return "The station is completed!"
Otherwise, return "The station is destroyed! It needed X iron, Y steel and Z chromium for completion.", where X, Y and Z are the quantities of the respective material
========================================
URL: https://www.codewars.com/kata/5a941f4e1a60f6e8a70025fe
–ó–∞–¥–∞—á–∞:
Introduction and Warm-up (Highly recommended)
Playing With Lists/Arrays Series

Task
Given an array/list [] of integers , Construct a product array Of same size Such That prod[i] is equal to The Product of all the elements of Arr[] except Arr[i]. 

Notes

Array/list size is at least 2 .

Array/list's numbers  Will be only Positives 

Repetition of numbers in the array/list could occur.



Input >> Output Examples
productArray ({12,20}) ==>  return {20,12}

Explanation:

The first element in prod [] array 20 is the product of all array's elements except the first element

The second element 12 is the product of all array's elements except the second element .



productArray ({1,5,2}) ==> return {10,2,5}

Explanation:

The first element 10 is the product of all array's elements except the first element 1

The second element 2 is the product of all array's elements except the second element 5 

The Third element 5 is the product of all array's elements except the Third element 2.



productArray ({10,3,5,6,2}) return ==> {180,600,360,300,900}

Explanation:

The first element 180 is the product of all array's elements except the first element 10 

The second element 600 is the product of all array's elements except the second element 3 

The Third element 360 is the product of all array's elements except the third element 5

The Fourth element 300 is the product of all array's elements except the fourth element 6 

Finally ,The Fifth element 900 is the product of all array's elements except the fifth element 2



A more challenging version of this kata by Firefly2002


Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a97387e5ee396e70a00016d
–ó–∞–¥–∞—á–∞:
Introduction and Warm-up (Highly recommended)
Playing With Lists/Arrays Series

Task
Given an array/list [] of integers , Construct a product array Of same size Such That prod[i] is equal to The Product of all the elements of Arr[] except Arr[i]. 

Notes

Array/list size is at least 2 .

Array/list's numbers  Will be only Positives 

Repetition of numbers in the array/list could occur.



Input >> Output Examples
productArray ({12,20}) ==>  return {20,12}

Explanation:

The first element in prod [] array 20 is the product of all array's elements except the first element

The second element 12 is the product of all array's elements except the second element .



productArray ({1,5,2}) ==> return {10,2,5}

Explanation:

The first element 10 is the product of all array's elements except the first element 1

The second element 2 is the product of all array's elements except the second element 5 

The Third element 5 is the product of all array's elements except the Third element 2.



productArray ({10,3,5,6,2}) return ==> {180,600,360,300,900}

Explanation:

The first element 180 is the product of all array's elements except the first element 10 

The second element 600 is the product of all array's elements except the second element 3 

The Third element 360 is the product of all array's elements except the third element 5

The Fourth element 300 is the product of all array's elements except the fourth element 6 

Finally ,The Fifth element 900 is the product of all array's elements except the fifth element 2



A more challenging version of this kata by Firefly2002


Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a91a7c5fd8c061367000002
–ó–∞–¥–∞—á–∞:
Introduction and Warm-up (Highly recommended)
Playing With Lists/Arrays Series

Task
Given an array/list [] of integers , Construct a product array Of same size Such That prod[i] is equal to The Product of all the elements of Arr[] except Arr[i]. 

Notes

Array/list size is at least 2 .

Array/list's numbers  Will be only Positives 

Repetition of numbers in the array/list could occur.



Input >> Output Examples
productArray ({12,20}) ==>  return {20,12}

Explanation:

The first element in prod [] array 20 is the product of all array's elements except the first element

The second element 12 is the product of all array's elements except the second element .



productArray ({1,5,2}) ==> return {10,2,5}

Explanation:

The first element 10 is the product of all array's elements except the first element 1

The second element 2 is the product of all array's elements except the second element 5 

The Third element 5 is the product of all array's elements except the Third element 2.



productArray ({10,3,5,6,2}) return ==> {180,600,360,300,900}

Explanation:

The first element 180 is the product of all array's elements except the first element 10 

The second element 600 is the product of all array's elements except the second element 3 

The Third element 360 is the product of all array's elements except the third element 5

The Fourth element 300 is the product of all array's elements except the fourth element 6 

Finally ,The Fifth element 900 is the product of all array's elements except the fifth element 2



A more challenging version of this kata by Firefly2002


Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a995c2aba1bb57f660001fd
–ó–∞–¥–∞—á–∞:
Introduction and Warm-up (Highly recommended)
Playing With Lists/Arrays Series

Task
Given an array/list [] of integers , Construct a product array Of same size Such That prod[i] is equal to The Product of all the elements of Arr[] except Arr[i]. 

Notes

Array/list size is at least 2 .

Array/list's numbers  Will be only Positives 

Repetition of numbers in the array/list could occur.



Input >> Output Examples
productArray ({12,20}) ==>  return {20,12}

Explanation:

The first element in prod [] array 20 is the product of all array's elements except the first element

The second element 12 is the product of all array's elements except the second element .



productArray ({1,5,2}) ==> return {10,2,5}

Explanation:

The first element 10 is the product of all array's elements except the first element 1

The second element 2 is the product of all array's elements except the second element 5 

The Third element 5 is the product of all array's elements except the Third element 2.



productArray ({10,3,5,6,2}) return ==> {180,600,360,300,900}

Explanation:

The first element 180 is the product of all array's elements except the first element 10 

The second element 600 is the product of all array's elements except the second element 3 

The Third element 360 is the product of all array's elements except the third element 5

The Fourth element 300 is the product of all array's elements except the fourth element 6 

Finally ,The Fifth element 900 is the product of all array's elements except the fifth element 2



A more challenging version of this kata by Firefly2002


Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a905c2157c562994900009d
–ó–∞–¥–∞—á–∞:
Introduction and Warm-up (Highly recommended)
Playing With Lists/Arrays Series

Task
Given an array/list [] of integers , Construct a product array Of same size Such That prod[i] is equal to The Product of all the elements of Arr[] except Arr[i]. 

Notes

Array/list size is at least 2 .

Array/list's numbers  Will be only Positives 

Repetition of numbers in the array/list could occur.



Input >> Output Examples
productArray ({12,20}) ==>  return {20,12}

Explanation:

The first element in prod [] array 20 is the product of all array's elements except the first element

The second element 12 is the product of all array's elements except the second element .



productArray ({1,5,2}) ==> return {10,2,5}

Explanation:

The first element 10 is the product of all array's elements except the first element 1

The second element 2 is the product of all array's elements except the second element 5 

The Third element 5 is the product of all array's elements except the Third element 2.



productArray ({10,3,5,6,2}) return ==> {180,600,360,300,900}

Explanation:

The first element 180 is the product of all array's elements except the first element 10 

The second element 600 is the product of all array's elements except the second element 3 

The Third element 360 is the product of all array's elements except the third element 5

The Fourth element 300 is the product of all array's elements except the fourth element 6 

Finally ,The Fifth element 900 is the product of all array's elements except the fifth element 2



A more challenging version of this kata by Firefly2002


Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a8fbe73373c2e904700008c
–ó–∞–¥–∞—á–∞:
Make the 2D list by the sequential integers started by the head number.
See the example test cases for the expected output.
Note:

-10**20 < the head number <10**20
1 <=  the number of rows <= 1000
0 <=  the number of columms <= 1000
========================================
URL: https://www.codewars.com/kata/5a8d1c82373c2e099d0000ac
–ó–∞–¥–∞—á–∞:
Make the 2D list by the sequential integers started by the head number.
See the example test cases for the expected output.
Note:

-10**20 < the head number <10**20
1 <=  the number of rows <= 1000
0 <=  the number of columms <= 1000
========================================
URL: https://www.codewars.com/kata/5a8c1b06fd5777d4c00000dd
–ó–∞–¥–∞—á–∞:
Make the 2D list by the sequential integers started by the head number.
See the example test cases for the expected output.
Note:

-10**20 < the head number <10**20
1 <=  the number of rows <= 1000
0 <=  the number of columms <= 1000
========================================
URL: https://www.codewars.com/kata/5a8897d4ba1bb5f266000057
–ó–∞–¥–∞—á–∞:
Make the 2D list by the sequential integers started by the head number.
See the example test cases for the expected output.
Note:

-10**20 < the head number <10**20
1 <=  the number of rows <= 1000
0 <=  the number of columms <= 1000
========================================
URL: https://www.codewars.com/kata/5a8bcd980025e99381000099
–ó–∞–¥–∞—á–∞:
Make the 2D list by the sequential integers started by the head number.
See the example test cases for the expected output.
Note:

-10**20 < the head number <10**20
1 <=  the number of rows <= 1000
0 <=  the number of columms <= 1000
========================================
URL: https://www.codewars.com/kata/5a87449ab1710171300000fd
–ó–∞–¥–∞—á–∞:
In this kata the function returns an array/list like the one passed to it but with its nth element removed (with 0 <= n <= array/list.length - 1). The function is already written for you and the basic tests pass, but random tests fail. Your task is to figure out why and fix it.
Good luck!
Some good reading: MDN Docs about arrays
========================================
URL: https://www.codewars.com/kata/5a7b3d08fd5777bf6a000121
–ó–∞–¥–∞—á–∞:
In this kata the function returns an array/list like the one passed to it but with its nth element removed (with 0 <= n <= array/list.length - 1). The function is already written for you and the basic tests pass, but random tests fail. Your task is to figure out why and fix it.
Good luck!
Some good reading: MDN Docs about arrays
========================================
URL: https://www.codewars.com/kata/5a8059b1fd577709860000f6
–ó–∞–¥–∞—á–∞:
In this kata the function returns an array/list like the one passed to it but with its nth element removed (with 0 <= n <= array/list.length - 1). The function is already written for you and the basic tests pass, but random tests fail. Your task is to figure out why and fix it.
Good luck!
Some good reading: MDN Docs about arrays
========================================
URL: https://www.codewars.com/kata/5a81b78d4a6b344638000183
–ó–∞–¥–∞—á–∞:
In this kata the function returns an array/list like the one passed to it but with its nth element removed (with 0 <= n <= array/list.length - 1). The function is already written for you and the basic tests pass, but random tests fail. Your task is to figure out why and fix it.
Good luck!
Some good reading: MDN Docs about arrays
========================================
URL: https://www.codewars.com/kata/5a805631ba1bb55b0c0000b8
–ó–∞–¥–∞—á–∞:
In this kata the function returns an array/list like the one passed to it but with its nth element removed (with 0 <= n <= array/list.length - 1). The function is already written for you and the basic tests pass, but random tests fail. Your task is to figure out why and fix it.
Good luck!
Some good reading: MDN Docs about arrays
========================================
URL: https://www.codewars.com/kata/5a7778790136a132a00000c1
–ó–∞–¥–∞—á–∞:
Convert DD (decimal degrees) position to DMS (degrees, minutes, seconds).
Inputs:
dd_lat and dd_lon 2 floats representing the latitude and the longitude in degree -i.e. 2 floats included in [-90, 90] and [-180, 180]. Note that latitude 0 is north, longitude 0 is east.
Outputs:
A tuple of DMS latitudes formated as follows:
DDD*mm'ss.sss"C
With:

DDD: degrees
mm: minutes
ss.sss: seconds rounded to 3 decimals
C: first letter uppercase of the cardinal direction

ressources
about WGS 84 on Wikipedia
========================================
URL: https://www.codewars.com/kata/5a7893ef0025e9eb50000013
–ó–∞–¥–∞—á–∞:
Convert DD (decimal degrees) position to DMS (degrees, minutes, seconds).
Inputs:
dd_lat and dd_lon 2 floats representing the latitude and the longitude in degree -i.e. 2 floats included in [-90, 90] and [-180, 180]. Note that latitude 0 is north, longitude 0 is east.
Outputs:
A tuple of DMS latitudes formated as follows:
DDD*mm'ss.sss"C
With:

DDD: degrees
mm: minutes
ss.sss: seconds rounded to 3 decimals
C: first letter uppercase of the cardinal direction

ressources
about WGS 84 on Wikipedia
========================================
URL: https://www.codewars.com/kata/5a731b36e19d14400f000c19
–ó–∞–¥–∞—á–∞:
Convert DD (decimal degrees) position to DMS (degrees, minutes, seconds).
Inputs:
dd_lat and dd_lon 2 floats representing the latitude and the longitude in degree -i.e. 2 floats included in [-90, 90] and [-180, 180]. Note that latitude 0 is north, longitude 0 is east.
Outputs:
A tuple of DMS latitudes formated as follows:
DDD*mm'ss.sss"C
With:

DDD: degrees
mm: minutes
ss.sss: seconds rounded to 3 decimals
C: first letter uppercase of the cardinal direction

ressources
about WGS 84 on Wikipedia
========================================
URL: https://www.codewars.com/kata/5a74d00c0025e979c9000145
–ó–∞–¥–∞—á–∞:
Convert DD (decimal degrees) position to DMS (degrees, minutes, seconds).
Inputs:
dd_lat and dd_lon 2 floats representing the latitude and the longitude in degree -i.e. 2 floats included in [-90, 90] and [-180, 180]. Note that latitude 0 is north, longitude 0 is east.
Outputs:
A tuple of DMS latitudes formated as follows:
DDD*mm'ss.sss"C
With:

DDD: degrees
mm: minutes
ss.sss: seconds rounded to 3 decimals
C: first letter uppercase of the cardinal direction

ressources
about WGS 84 on Wikipedia
========================================
URL: https://www.codewars.com/kata/5a72fd224a6b3463b00000a0
–ó–∞–¥–∞—á–∞:
Convert DD (decimal degrees) position to DMS (degrees, minutes, seconds).
Inputs:
dd_lat and dd_lon 2 floats representing the latitude and the longitude in degree -i.e. 2 floats included in [-90, 90] and [-180, 180]. Note that latitude 0 is north, longitude 0 is east.
Outputs:
A tuple of DMS latitudes formated as follows:
DDD*mm'ss.sss"C
With:

DDD: degrees
mm: minutes
ss.sss: seconds rounded to 3 decimals
C: first letter uppercase of the cardinal direction

ressources
about WGS 84 on Wikipedia
========================================
URL: https://www.codewars.com/kata/5a71939d373c2e634200008e
–ó–∞–¥–∞—á–∞:
In this Kata, you will check if it is possible to convert a string to a palindrome by changing one character. 
For instance:
solve ("abbx") = True, because we can convert 'x' to 'a' and get a palindrome. 
solve ("abba") = False, because we cannot get a palindrome by changing any character. 
solve ("abcba") = True. We can change the middle character. 
solve ("aa") = False 
solve ("ab") = True

Good luck!
Please also try Single Character Palindromes
========================================
URL: https://www.codewars.com/kata/5a6d3bd238f80014a2000187
–ó–∞–¥–∞—á–∞:
In this Kata, you will check if it is possible to convert a string to a palindrome by changing one character. 
For instance:
solve ("abbx") = True, because we can convert 'x' to 'a' and get a palindrome. 
solve ("abba") = False, because we cannot get a palindrome by changing any character. 
solve ("abcba") = True. We can change the middle character. 
solve ("aa") = False 
solve ("ab") = True

Good luck!
Please also try Single Character Palindromes
========================================
URL: https://www.codewars.com/kata/5a6a02adcadebf618400002b
–ó–∞–¥–∞—á–∞:
In this Kata, you will check if it is possible to convert a string to a palindrome by changing one character. 
For instance:
solve ("abbx") = True, because we can convert 'x' to 'a' and get a palindrome. 
solve ("abba") = False, because we cannot get a palindrome by changing any character. 
solve ("abcba") = True. We can change the middle character. 
solve ("aa") = False 
solve ("ab") = True

Good luck!
Please also try Single Character Palindromes
========================================
URL: https://www.codewars.com/kata/5a6986abe626c5d3e9000063
–ó–∞–¥–∞—á–∞:
In this Kata, you will check if it is possible to convert a string to a palindrome by changing one character. 
For instance:
solve ("abbx") = True, because we can convert 'x' to 'a' and get a palindrome. 
solve ("abba") = False, because we cannot get a palindrome by changing any character. 
solve ("abcba") = True. We can change the middle character. 
solve ("aa") = False 
solve ("ab") = True

Good luck!
Please also try Single Character Palindromes
========================================
URL: https://www.codewars.com/kata/5a66ea69e6be38219f000110
–ó–∞–¥–∞—á–∞:
In this Kata, you will check if it is possible to convert a string to a palindrome by changing one character. 
For instance:
solve ("abbx") = True, because we can convert 'x' to 'a' and get a palindrome. 
solve ("abba") = False, because we cannot get a palindrome by changing any character. 
solve ("abcba") = True. We can change the middle character. 
solve ("aa") = False 
solve ("ab") = True

Good luck!
Please also try Single Character Palindromes
========================================
URL: https://www.codewars.com/kata/5a662a02e626c54e87000123
–ó–∞–¥–∞—á–∞:
You are trying to cross a river by jumping along stones. Every time you land on a stone, you hop forwards by the value of that stone. If you skip over a stone then its value doesn't affect you in any way. Eg:
 x--x-----x-->
[1][2][5][1]

Of course, crossing from the other side might give you a different answer:
 <--------x--x
   [1][2][5][1]

Given an array of positive integers, return the total number of steps it would take to go all the way across the river (and past the end of the array) and then all the way back. All arrays will contain at least one element, and may contain up to 100 elements. 
Examples
  x--x-----x-->
 [1][2][1][2]
<----x-----x

therefore hop_across([1,2,1,2]) = 3 + 2 = 5

   x-----x--------x------>
  [2][2][3][1][1][2][1]
<--------x--x-----x--x

therefore hop_across([2,2,3,1,1,2,1]) = 3 + 4 = 7
========================================
URL: https://www.codewars.com/kata/5a63948acadebff56f000018
–ó–∞–¥–∞—á–∞:
You are trying to cross a river by jumping along stones. Every time you land on a stone, you hop forwards by the value of that stone. If you skip over a stone then its value doesn't affect you in any way. Eg:
 x--x-----x-->
[1][2][5][1]

Of course, crossing from the other side might give you a different answer:
 <--------x--x
   [1][2][5][1]

Given an array of positive integers, return the total number of steps it would take to go all the way across the river (and past the end of the array) and then all the way back. All arrays will contain at least one element, and may contain up to 100 elements. 
Examples
  x--x-----x-->
 [1][2][1][2]
<----x-----x

therefore hop_across([1,2,1,2]) = 3 + 2 = 5

   x-----x--------x------>
  [2][2][3][1][1][2][1]
<--------x--x-----x--x

therefore hop_across([2,2,3,1,1,2,1]) = 3 + 4 = 7
========================================
URL: https://www.codewars.com/kata/5a651865fd56cb55760000e0
–ó–∞–¥–∞—á–∞:
You are trying to cross a river by jumping along stones. Every time you land on a stone, you hop forwards by the value of that stone. If you skip over a stone then its value doesn't affect you in any way. Eg:
 x--x-----x-->
[1][2][5][1]

Of course, crossing from the other side might give you a different answer:
 <--------x--x
   [1][2][5][1]

Given an array of positive integers, return the total number of steps it would take to go all the way across the river (and past the end of the array) and then all the way back. All arrays will contain at least one element, and may contain up to 100 elements. 
Examples
  x--x-----x-->
 [1][2][1][2]
<----x-----x

therefore hop_across([1,2,1,2]) = 3 + 2 = 5

   x-----x--------x------>
  [2][2][3][1][1][2][1]
<--------x--x-----x--x

therefore hop_across([2,2,3,1,1,2,1]) = 3 + 4 = 7
========================================
URL: https://www.codewars.com/kata/5a631508e626c5f127000055
–ó–∞–¥–∞—á–∞:
You are trying to cross a river by jumping along stones. Every time you land on a stone, you hop forwards by the value of that stone. If you skip over a stone then its value doesn't affect you in any way. Eg:
 x--x-----x-->
[1][2][5][1]

Of course, crossing from the other side might give you a different answer:
 <--------x--x
   [1][2][5][1]

Given an array of positive integers, return the total number of steps it would take to go all the way across the river (and past the end of the array) and then all the way back. All arrays will contain at least one element, and may contain up to 100 elements. 
Examples
  x--x-----x-->
 [1][2][1][2]
<----x-----x

therefore hop_across([1,2,1,2]) = 3 + 2 = 5

   x-----x--------x------>
  [2][2][3][1][1][2][1]
<--------x--x-----x--x

therefore hop_across([2,2,3,1,1,2,1]) = 3 + 4 = 7
========================================
URL: https://www.codewars.com/kata/5a60d519400f93fc450032e5
–ó–∞–¥–∞—á–∞:
You are trying to cross a river by jumping along stones. Every time you land on a stone, you hop forwards by the value of that stone. If you skip over a stone then its value doesn't affect you in any way. Eg:
 x--x-----x-->
[1][2][5][1]

Of course, crossing from the other side might give you a different answer:
 <--------x--x
   [1][2][5][1]

Given an array of positive integers, return the total number of steps it would take to go all the way across the river (and past the end of the array) and then all the way back. All arrays will contain at least one element, and may contain up to 100 elements. 
Examples
  x--x-----x-->
 [1][2][1][2]
<----x-----x

therefore hop_across([1,2,1,2]) = 3 + 2 = 5

   x-----x--------x------>
  [2][2][3][1][1][2][1]
<--------x--x-----x--x

therefore hop_across([2,2,3,1,1,2,1]) = 3 + 4 = 7
========================================
URL: https://www.codewars.com/kata/5a5f3034cadebf76db000023
–ó–∞–¥–∞—á–∞:
Given two integer arrays where the second array is a shuffled duplicate of the first array with one element missing, find the missing element.
Please note, there may be duplicates in the arrays, so checking if a numerical value exists in one and not the other is not a valid solution.
find_missing([1, 2, 2, 3], [1, 2, 3]) => 2

find_missing([6, 1, 3, 6, 8, 2], [3, 6, 6, 1, 2]) => 8

The first array will always have at least one element.
========================================
URL: https://www.codewars.com/kata/5a5c118380eba8a53d0000ce
–ó–∞–¥–∞—á–∞:
Given two integer arrays where the second array is a shuffled duplicate of the first array with one element missing, find the missing element.
Please note, there may be duplicates in the arrays, so checking if a numerical value exists in one and not the other is not a valid solution.
find_missing([1, 2, 2, 3], [1, 2, 3]) => 2

find_missing([6, 1, 3, 6, 8, 2], [3, 6, 6, 1, 2]) => 8

The first array will always have at least one element.
========================================
URL: https://www.codewars.com/kata/5a5bef7a5c770d08cd0032fa
–ó–∞–¥–∞—á–∞:
Given two integer arrays where the second array is a shuffled duplicate of the first array with one element missing, find the missing element.
Please note, there may be duplicates in the arrays, so checking if a numerical value exists in one and not the other is not a valid solution.
find_missing([1, 2, 2, 3], [1, 2, 3]) => 2

find_missing([6, 1, 3, 6, 8, 2], [3, 6, 6, 1, 2]) => 8

The first array will always have at least one element.
========================================
URL: https://www.codewars.com/kata/5a5e4f5f118dd1b407000028
–ó–∞–¥–∞—á–∞:
Given two integer arrays where the second array is a shuffled duplicate of the first array with one element missing, find the missing element.
Please note, there may be duplicates in the arrays, so checking if a numerical value exists in one and not the other is not a valid solution.
find_missing([1, 2, 2, 3], [1, 2, 3]) => 2

find_missing([6, 1, 3, 6, 8, 2], [3, 6, 6, 1, 2]) => 8

The first array will always have at least one element.
========================================
URL: https://www.codewars.com/kata/5a5915b8d39ec5aa18000030
–ó–∞–¥–∞—á–∞:
Given two integer arrays where the second array is a shuffled duplicate of the first array with one element missing, find the missing element.
Please note, there may be duplicates in the arrays, so checking if a numerical value exists in one and not the other is not a valid solution.
find_missing([1, 2, 2, 3], [1, 2, 3]) => 2

find_missing([6, 1, 3, 6, 8, 2], [3, 6, 6, 1, 2]) => 8

The first array will always have at least one element.
========================================
URL: https://www.codewars.com/kata/5a58d889880385c2f40000aa
–ó–∞–¥–∞—á–∞:
Definition
Disarium number is the number that The sum of its digits powered with their respective positions is equal to the number itself.

Task
Given a number, Find if it is Disarium or not . 

Warm-up (Highly recommended)
Playing With Numbers Series

Notes

Number passed is always Positive .
Return the result as String


Input >> Output Examples
disariumNumber(89) ==> return "Disarium !!"

Explanation:

Since , 81 + 92 = 89 , thus output is "Disarium !!"


disariumNumber(564) ==> return "Not !!"

Explanation:
Since , 51 + 62 + 43 = 105 != 564 ,  thus output is "Not !!"



Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a58d46cfd56cb4e8600009d
–ó–∞–¥–∞—á–∞:
Definition
Disarium number is the number that The sum of its digits powered with their respective positions is equal to the number itself.

Task
Given a number, Find if it is Disarium or not . 

Warm-up (Highly recommended)
Playing With Numbers Series

Notes

Number passed is always Positive .
Return the result as String


Input >> Output Examples
disariumNumber(89) ==> return "Disarium !!"

Explanation:

Since , 81 + 92 = 89 , thus output is "Disarium !!"


disariumNumber(564) ==> return "Not !!"

Explanation:
Since , 51 + 62 + 43 = 105 != 564 ,  thus output is "Not !!"



Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a54e796b3bfa8932c0000ed
–ó–∞–¥–∞—á–∞:
Definition
Disarium number is the number that The sum of its digits powered with their respective positions is equal to the number itself.

Task
Given a number, Find if it is Disarium or not . 

Warm-up (Highly recommended)
Playing With Numbers Series

Notes

Number passed is always Positive .
Return the result as String


Input >> Output Examples
disariumNumber(89) ==> return "Disarium !!"

Explanation:

Since , 81 + 92 = 89 , thus output is "Disarium !!"


disariumNumber(564) ==> return "Not !!"

Explanation:
Since , 51 + 62 + 43 = 105 != 564 ,  thus output is "Not !!"



Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a55f04be6be383a50000187
–ó–∞–¥–∞—á–∞:
Definition
Disarium number is the number that The sum of its digits powered with their respective positions is equal to the number itself.

Task
Given a number, Find if it is Disarium or not . 

Warm-up (Highly recommended)
Playing With Numbers Series

Notes

Number passed is always Positive .
Return the result as String


Input >> Output Examples
disariumNumber(89) ==> return "Disarium !!"

Explanation:

Since , 81 + 92 = 89 , thus output is "Disarium !!"


disariumNumber(564) ==> return "Not !!"

Explanation:
Since , 51 + 62 + 43 = 105 != 564 ,  thus output is "Not !!"



Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a53a17bfd56cb9c14000003
–ó–∞–¥–∞—á–∞:
Definition
Disarium number is the number that The sum of its digits powered with their respective positions is equal to the number itself.

Task
Given a number, Find if it is Disarium or not . 

Warm-up (Highly recommended)
Playing With Numbers Series

Notes

Number passed is always Positive .
Return the result as String


Input >> Output Examples
disariumNumber(89) ==> return "Disarium !!"

Explanation:

Since , 81 + 92 = 89 , thus output is "Disarium !!"


disariumNumber(564) ==> return "Not !!"

Explanation:
Since , 51 + 62 + 43 = 105 != 564 ,  thus output is "Not !!"



Playing with Numbers Series
Playing With Lists/Arrays Series
For More Enjoyable Katas

ALL translations are welcomed
Enjoy Learning !!
Zizou
========================================
URL: https://www.codewars.com/kata/5a523566b3bfa84c2e00010b
–ó–∞–¥–∞—á–∞:
A balanced number is a number where the sum of digits to the left of the middle digit(s) and the sum of digits to the right of the middle digit(s) are equal.
If the number has an odd number of digits, then there is only one middle digit. (For example, 92645 has one middle digit, 6.) Otherwise, there are two middle digits. (For example, the middle digits of 1301 are 3 and 0.)
The middle digit(s) should not be considered when determining whether a number is balanced or not, e.g. 413023 is a balanced number because the left sum and right sum are both 5.
The task
Given a number, find if it is balanced, and return the string "Balanced" or "Not Balanced" accordingly. The passed number will always be positive.
Examples

7 ==> return "Balanced"

Explanation:


middle digit(s): 7
sum of all digits to the left of the middle digit(s) -> 0
sum of all digits to the right of the middle digit(s) -> 0
0 and 0 are equal, so it's balanced.


295591 ==> return "Not Balanced"

Explanation:


middle digit(s): 55
sum of all digits to the left of the middle digit(s) -> 11
sum of all digits to the right of the middle digit(s) -> 10
11 and 10 are not equal, so it's not balanced.


959 ==> return "Balanced"

Explanation:


middle digit(s): 5
sum of all digits to the left of the middle digit(s) -> 9
sum of all digits to the right of the middle digit(s) -> 9
9 and 9 are equal, so it's balanced.


27102983 ==> return "Not Balanced"

Explanation:


middle digit(s): 02
sum of all digits to the left of the middle digit(s) -> 10
sum of all digits to the right of the middle digit(s) -> 20
10 and 20 are not equal, so it's not balanced.


Playing with Numbers Series
Playing With Lists/Arrays Series
========================================
URL: https://www.codewars.com/kata/5a512f6a80eba857280000fc
–ó–∞–¥–∞—á–∞:
A balanced number is a number where the sum of digits to the left of the middle digit(s) and the sum of digits to the right of the middle digit(s) are equal.
If the number has an odd number of digits, then there is only one middle digit. (For example, 92645 has one middle digit, 6.) Otherwise, there are two middle digits. (For example, the middle digits of 1301 are 3 and 0.)
The middle digit(s) should not be considered when determining whether a number is balanced or not, e.g. 413023 is a balanced number because the left sum and right sum are both 5.
The task
Given a number, find if it is balanced, and return the string "Balanced" or "Not Balanced" accordingly. The passed number will always be positive.
Examples

7 ==> return "Balanced"

Explanation:


middle digit(s): 7
sum of all digits to the left of the middle digit(s) -> 0
sum of all digits to the right of the middle digit(s) -> 0
0 and 0 are equal, so it's balanced.


295591 ==> return "Not Balanced"

Explanation:


middle digit(s): 55
sum of all digits to the left of the middle digit(s) -> 11
sum of all digits to the right of the middle digit(s) -> 10
11 and 10 are not equal, so it's not balanced.


959 ==> return "Balanced"

Explanation:


middle digit(s): 5
sum of all digits to the left of the middle digit(s) -> 9
sum of all digits to the right of the middle digit(s) -> 9
9 and 9 are equal, so it's balanced.


27102983 ==> return "Not Balanced"

Explanation:


middle digit(s): 02
sum of all digits to the left of the middle digit(s) -> 10
sum of all digits to the right of the middle digit(s) -> 20
10 and 20 are not equal, so it's not balanced.


Playing with Numbers Series
Playing With Lists/Arrays Series
========================================
URL: https://www.codewars.com/kata/5a5032f4fd56cb958e00007a
–ó–∞–¥–∞—á–∞:
A balanced number is a number where the sum of digits to the left of the middle digit(s) and the sum of digits to the right of the middle digit(s) are equal.
If the number has an odd number of digits, then there is only one middle digit. (For example, 92645 has one middle digit, 6.) Otherwise, there are two middle digits. (For example, the middle digits of 1301 are 3 and 0.)
The middle digit(s) should not be considered when determining whether a number is balanced or not, e.g. 413023 is a balanced number because the left sum and right sum are both 5.
The task
Given a number, find if it is balanced, and return the string "Balanced" or "Not Balanced" accordingly. The passed number will always be positive.
Examples

7 ==> return "Balanced"

Explanation:


middle digit(s): 7
sum of all digits to the left of the middle digit(s) -> 0
sum of all digits to the right of the middle digit(s) -> 0
0 and 0 are equal, so it's balanced.


295591 ==> return "Not Balanced"

Explanation:


middle digit(s): 55
sum of all digits to the left of the middle digit(s) -> 11
sum of all digits to the right of the middle digit(s) -> 10
11 and 10 are not equal, so it's not balanced.


959 ==> return "Balanced"

Explanation:


middle digit(s): 5
sum of all digits to the left of the middle digit(s) -> 9
sum of all digits to the right of the middle digit(s) -> 9
9 and 9 are equal, so it's balanced.


27102983 ==> return "Not Balanced"

Explanation:


middle digit(s): 02
sum of all digits to the left of the middle digit(s) -> 10
sum of all digits to the right of the middle digit(s) -> 20
10 and 20 are not equal, so it's not balanced.


Playing with Numbers Series
Playing With Lists/Arrays Series
========================================
URL: https://www.codewars.com/kata/5a4ff3c5fd56cbaf9800003e
–ó–∞–¥–∞—á–∞:
A balanced number is a number where the sum of digits to the left of the middle digit(s) and the sum of digits to the right of the middle digit(s) are equal.
If the number has an odd number of digits, then there is only one middle digit. (For example, 92645 has one middle digit, 6.) Otherwise, there are two middle digits. (For example, the middle digits of 1301 are 3 and 0.)
The middle digit(s) should not be considered when determining whether a number is balanced or not, e.g. 413023 is a balanced number because the left sum and right sum are both 5.
The task
Given a number, find if it is balanced, and return the string "Balanced" or "Not Balanced" accordingly. The passed number will always be positive.
Examples

7 ==> return "Balanced"

Explanation:


middle digit(s): 7
sum of all digits to the left of the middle digit(s) -> 0
sum of all digits to the right of the middle digit(s) -> 0
0 and 0 are equal, so it's balanced.


295591 ==> return "Not Balanced"

Explanation:


middle digit(s): 55
sum of all digits to the left of the middle digit(s) -> 11
sum of all digits to the right of the middle digit(s) -> 10
11 and 10 are not equal, so it's not balanced.


959 ==> return "Balanced"

Explanation:


middle digit(s): 5
sum of all digits to the left of the middle digit(s) -> 9
sum of all digits to the right of the middle digit(s) -> 9
9 and 9 are equal, so it's balanced.


27102983 ==> return "Not Balanced"

Explanation:


middle digit(s): 02
sum of all digits to the left of the middle digit(s) -> 10
sum of all digits to the right of the middle digit(s) -> 20
10 and 20 are not equal, so it's not balanced.


Playing with Numbers Series
Playing With Lists/Arrays Series
========================================
URL: https://www.codewars.com/kata/5a4e3782880385ba68000018
–ó–∞–¥–∞—á–∞:
A balanced number is a number where the sum of digits to the left of the middle digit(s) and the sum of digits to the right of the middle digit(s) are equal.
If the number has an odd number of digits, then there is only one middle digit. (For example, 92645 has one middle digit, 6.) Otherwise, there are two middle digits. (For example, the middle digits of 1301 are 3 and 0.)
The middle digit(s) should not be considered when determining whether a number is balanced or not, e.g. 413023 is a balanced number because the left sum and right sum are both 5.
The task
Given a number, find if it is balanced, and return the string "Balanced" or "Not Balanced" accordingly. The passed number will always be positive.
Examples

7 ==> return "Balanced"

Explanation:


middle digit(s): 7
sum of all digits to the left of the middle digit(s) -> 0
sum of all digits to the right of the middle digit(s) -> 0
0 and 0 are equal, so it's balanced.


295591 ==> return "Not Balanced"

Explanation:


middle digit(s): 55
sum of all digits to the left of the middle digit(s) -> 11
sum of all digits to the right of the middle digit(s) -> 10
11 and 10 are not equal, so it's not balanced.


959 ==> return "Balanced"

Explanation:


middle digit(s): 5
sum of all digits to the left of the middle digit(s) -> 9
sum of all digits to the right of the middle digit(s) -> 9
9 and 9 are equal, so it's balanced.


27102983 ==> return "Not Balanced"

Explanation:


middle digit(s): 02
sum of all digits to the left of the middle digit(s) -> 10
sum of all digits to the right of the middle digit(s) -> 20
10 and 20 are not equal, so it's not balanced.


Playing with Numbers Series
Playing With Lists/Arrays Series
========================================
URL: https://www.codewars.com/kata/5a4d303f880385399b000001
–ó–∞–¥–∞—á–∞:
The citizens of Codeland read each word from right to left, meaning that lexicographical comparison works differently in their language. Namely, string a is lexicographically smaller than string b if either: a is a suffix of b (in common sense, i.e. b ends with a substring equal to a); or their last k characters are the same but the (k + 1)th character from the right in string a is smaller than the same character in string b.
Given an array of words in Codeland language, sort them lexicographically according to Codeland's unique rules.
For words = ["nigeb", "ta", "eht", "gninnigeb"], the output should be
unusualLexOrder(words) = ["ta", "nigeb", "gninnigeb", "eht"].
In particular, "ta" < "nigeb" because 'a' < 'b' and "nigeb" < "gninnigeb" because the former word is a suffix of the latter.
S: codefights.com
========================================
URL: https://www.codewars.com/kata/5a4b16435f08299c7000274f
–ó–∞–¥–∞—á–∞:
The citizens of Codeland read each word from right to left, meaning that lexicographical comparison works differently in their language. Namely, string a is lexicographically smaller than string b if either: a is a suffix of b (in common sense, i.e. b ends with a substring equal to a); or their last k characters are the same but the (k + 1)th character from the right in string a is smaller than the same character in string b.
Given an array of words in Codeland language, sort them lexicographically according to Codeland's unique rules.
For words = ["nigeb", "ta", "eht", "gninnigeb"], the output should be
unusualLexOrder(words) = ["ta", "nigeb", "gninnigeb", "eht"].
In particular, "ta" < "nigeb" because 'a' < 'b' and "nigeb" < "gninnigeb" because the former word is a suffix of the latter.
S: codefights.com
========================================
URL: https://www.codewars.com/kata/5a491f0be6be389dbb000117
–ó–∞–¥–∞—á–∞:
The citizens of Codeland read each word from right to left, meaning that lexicographical comparison works differently in their language. Namely, string a is lexicographically smaller than string b if either: a is a suffix of b (in common sense, i.e. b ends with a substring equal to a); or their last k characters are the same but the (k + 1)th character from the right in string a is smaller than the same character in string b.
Given an array of words in Codeland language, sort them lexicographically according to Codeland's unique rules.
For words = ["nigeb", "ta", "eht", "gninnigeb"], the output should be
unusualLexOrder(words) = ["ta", "nigeb", "gninnigeb", "eht"].
In particular, "ta" < "nigeb" because 'a' < 'b' and "nigeb" < "gninnigeb" because the former word is a suffix of the latter.
S: codefights.com
========================================
URL: https://www.codewars.com/kata/5a438bc1e1ce0e129100005a
–ó–∞–¥–∞—á–∞:
The citizens of Codeland read each word from right to left, meaning that lexicographical comparison works differently in their language. Namely, string a is lexicographically smaller than string b if either: a is a suffix of b (in common sense, i.e. b ends with a substring equal to a); or their last k characters are the same but the (k + 1)th character from the right in string a is smaller than the same character in string b.
Given an array of words in Codeland language, sort them lexicographically according to Codeland's unique rules.
For words = ["nigeb", "ta", "eht", "gninnigeb"], the output should be
unusualLexOrder(words) = ["ta", "nigeb", "gninnigeb", "eht"].
In particular, "ta" < "nigeb" because 'a' < 'b' and "nigeb" < "gninnigeb" because the former word is a suffix of the latter.
S: codefights.com
========================================
URL: https://www.codewars.com/kata/5a47d5ddd8e145ff6200004e
–ó–∞–¥–∞—á–∞:
The citizens of Codeland read each word from right to left, meaning that lexicographical comparison works differently in their language. Namely, string a is lexicographically smaller than string b if either: a is a suffix of b (in common sense, i.e. b ends with a substring equal to a); or their last k characters are the same but the (k + 1)th character from the right in string a is smaller than the same character in string b.
Given an array of words in Codeland language, sort them lexicographically according to Codeland's unique rules.
For words = ["nigeb", "ta", "eht", "gninnigeb"], the output should be
unusualLexOrder(words) = ["ta", "nigeb", "gninnigeb", "eht"].
In particular, "ta" < "nigeb" because 'a' < 'b' and "nigeb" < "gninnigeb" because the former word is a suffix of the latter.
S: codefights.com
========================================
URL: https://www.codewars.com/kata/5a433c7a8f27f23bb00000dc
–ó–∞–¥–∞—á–∞:
This is a simplified version of Racing #2: Accelerated Drag Race.
Anna and Bob are good friends, but also rival drag racers.
Bob just got his engine reconditioned and wants to prove that he is the fastest of the two.
In this kata, you will simulate a drag race between Anna and Bob and determine the winner.
You will do this by implementing the function dragRace (or drag_race in Python).
Input
You are given the length of the track in meters (len in JavaScript, length in Python).
Also, you are given the two competing cars (anna and bob).
The cars are Car objects. In JavaScript, they have the following properties.
speed        -> the speed of the car in m/s
reactionTime -> the reaction time of its driver in s

In Python, these are the properties of Car objects.
speed         -> the speed of the car in m/s
reaction_time -> the reaction time of its driver in s

The reaction time indicates how long it takes before the driver starts to drive after the start of the race.
For example if Anna has a reaction time of 1s, and Bob has a reaction time of 2s, Bob starts driving one second later than Anna.
The cars do not require any time to accelerate to their speed. In other words, the cars go from zero to their speed in literally no time.
Output
If there is no winner, return the string It's a draw.
If there is a winner, return the string [name] is the winner.
========================================
URL: https://www.codewars.com/kata/5a4138acf28b82aa43000117
–ó–∞–¥–∞—á–∞:
This is a simplified version of Racing #2: Accelerated Drag Race.
Anna and Bob are good friends, but also rival drag racers.
Bob just got his engine reconditioned and wants to prove that he is the fastest of the two.
In this kata, you will simulate a drag race between Anna and Bob and determine the winner.
You will do this by implementing the function dragRace (or drag_race in Python).
Input
You are given the length of the track in meters (len in JavaScript, length in Python).
Also, you are given the two competing cars (anna and bob).
The cars are Car objects. In JavaScript, they have the following properties.
speed        -> the speed of the car in m/s
reactionTime -> the reaction time of its driver in s

In Python, these are the properties of Car objects.
speed         -> the speed of the car in m/s
reaction_time -> the reaction time of its driver in s

The reaction time indicates how long it takes before the driver starts to drive after the start of the race.
For example if Anna has a reaction time of 1s, and Bob has a reaction time of 2s, Bob starts driving one second later than Anna.
The cars do not require any time to accelerate to their speed. In other words, the cars go from zero to their speed in literally no time.
Output
If there is no winner, return the string It's a draw.
If there is a winner, return the string [name] is the winner.
========================================
URL: https://www.codewars.com/kata/5a40f5b01f7f70ed7600001e
–ó–∞–¥–∞—á–∞:
This is a simplified version of Racing #2: Accelerated Drag Race.
Anna and Bob are good friends, but also rival drag racers.
Bob just got his engine reconditioned and wants to prove that he is the fastest of the two.
In this kata, you will simulate a drag race between Anna and Bob and determine the winner.
You will do this by implementing the function dragRace (or drag_race in Python).
Input
You are given the length of the track in meters (len in JavaScript, length in Python).
Also, you are given the two competing cars (anna and bob).
The cars are Car objects. In JavaScript, they have the following properties.
speed        -> the speed of the car in m/s
reactionTime -> the reaction time of its driver in s

In Python, these are the properties of Car objects.
speed         -> the speed of the car in m/s
reaction_time -> the reaction time of its driver in s

The reaction time indicates how long it takes before the driver starts to drive after the start of the race.
For example if Anna has a reaction time of 1s, and Bob has a reaction time of 2s, Bob starts driving one second later than Anna.
The cars do not require any time to accelerate to their speed. In other words, the cars go from zero to their speed in literally no time.
Output
If there is no winner, return the string It's a draw.
If there is a winner, return the string [name] is the winner.
========================================
URL: https://www.codewars.com/kata/5a431c0de1ce0ec33a00000c
–ó–∞–¥–∞—á–∞:
This is a simplified version of Racing #2: Accelerated Drag Race.
Anna and Bob are good friends, but also rival drag racers.
Bob just got his engine reconditioned and wants to prove that he is the fastest of the two.
In this kata, you will simulate a drag race between Anna and Bob and determine the winner.
You will do this by implementing the function dragRace (or drag_race in Python).
Input
You are given the length of the track in meters (len in JavaScript, length in Python).
Also, you are given the two competing cars (anna and bob).
The cars are Car objects. In JavaScript, they have the following properties.
speed        -> the speed of the car in m/s
reactionTime -> the reaction time of its driver in s

In Python, these are the properties of Car objects.
speed         -> the speed of the car in m/s
reaction_time -> the reaction time of its driver in s

The reaction time indicates how long it takes before the driver starts to drive after the start of the race.
For example if Anna has a reaction time of 1s, and Bob has a reaction time of 2s, Bob starts driving one second later than Anna.
The cars do not require any time to accelerate to their speed. In other words, the cars go from zero to their speed in literally no time.
Output
If there is no winner, return the string It's a draw.
If there is a winner, return the string [name] is the winner.
========================================
URL: https://www.codewars.com/kata/5a40fc7ce1ce0e34440000a3
–ó–∞–¥–∞—á–∞:
This is a simplified version of Racing #2: Accelerated Drag Race.
Anna and Bob are good friends, but also rival drag racers.
Bob just got his engine reconditioned and wants to prove that he is the fastest of the two.
In this kata, you will simulate a drag race between Anna and Bob and determine the winner.
You will do this by implementing the function dragRace (or drag_race in Python).
Input
You are given the length of the track in meters (len in JavaScript, length in Python).
Also, you are given the two competing cars (anna and bob).
The cars are Car objects. In JavaScript, they have the following properties.
speed        -> the speed of the car in m/s
reactionTime -> the reaction time of its driver in s

In Python, these are the properties of Car objects.
speed         -> the speed of the car in m/s
reaction_time -> the reaction time of its driver in s

The reaction time indicates how long it takes before the driver starts to drive after the start of the race.
For example if Anna has a reaction time of 1s, and Bob has a reaction time of 2s, Bob starts driving one second later than Anna.
The cars do not require any time to accelerate to their speed. In other words, the cars go from zero to their speed in literally no time.
Output
If there is no winner, return the string It's a draw.
If there is a winner, return the string [name] is the winner.
========================================
URL: https://www.codewars.com/kata/5a40c250c5e284a76400008c
–ó–∞–¥–∞—á–∞:
Your task is to get Zodiac Sign using input day and month.
For example: 
getZodiacSign(1,5) => 'Taurus'
getZodiacSign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

Correct answers are (preloaded): 
const signs = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

P.S. Each argument is correct integer number.
WESTERN ASTROLOGY STAR SIGN DATES

Aries (March 21-April 19)
Taurus (April 20-May 20)
Gemini (May 21-June 20)
Cancer (June 21-July 22)
Leo (July 23-August 22)
Virgo (August 23-September 22)
Libra (September 23-October 22)
Scorpio (October 23-November 21)
Sagittarius (November 22-December 21)
Capricorn (December 22-January 19)
Aquarius (January 20 to February 18)
Pisces (February 19 to March 20)
========================================
URL: https://www.codewars.com/kata/5a3e1319b6486ac96f000049
–ó–∞–¥–∞—á–∞:
Your task is to get Zodiac Sign using input day and month.
For example: 
getZodiacSign(1,5) => 'Taurus'
getZodiacSign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

Correct answers are (preloaded): 
const signs = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

P.S. Each argument is correct integer number.
WESTERN ASTROLOGY STAR SIGN DATES

Aries (March 21-April 19)
Taurus (April 20-May 20)
Gemini (May 21-June 20)
Cancer (June 21-July 22)
Leo (July 23-August 22)
Virgo (August 23-September 22)
Libra (September 23-October 22)
Scorpio (October 23-November 21)
Sagittarius (November 22-December 21)
Capricorn (December 22-January 19)
Aquarius (January 20 to February 18)
Pisces (February 19 to March 20)
========================================
URL: https://www.codewars.com/kata/5a39724945ddce2223000800
–ó–∞–¥–∞—á–∞:
Your task is to get Zodiac Sign using input day and month.
For example: 
getZodiacSign(1,5) => 'Taurus'
getZodiacSign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

Correct answers are (preloaded): 
const signs = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

P.S. Each argument is correct integer number.
WESTERN ASTROLOGY STAR SIGN DATES

Aries (March 21-April 19)
Taurus (April 20-May 20)
Gemini (May 21-June 20)
Cancer (June 21-July 22)
Leo (July 23-August 22)
Virgo (August 23-September 22)
Libra (September 23-October 22)
Scorpio (October 23-November 21)
Sagittarius (November 22-December 21)
Capricorn (December 22-January 19)
Aquarius (January 20 to February 18)
Pisces (February 19 to March 20)
========================================
URL: https://www.codewars.com/kata/5a3dd29055519e23ec000074
–ó–∞–¥–∞—á–∞:
Your task is to get Zodiac Sign using input day and month.
For example: 
getZodiacSign(1,5) => 'Taurus'
getZodiacSign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

Correct answers are (preloaded): 
const signs = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

P.S. Each argument is correct integer number.
WESTERN ASTROLOGY STAR SIGN DATES

Aries (March 21-April 19)
Taurus (April 20-May 20)
Gemini (May 21-June 20)
Cancer (June 21-July 22)
Leo (July 23-August 22)
Virgo (August 23-September 22)
Libra (September 23-October 22)
Scorpio (October 23-November 21)
Sagittarius (November 22-December 21)
Capricorn (December 22-January 19)
Aquarius (January 20 to February 18)
Pisces (February 19 to March 20)
========================================
URL: https://www.codewars.com/kata/5a376259b6cfd77ca000006b
–ó–∞–¥–∞—á–∞:
Your task is to get Zodiac Sign using input day and month.
For example: 
getZodiacSign(1,5) => 'Taurus'
getZodiacSign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

get_zodiac_sign(1,5) => 'Taurus'
get_zodiac_sign(10,10) => 'Libra'

Correct answers are (preloaded): 
const signs = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

SIGNS = ['Capricorn', 'Aquarius', 'Pisces', 'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius']

P.S. Each argument is correct integer number.
WESTERN ASTROLOGY STAR SIGN DATES

Aries (March 21-April 19)
Taurus (April 20-May 20)
Gemini (May 21-June 20)
Cancer (June 21-July 22)
Leo (July 23-August 22)
Virgo (August 23-September 22)
Libra (September 23-October 22)
Scorpio (October 23-November 21)
Sagittarius (November 22-December 21)
Capricorn (December 22-January 19)
Aquarius (January 20 to February 18)
Pisces (February 19 to March 20)
========================================
URL: https://www.codewars.com/kata/5a35f08b9e5f4923790010dc
–ó–∞–¥–∞—á–∞:
Your task it to return true if the fractional part (rounded to 1 digit) of the result (a / b) exists, more than 0 and is multiple of n.
Otherwise return false. (For Python return True or False)
All arguments are positive digital numbers.
Rounding works like toFixed() method. (if more than...5 rounds up)
Find exapmles below: 

isMultiple(5, 2, 3) -> false // 2.5 -> 5 is not multiple of 3
isMultiple(5, 3, 4) -> false // 1.7 -> 7 is not multiple of 4
isMultiple(5, 4, 3) -> true // 1.3 -> 3 is multiple of 3
isMultiple(666, 665, 2) -> false // 1.0 -> return false
========================================
URL: https://www.codewars.com/kata/5a34f087c5e28462d9000082
–ó–∞–¥–∞—á–∞:
Your task it to return true if the fractional part (rounded to 1 digit) of the result (a / b) exists, more than 0 and is multiple of n.
Otherwise return false. (For Python return True or False)
All arguments are positive digital numbers.
Rounding works like toFixed() method. (if more than...5 rounds up)
Find exapmles below: 

isMultiple(5, 2, 3) -> false // 2.5 -> 5 is not multiple of 3
isMultiple(5, 3, 4) -> false // 1.7 -> 7 is not multiple of 4
isMultiple(5, 4, 3) -> true // 1.3 -> 3 is multiple of 3
isMultiple(666, 665, 2) -> false // 1.0 -> return false
========================================
URL: https://www.codewars.com/kata/5a32526ae1ce0ec0f10000b2
–ó–∞–¥–∞—á–∞:
Your task it to return true if the fractional part (rounded to 1 digit) of the result (a / b) exists, more than 0 and is multiple of n.
Otherwise return false. (For Python return True or False)
All arguments are positive digital numbers.
Rounding works like toFixed() method. (if more than...5 rounds up)
Find exapmles below: 

isMultiple(5, 2, 3) -> false // 2.5 -> 5 is not multiple of 3
isMultiple(5, 3, 4) -> false // 1.7 -> 7 is not multiple of 4
isMultiple(5, 4, 3) -> true // 1.3 -> 3 is multiple of 3
isMultiple(666, 665, 2) -> false // 1.0 -> return false
========================================
URL: https://www.codewars.com/kata/5a2f83daee1aae4f1c00007e
–ó–∞–¥–∞—á–∞:
Your task it to return true if the fractional part (rounded to 1 digit) of the result (a / b) exists, more than 0 and is multiple of n.
Otherwise return false. (For Python return True or False)
All arguments are positive digital numbers.
Rounding works like toFixed() method. (if more than...5 rounds up)
Find exapmles below: 

isMultiple(5, 2, 3) -> false // 2.5 -> 5 is not multiple of 3
isMultiple(5, 3, 4) -> false // 1.7 -> 7 is not multiple of 4
isMultiple(5, 4, 3) -> true // 1.3 -> 3 is multiple of 3
isMultiple(666, 665, 2) -> false // 1.0 -> return false
========================================
URL: https://www.codewars.com/kata/5a34da5dee1aae516d00004a
–ó–∞–¥–∞—á–∞:
Your task it to return true if the fractional part (rounded to 1 digit) of the result (a / b) exists, more than 0 and is multiple of n.
Otherwise return false. (For Python return True or False)
All arguments are positive digital numbers.
Rounding works like toFixed() method. (if more than...5 rounds up)
Find exapmles below: 

isMultiple(5, 2, 3) -> false // 2.5 -> 5 is not multiple of 3
isMultiple(5, 3, 4) -> false // 1.7 -> 7 is not multiple of 4
isMultiple(5, 4, 3) -> true // 1.3 -> 3 is multiple of 3
isMultiple(666, 665, 2) -> false // 1.0 -> return false
========================================
URL: https://www.codewars.com/kata/5a2e8c0955519e54bf0000bd
–ó–∞–¥–∞—á–∞:
Take a number and check each digit if it is divisible by the digit on its left checked and return an array of booleans.
The booleans should always start with false becase there is no digit before the first one.
Examples
73312        => [false, false, true, false, true]
2026         => [false, true, false, true]
635          => [false, false, false]

*** Remember 0 is evenly divisible by all integers but not the other way around ***
========================================
URL: https://www.codewars.com/kata/5a2b7edcb6486a856e00005b
–ó–∞–¥–∞—á–∞:
Take a number and check each digit if it is divisible by the digit on its left checked and return an array of booleans.
The booleans should always start with false becase there is no digit before the first one.
Examples
73312        => [false, false, true, false, true]
2026         => [false, true, false, true]
635          => [false, false, false]

*** Remember 0 is evenly divisible by all integers but not the other way around ***
========================================
URL: https://www.codewars.com/kata/5a2d70a6f28b821ab4000004
–ó–∞–¥–∞—á–∞:
Take a number and check each digit if it is divisible by the digit on its left checked and return an array of booleans.
The booleans should always start with false becase there is no digit before the first one.
Examples
73312        => [false, false, true, false, true]
2026         => [false, true, false, true]
635          => [false, false, false]

*** Remember 0 is evenly divisible by all integers but not the other way around ***
========================================
URL: https://www.codewars.com/kata/5a2809dbe1ce0e07f800004d
–ó–∞–¥–∞—á–∞:
Take a number and check each digit if it is divisible by the digit on its left checked and return an array of booleans.
The booleans should always start with false becase there is no digit before the first one.
Examples
73312        => [false, false, true, false, true]
2026         => [false, true, false, true]
635          => [false, false, false]

*** Remember 0 is evenly divisible by all integers but not the other way around ***
========================================
URL: https://www.codewars.com/kata/5a29a0898f27f2d9c9000058
–ó–∞–¥–∞—á–∞:
Take a number and check each digit if it is divisible by the digit on its left checked and return an array of booleans.
The booleans should always start with false becase there is no digit before the first one.
Examples
73312        => [false, false, true, false, true]
2026         => [false, true, false, true]
635          => [false, false, false]

*** Remember 0 is evenly divisible by all integers but not the other way around ***
========================================
URL: https://www.codewars.com/kata/5a262cfb8f27f217f700000b
–ó–∞–¥–∞—á–∞:
Take debugging to a whole new level:
Given a string, remove every single bug.
This means you must remove all instances of the word 'bug' from within a given string, unless the word is plural ('bugs').
For example, given 'obugobugobuoobugsoo', you should return 'ooobuoobugsoo'.
Another example: given 'obbugugo', you should return 'obugo'.
Note that all characters will be lowercase.
Happy squishing!
========================================
URL: https://www.codewars.com/kata/5a254114e1ce0ecf6a000168
–ó–∞–¥–∞—á–∞:
Take debugging to a whole new level:
Given a string, remove every single bug.
This means you must remove all instances of the word 'bug' from within a given string, unless the word is plural ('bugs').
For example, given 'obugobugobuoobugsoo', you should return 'ooobuoobugsoo'.
Another example: given 'obbugugo', you should return 'obugo'.
Note that all characters will be lowercase.
Happy squishing!
========================================
URL: https://www.codewars.com/kata/5a224a15ee1aaef6e100005a
–ó–∞–¥–∞—á–∞:
Take debugging to a whole new level:
Given a string, remove every single bug.
This means you must remove all instances of the word 'bug' from within a given string, unless the word is plural ('bugs').
For example, given 'obugobugobuoobugsoo', you should return 'ooobuoobugsoo'.
Another example: given 'obbugugo', you should return 'obugo'.
Note that all characters will be lowercase.
Happy squishing!
========================================
URL: https://www.codewars.com/kata/5a25ac6ac5e284cfbe000111
–ó–∞–¥–∞—á–∞:
Take debugging to a whole new level:
Given a string, remove every single bug.
This means you must remove all instances of the word 'bug' from within a given string, unless the word is plural ('bugs').
For example, given 'obugobugobuoobugsoo', you should return 'ooobuoobugsoo'.
Another example: given 'obbugugo', you should return 'obugo'.
Note that all characters will be lowercase.
Happy squishing!
========================================
URL: https://www.codewars.com/kata/5a21f943c5e284d4340000cb
–ó–∞–¥–∞—á–∞:
Take debugging to a whole new level:
Given a string, remove every single bug.
This means you must remove all instances of the word 'bug' from within a given string, unless the word is plural ('bugs').
For example, given 'obugobugobuoobugsoo', you should return 'ooobuoobugsoo'.
Another example: given 'obbugugo', you should return 'obugo'.
Note that all characters will be lowercase.
Happy squishing!
========================================
URL: https://www.codewars.com/kata/5a21e090f28b824def00013c
–ó–∞–¥–∞—á–∞:
Work out what number day of the year it is.
toDayOfYear([1, 1, 2000]) => 1

The argument passed into the function is an array with the format [D, M, YYYY], e.g. [1, 2, 2000] for February 1st, 2000 or [22, 12, 1999] for December 22nd, 1999.
Don't forget to check for whether it's a leap year! Three criteria must be taken into account to identify leap years:

The year can be evenly divided by 4;
If the year can be evenly divided by 100, it is NOT a leap year, unless;
The year is also evenly divisible by 400. Then it is a leap year.
========================================
URL: https://www.codewars.com/kata/5a21bd361f7f7098e800000c
–ó–∞–¥–∞—á–∞:
Work out what number day of the year it is.
toDayOfYear([1, 1, 2000]) => 1

The argument passed into the function is an array with the format [D, M, YYYY], e.g. [1, 2, 2000] for February 1st, 2000 or [22, 12, 1999] for December 22nd, 1999.
Don't forget to check for whether it's a leap year! Three criteria must be taken into account to identify leap years:

The year can be evenly divided by 4;
If the year can be evenly divided by 100, it is NOT a leap year, unless;
The year is also evenly divisible by 400. Then it is a leap year.
========================================
URL: https://www.codewars.com/kata/5a1fe6b1ffe75f9f5a00009f
–ó–∞–¥–∞—á–∞:
Work out what number day of the year it is.
toDayOfYear([1, 1, 2000]) => 1

The argument passed into the function is an array with the format [D, M, YYYY], e.g. [1, 2, 2000] for February 1st, 2000 or [22, 12, 1999] for December 22nd, 1999.
Don't forget to check for whether it's a leap year! Three criteria must be taken into account to identify leap years:

The year can be evenly divided by 4;
If the year can be evenly divided by 100, it is NOT a leap year, unless;
The year is also evenly divisible by 400. Then it is a leap year.
========================================
URL: https://www.codewars.com/kata/5a1ee4dfffe75f0fcb000145
–ó–∞–¥–∞—á–∞:
Work out what number day of the year it is.
toDayOfYear([1, 1, 2000]) => 1

The argument passed into the function is an array with the format [D, M, YYYY], e.g. [1, 2, 2000] for February 1st, 2000 or [22, 12, 1999] for December 22nd, 1999.
Don't forget to check for whether it's a leap year! Three criteria must be taken into account to identify leap years:

The year can be evenly divided by 4;
If the year can be evenly divided by 100, it is NOT a leap year, unless;
The year is also evenly divisible by 400. Then it is a leap year.
========================================
URL: https://www.codewars.com/kata/5a1ebe0d46d843454100004c
–ó–∞–¥–∞—á–∞:
Work out what number day of the year it is.
toDayOfYear([1, 1, 2000]) => 1

The argument passed into the function is an array with the format [D, M, YYYY], e.g. [1, 2, 2000] for February 1st, 2000 or [22, 12, 1999] for December 22nd, 1999.
Don't forget to check for whether it's a leap year! Three criteria must be taken into account to identify leap years:

The year can be evenly divided by 4;
If the year can be evenly divided by 100, it is NOT a leap year, unless;
The year is also evenly divisible by 400. Then it is a leap year.
========================================
URL: https://www.codewars.com/kata/5a1ebc2480171f29cf0000e5
–ó–∞–¥–∞—á–∞:
Complete the function that counts the number of unique consonants in a string (made up of printable ascii characters).
Consonants are letters used in English other than "a", "e", "i", "o", "u". 
Remember, your function needs to return the number of unique consonants - disregarding duplicates. For example, if the string passed into the function reads "add", the function should return 1 rather than 2, since "d" is a duplicate.
Similarly, the function should also disregard duplicate consonants of differing cases. For example, "Dad" passed into the function should return 1 as "d" and "D" are duplicates.
Examples
"add" ==> 1
"Dad" ==> 1
"aeiou" ==> 0
"sillystring" ==> 7
"abcdefghijklmnopqrstuvwxyz" ==> 21
"Count my unique consonants!!" ==> 7
========================================
URL: https://www.codewars.com/kata/5a1c28f9c9fc0ef2e900013b
–ó–∞–¥–∞—á–∞:
Complete the function that counts the number of unique consonants in a string (made up of printable ascii characters).
Consonants are letters used in English other than "a", "e", "i", "o", "u". 
Remember, your function needs to return the number of unique consonants - disregarding duplicates. For example, if the string passed into the function reads "add", the function should return 1 rather than 2, since "d" is a duplicate.
Similarly, the function should also disregard duplicate consonants of differing cases. For example, "Dad" passed into the function should return 1 as "d" and "D" are duplicates.
Examples
"add" ==> 1
"Dad" ==> 1
"aeiou" ==> 0
"sillystring" ==> 7
"abcdefghijklmnopqrstuvwxyz" ==> 21
"Count my unique consonants!!" ==> 7
========================================
URL: https://www.codewars.com/kata/5a1e6323ffe75f71ae000026
–ó–∞–¥–∞—á–∞:
Complete the function that counts the number of unique consonants in a string (made up of printable ascii characters).
Consonants are letters used in English other than "a", "e", "i", "o", "u". 
Remember, your function needs to return the number of unique consonants - disregarding duplicates. For example, if the string passed into the function reads "add", the function should return 1 rather than 2, since "d" is a duplicate.
Similarly, the function should also disregard duplicate consonants of differing cases. For example, "Dad" passed into the function should return 1 as "d" and "D" are duplicates.
Examples
"add" ==> 1
"Dad" ==> 1
"aeiou" ==> 0
"sillystring" ==> 7
"abcdefghijklmnopqrstuvwxyz" ==> 21
"Count my unique consonants!!" ==> 7
========================================
URL: https://www.codewars.com/kata/5a1a9e5032b8b98477000004
–ó–∞–¥–∞—á–∞:
Complete the function that counts the number of unique consonants in a string (made up of printable ascii characters).
Consonants are letters used in English other than "a", "e", "i", "o", "u". 
Remember, your function needs to return the number of unique consonants - disregarding duplicates. For example, if the string passed into the function reads "add", the function should return 1 rather than 2, since "d" is a duplicate.
Similarly, the function should also disregard duplicate consonants of differing cases. For example, "Dad" passed into the function should return 1 as "d" and "D" are duplicates.
Examples
"add" ==> 1
"Dad" ==> 1
"aeiou" ==> 0
"sillystring" ==> 7
"abcdefghijklmnopqrstuvwxyz" ==> 21
"Count my unique consonants!!" ==> 7
========================================
URL: https://www.codewars.com/kata/5a19226646d843de9000007d
–ó–∞–¥–∞—á–∞:
Complete the function that counts the number of unique consonants in a string (made up of printable ascii characters).
Consonants are letters used in English other than "a", "e", "i", "o", "u". 
Remember, your function needs to return the number of unique consonants - disregarding duplicates. For example, if the string passed into the function reads "add", the function should return 1 rather than 2, since "d" is a duplicate.
Similarly, the function should also disregard duplicate consonants of differing cases. For example, "Dad" passed into the function should return 1 as "d" and "D" are duplicates.
Examples
"add" ==> 1
"Dad" ==> 1
"aeiou" ==> 0
"sillystring" ==> 7
"abcdefghijklmnopqrstuvwxyz" ==> 21
"Count my unique consonants!!" ==> 7
========================================
URL: https://www.codewars.com/kata/5a15a4db06d5b6d33c000018
–ó–∞–¥–∞—á–∞:
An array is a data structure in which a collection of different data stored continuously in memory. This collection is usually accessed by a numerical index and allows near instant access to all of the data held by the array as opposed to other structures such as binary search trees or linked lists, where the computer has to traverse these structures to find the item being accessed.
To demonstrate, we'll calculate the position of an array element using some simple arithmetic.
Task Overview
Given:

begin, a number which represents the location of the beginning of the array in memory,
end, a number which represents the location of the end of the array in memory,
index, a zero-based numerical key for the element being accessed,
size, a number representing the size in bytes of each item of the array,

Return the memory address of the element being accessed.
If the index is negative or the address of the memory being accessed is at or greater than the end of the array, throw an Error (JS) / IndexError (Python). In C return NULL instead.
Otherwise, who knows what data we could be accessing!
Usage Example
elementLocation(0x1000, 0x1040, 0x3, 0x8) => 0x1018
elementLocation(0x1000, 0x1040, 0x8, 0x8) // throws Error
elementLocation(0x2000, 0x2100, 0x3, 0x4) => 0x200C
elementLocation(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) # throws IndexError
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) => NULL
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

Constraints

All types given will be valid.
All numbers given are integers.
end will be greater than or equal to begin
begin, end, and size will be positive numbers.
size will be a power of 2.
begin is evenly divisible by 4.
The difference of begin and end is evenly divisible by size.
========================================
URL: https://www.codewars.com/kata/5a145ab08ba9148dd6000094
–ó–∞–¥–∞—á–∞:
An array is a data structure in which a collection of different data stored continuously in memory. This collection is usually accessed by a numerical index and allows near instant access to all of the data held by the array as opposed to other structures such as binary search trees or linked lists, where the computer has to traverse these structures to find the item being accessed.
To demonstrate, we'll calculate the position of an array element using some simple arithmetic.
Task Overview
Given:

begin, a number which represents the location of the beginning of the array in memory,
end, a number which represents the location of the end of the array in memory,
index, a zero-based numerical key for the element being accessed,
size, a number representing the size in bytes of each item of the array,

Return the memory address of the element being accessed.
If the index is negative or the address of the memory being accessed is at or greater than the end of the array, throw an Error (JS) / IndexError (Python). In C return NULL instead.
Otherwise, who knows what data we could be accessing!
Usage Example
elementLocation(0x1000, 0x1040, 0x3, 0x8) => 0x1018
elementLocation(0x1000, 0x1040, 0x8, 0x8) // throws Error
elementLocation(0x2000, 0x2100, 0x3, 0x4) => 0x200C
elementLocation(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) # throws IndexError
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) => NULL
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

Constraints

All types given will be valid.
All numbers given are integers.
end will be greater than or equal to begin
begin, end, and size will be positive numbers.
size will be a power of 2.
begin is evenly divisible by 4.
The difference of begin and end is evenly divisible by size.
========================================
URL: https://www.codewars.com/kata/5a147735ffe75f1c75000199
–ó–∞–¥–∞—á–∞:
An array is a data structure in which a collection of different data stored continuously in memory. This collection is usually accessed by a numerical index and allows near instant access to all of the data held by the array as opposed to other structures such as binary search trees or linked lists, where the computer has to traverse these structures to find the item being accessed.
To demonstrate, we'll calculate the position of an array element using some simple arithmetic.
Task Overview
Given:

begin, a number which represents the location of the beginning of the array in memory,
end, a number which represents the location of the end of the array in memory,
index, a zero-based numerical key for the element being accessed,
size, a number representing the size in bytes of each item of the array,

Return the memory address of the element being accessed.
If the index is negative or the address of the memory being accessed is at or greater than the end of the array, throw an Error (JS) / IndexError (Python). In C return NULL instead.
Otherwise, who knows what data we could be accessing!
Usage Example
elementLocation(0x1000, 0x1040, 0x3, 0x8) => 0x1018
elementLocation(0x1000, 0x1040, 0x8, 0x8) // throws Error
elementLocation(0x2000, 0x2100, 0x3, 0x4) => 0x200C
elementLocation(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) # throws IndexError
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) => NULL
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

Constraints

All types given will be valid.
All numbers given are integers.
end will be greater than or equal to begin
begin, end, and size will be positive numbers.
size will be a power of 2.
begin is evenly divisible by 4.
The difference of begin and end is evenly divisible by size.
========================================
URL: https://www.codewars.com/kata/5a106ce7ffe75f4c200000f7
–ó–∞–¥–∞—á–∞:
An array is a data structure in which a collection of different data stored continuously in memory. This collection is usually accessed by a numerical index and allows near instant access to all of the data held by the array as opposed to other structures such as binary search trees or linked lists, where the computer has to traverse these structures to find the item being accessed.
To demonstrate, we'll calculate the position of an array element using some simple arithmetic.
Task Overview
Given:

begin, a number which represents the location of the beginning of the array in memory,
end, a number which represents the location of the end of the array in memory,
index, a zero-based numerical key for the element being accessed,
size, a number representing the size in bytes of each item of the array,

Return the memory address of the element being accessed.
If the index is negative or the address of the memory being accessed is at or greater than the end of the array, throw an Error (JS) / IndexError (Python). In C return NULL instead.
Otherwise, who knows what data we could be accessing!
Usage Example
elementLocation(0x1000, 0x1040, 0x3, 0x8) => 0x1018
elementLocation(0x1000, 0x1040, 0x8, 0x8) // throws Error
elementLocation(0x2000, 0x2100, 0x3, 0x4) => 0x200C
elementLocation(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) # throws IndexError
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) => NULL
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

Constraints

All types given will be valid.
All numbers given are integers.
end will be greater than or equal to begin
begin, end, and size will be positive numbers.
size will be a power of 2.
begin is evenly divisible by 4.
The difference of begin and end is evenly divisible by size.
========================================
URL: https://www.codewars.com/kata/5a0ec343c374cb6da0000006
–ó–∞–¥–∞—á–∞:
An array is a data structure in which a collection of different data stored continuously in memory. This collection is usually accessed by a numerical index and allows near instant access to all of the data held by the array as opposed to other structures such as binary search trees or linked lists, where the computer has to traverse these structures to find the item being accessed.
To demonstrate, we'll calculate the position of an array element using some simple arithmetic.
Task Overview
Given:

begin, a number which represents the location of the beginning of the array in memory,
end, a number which represents the location of the end of the array in memory,
index, a zero-based numerical key for the element being accessed,
size, a number representing the size in bytes of each item of the array,

Return the memory address of the element being accessed.
If the index is negative or the address of the memory being accessed is at or greater than the end of the array, throw an Error (JS) / IndexError (Python). In C return NULL instead.
Otherwise, who knows what data we could be accessing!
Usage Example
elementLocation(0x1000, 0x1040, 0x3, 0x8) => 0x1018
elementLocation(0x1000, 0x1040, 0x8, 0x8) // throws Error
elementLocation(0x2000, 0x2100, 0x3, 0x4) => 0x200C
elementLocation(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) # throws IndexError
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

element_location(0x1000, 0x1040, 0x3, 0x8) => 0x1018
element_location(0x1000, 0x1040, 0x8, 0x8) => NULL
element_location(0x2000, 0x2100, 0x3, 0x4) => 0x200C
element_location(0x2000, 0x2100, 0x0, 0x4) => 0x2000

Constraints

All types given will be valid.
All numbers given are integers.
end will be greater than or equal to begin
begin, end, and size will be positive numbers.
size will be a power of 2.
begin is evenly divisible by 4.
The difference of begin and end is evenly divisible by size.
========================================
URL: https://www.codewars.com/kata/5a0da79b32b8b98b8d000097
–ó–∞–¥–∞—á–∞:
Timothy (age: 16) really likes to smoke. Unfortunately, he is too young to buy his own cigarettes and that's why he has to be extremely efficient in smoking.
It's now your task to create a function that calculates how many cigarettes Timothy can smoke out of the given amounts of bars and boxes:

a bar has 10 boxes of cigarettes,
a box has 18 cigarettes,
out of 5 stubs (cigarettes ends) Timothy is able to roll a new one,
of course the self made cigarettes also have an end which can be used to create a new one...

Please note that Timothy never starts smoking cigarettes that aren't "full size" so the amount of smoked cigarettes is always an integer.
========================================
URL: https://www.codewars.com/kata/5a0d38c9697598b67a000041
–ó–∞–¥–∞—á–∞:
Timothy (age: 16) really likes to smoke. Unfortunately, he is too young to buy his own cigarettes and that's why he has to be extremely efficient in smoking.
It's now your task to create a function that calculates how many cigarettes Timothy can smoke out of the given amounts of bars and boxes:

a bar has 10 boxes of cigarettes,
a box has 18 cigarettes,
out of 5 stubs (cigarettes ends) Timothy is able to roll a new one,
of course the self made cigarettes also have an end which can be used to create a new one...

Please note that Timothy never starts smoking cigarettes that aren't "full size" so the amount of smoked cigarettes is always an integer.
========================================
URL: https://www.codewars.com/kata/5a0b72484bebaefe60001867
–ó–∞–¥–∞—á–∞:
Timothy (age: 16) really likes to smoke. Unfortunately, he is too young to buy his own cigarettes and that's why he has to be extremely efficient in smoking.
It's now your task to create a function that calculates how many cigarettes Timothy can smoke out of the given amounts of bars and boxes:

a bar has 10 boxes of cigarettes,
a box has 18 cigarettes,
out of 5 stubs (cigarettes ends) Timothy is able to roll a new one,
of course the self made cigarettes also have an end which can be used to create a new one...

Please note that Timothy never starts smoking cigarettes that aren't "full size" so the amount of smoked cigarettes is always an integer.
========================================
URL: https://www.codewars.com/kata/5a0b4dc2ffe75f72f70000ef
–ó–∞–¥–∞—á–∞:
Timothy (age: 16) really likes to smoke. Unfortunately, he is too young to buy his own cigarettes and that's why he has to be extremely efficient in smoking.
It's now your task to create a function that calculates how many cigarettes Timothy can smoke out of the given amounts of bars and boxes:

a bar has 10 boxes of cigarettes,
a box has 18 cigarettes,
out of 5 stubs (cigarettes ends) Timothy is able to roll a new one,
of course the self made cigarettes also have an end which can be used to create a new one...

Please note that Timothy never starts smoking cigarettes that aren't "full size" so the amount of smoked cigarettes is always an integer.
========================================
URL: https://www.codewars.com/kata/5a0aae48ba2a14cfa600016d
–ó–∞–¥–∞—á–∞:
Timothy (age: 16) really likes to smoke. Unfortunately, he is too young to buy his own cigarettes and that's why he has to be extremely efficient in smoking.
It's now your task to create a function that calculates how many cigarettes Timothy can smoke out of the given amounts of bars and boxes:

a bar has 10 boxes of cigarettes,
a box has 18 cigarettes,
out of 5 stubs (cigarettes ends) Timothy is able to roll a new one,
of course the self made cigarettes also have an end which can be used to create a new one...

Please note that Timothy never starts smoking cigarettes that aren't "full size" so the amount of smoked cigarettes is always an integer.
========================================
URL: https://www.codewars.com/kata/5a092d9e46d843b9db000064
–ó–∞–¥–∞—á–∞:
Get the number n to return the sequence from n to 1.
The number n can be negative and also large number. (See the range as the following)
Example : 
n=5  >> [5,4,3,2,1]
n=-1 >> [-1,0,1]

Range :
Python     -9999 < n < 9999
Javascript -9999 < n < 9999
c++        -9999 < n < 9999
Crystal    -9999 < n < 9999
Ruby       -9999 < n < 9999
========================================
URL: https://www.codewars.com/kata/5a084a098ba9146690000969
–ó–∞–¥–∞—á–∞:
Get the number n to return the sequence from n to 1.
The number n can be negative and also large number. (See the range as the following)
Example : 
n=5  >> [5,4,3,2,1]
n=-1 >> [-1,0,1]

Range :
Python     -9999 < n < 9999
Javascript -9999 < n < 9999
c++        -9999 < n < 9999
Crystal    -9999 < n < 9999
Ruby       -9999 < n < 9999
========================================
URL: https://www.codewars.com/kata/5a090c4e697598d0b9000004
–ó–∞–¥–∞—á–∞:
Get the number n to return the sequence from n to 1.
The number n can be negative and also large number. (See the range as the following)
Example : 
n=5  >> [5,4,3,2,1]
n=-1 >> [-1,0,1]

Range :
Python     -9999 < n < 9999
Javascript -9999 < n < 9999
c++        -9999 < n < 9999
Crystal    -9999 < n < 9999
Ruby       -9999 < n < 9999
========================================
URL: https://www.codewars.com/kata/5a06238a80171f824300003c
–ó–∞–¥–∞—á–∞:
Get the number n to return the sequence from n to 1.
The number n can be negative and also large number. (See the range as the following)
Example : 
n=5  >> [5,4,3,2,1]
n=-1 >> [-1,0,1]

Range :
Python     -9999 < n < 9999
Javascript -9999 < n < 9999
c++        -9999 < n < 9999
Crystal    -9999 < n < 9999
Ruby       -9999 < n < 9999
========================================
URL: https://www.codewars.com/kata/5a05fe8a06d5b6208e00010b
–ó–∞–¥–∞—á–∞:
Get the number n to return the sequence from n to 1.
The number n can be negative and also large number. (See the range as the following)
Example : 
n=5  >> [5,4,3,2,1]
n=-1 >> [-1,0,1]

Range :
Python     -9999 < n < 9999
Javascript -9999 < n < 9999
c++        -9999 < n < 9999
Crystal    -9999 < n < 9999
Ruby       -9999 < n < 9999
========================================
URL: https://www.codewars.com/kata/5a0599908ba914a6cf000138
–ó–∞–¥–∞—á–∞:
An element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. For example:
solve([1,21,4,7,5]) = [21,7,5] because 21, 7 and 5 are greater than elments to their right. 
solve([5,4,3,2,1]) = [5,4,3,2,1]

Notice that the last element is always included. All numbers will be greater than 0.

More examples in the test cases.
Good luck!
========================================
URL: https://www.codewars.com/kata/5a04450c8ba914083700000a
–ó–∞–¥–∞—á–∞:
An element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. For example:
solve([1,21,4,7,5]) = [21,7,5] because 21, 7 and 5 are greater than elments to their right. 
solve([5,4,3,2,1]) = [5,4,3,2,1]

Notice that the last element is always included. All numbers will be greater than 0.

More examples in the test cases.
Good luck!
========================================
URL: https://www.codewars.com/kata/5a043fbef3251a5a2b0002b0
–ó–∞–¥–∞—á–∞:
An element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. For example:
solve([1,21,4,7,5]) = [21,7,5] because 21, 7 and 5 are greater than elments to their right. 
solve([5,4,3,2,1]) = [5,4,3,2,1]

Notice that the last element is always included. All numbers will be greater than 0.

More examples in the test cases.
Good luck!
========================================
URL: https://www.codewars.com/kata/5a043724ffe75fbab000009f
–ó–∞–¥–∞—á–∞:
An element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. For example:
solve([1,21,4,7,5]) = [21,7,5] because 21, 7 and 5 are greater than elments to their right. 
solve([5,4,3,2,1]) = [5,4,3,2,1]

Notice that the last element is always included. All numbers will be greater than 0.

More examples in the test cases.
Good luck!
========================================
URL: https://www.codewars.com/kata/5a04133e32b8b998dc000089
–ó–∞–¥–∞—á–∞:
An element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. For example:
solve([1,21,4,7,5]) = [21,7,5] because 21, 7 and 5 are greater than elments to their right. 
solve([5,4,3,2,1]) = [5,4,3,2,1]

Notice that the last element is always included. All numbers will be greater than 0.

More examples in the test cases.
Good luck!
========================================
URL: https://www.codewars.com/kata/5a03b3f6a1c9040084001765
–ó–∞–¥–∞—á–∞:
Create a function that takes any sentence and redistributes the spaces (and adds additional spaces if needed) so that each word starts with a vowel. The letters should all be in the same order but every vowel in the sentence should be the start of a new word. The first word in the new sentence may start without a vowel. It should return a string in all lowercase with no punctuation (only alphanumeric characters).
EXAMPLES
'It is beautiful weather today!' => 'it isb e a ut if ulw e ath ert od ay'
'Coding is great' => 'c od ing isgr e at'
'my number is 0208-533-2325' => 'myn umb er is02085332325'
========================================
URL: https://www.codewars.com/kata/5a03af9606d5b65ff7000009
–ó–∞–¥–∞—á–∞:
Create a function that takes any sentence and redistributes the spaces (and adds additional spaces if needed) so that each word starts with a vowel. The letters should all be in the same order but every vowel in the sentence should be the start of a new word. The first word in the new sentence may start without a vowel. It should return a string in all lowercase with no punctuation (only alphanumeric characters).
EXAMPLES
'It is beautiful weather today!' => 'it isb e a ut if ulw e ath ert od ay'
'Coding is great' => 'c od ing isgr e at'
'my number is 0208-533-2325' => 'myn umb er is02085332325'
========================================
URL: https://www.codewars.com/kata/5a036ecb2b651d696f00007c
–ó–∞–¥–∞—á–∞:
Create a function that takes any sentence and redistributes the spaces (and adds additional spaces if needed) so that each word starts with a vowel. The letters should all be in the same order but every vowel in the sentence should be the start of a new word. The first word in the new sentence may start without a vowel. It should return a string in all lowercase with no punctuation (only alphanumeric characters).
EXAMPLES
'It is beautiful weather today!' => 'it isb e a ut if ulw e ath ert od ay'
'Coding is great' => 'c od ing isgr e at'
'my number is 0208-533-2325' => 'myn umb er is02085332325'
========================================
URL: https://www.codewars.com/kata/5a02e9c19f8e2dbd50000167
–ó–∞–¥–∞—á–∞:
Create a function that takes any sentence and redistributes the spaces (and adds additional spaces if needed) so that each word starts with a vowel. The letters should all be in the same order but every vowel in the sentence should be the start of a new word. The first word in the new sentence may start without a vowel. It should return a string in all lowercase with no punctuation (only alphanumeric characters).
EXAMPLES
'It is beautiful weather today!' => 'it isb e a ut if ulw e ath ert od ay'
'Coding is great' => 'c od ing isgr e at'
'my number is 0208-533-2325' => 'myn umb er is02085332325'
========================================
URL: https://www.codewars.com/kata/5a0366f12b651dbfa300000c
–ó–∞–¥–∞—á–∞:
Create a function that takes any sentence and redistributes the spaces (and adds additional spaces if needed) so that each word starts with a vowel. The letters should all be in the same order but every vowel in the sentence should be the start of a new word. The first word in the new sentence may start without a vowel. It should return a string in all lowercase with no punctuation (only alphanumeric characters).
EXAMPLES
'It is beautiful weather today!' => 'it isb e a ut if ulw e ath ert od ay'
'Coding is great' => 'c od ing isgr e at'
'my number is 0208-533-2325' => 'myn umb er is02085332325'
========================================
URL: https://www.codewars.com/kata/5a028001ba2a14346b0000d4
–ó–∞–¥–∞—á–∞:
A trick I learned in elementary school to determine whether or not a number was divisible by three is to add all of the integers in the number together and to divide the resulting sum by three. If there is no remainder from dividing the sum by three, then the original number is divisible by three as well.
Given a series of digits as a string, determine if the number represented by the string is divisible by three.
Example:
"123"      -> true
"8409"     -> true
"100853"   -> false
"33333333" -> true
"7"        -> false

Try to avoid using the % (modulo) operator.
========================================
URL: https://www.codewars.com/kata/59f7fc109f0e86d705000043
–ó–∞–¥–∞—á–∞:
A trick I learned in elementary school to determine whether or not a number was divisible by three is to add all of the integers in the number together and to divide the resulting sum by three. If there is no remainder from dividing the sum by three, then the original number is divisible by three as well.
Given a series of digits as a string, determine if the number represented by the string is divisible by three.
Example:
"123"      -> true
"8409"     -> true
"100853"   -> false
"33333333" -> true
"7"        -> false

Try to avoid using the % (modulo) operator.
========================================
URL: https://www.codewars.com/kata/5a005f4fba2a14897f000086
–ó–∞–¥–∞—á–∞:
A trick I learned in elementary school to determine whether or not a number was divisible by three is to add all of the integers in the number together and to divide the resulting sum by three. If there is no remainder from dividing the sum by three, then the original number is divisible by three as well.
Given a series of digits as a string, determine if the number represented by the string is divisible by three.
Example:
"123"      -> true
"8409"     -> true
"100853"   -> false
"33333333" -> true
"7"        -> false

Try to avoid using the % (modulo) operator.
========================================
URL: https://www.codewars.com/kata/59ff4709ba2a14501500003a
–ó–∞–¥–∞—á–∞:
A trick I learned in elementary school to determine whether or not a number was divisible by three is to add all of the integers in the number together and to divide the resulting sum by three. If there is no remainder from dividing the sum by three, then the original number is divisible by three as well.
Given a series of digits as a string, determine if the number represented by the string is divisible by three.
Example:
"123"      -> true
"8409"     -> true
"100853"   -> false
"33333333" -> true
"7"        -> false

Try to avoid using the % (modulo) operator.
========================================
URL: https://www.codewars.com/kata/5a02037ac374cbab41000089
–ó–∞–¥–∞—á–∞:
A trick I learned in elementary school to determine whether or not a number was divisible by three is to add all of the integers in the number together and to divide the resulting sum by three. If there is no remainder from dividing the sum by three, then the original number is divisible by three as well.
Given a series of digits as a string, determine if the number represented by the string is divisible by three.
Example:
"123"      -> true
"8409"     -> true
"100853"   -> false
"33333333" -> true
"7"        -> false

Try to avoid using the % (modulo) operator.
========================================
URL: https://www.codewars.com/kata/59f33b86a01431d5ae000032
–ó–∞–¥–∞—á–∞:
Imagine you start on the 5th floor of a building, then travel down to the 2nd floor, then back up to the 8th floor. You have travelled a total of 3 + 6 = 9 floors of distance.
Given an array representing a series of floors you must reach by elevator, return an integer representing the total distance travelled for visiting each floor in the array in order. 
// simple examples
elevatorDistance([5,2,8]) = 9
elevatorDistance([1,2,3]) = 2
elevatorDistance([7,1,7,1]) = 18

// if two consecutive floors are the same,
//distance travelled between them is 0
elevatorDistance([3,3]) = 0

Array will always contain at least 2 floors. Random tests will contain 2-20 elements in array, and floor values between 0 and 30.
========================================
URL: https://www.codewars.com/kata/59f69fefa0143109e5000019
–ó–∞–¥–∞—á–∞:
Imagine you start on the 5th floor of a building, then travel down to the 2nd floor, then back up to the 8th floor. You have travelled a total of 3 + 6 = 9 floors of distance.
Given an array representing a series of floors you must reach by elevator, return an integer representing the total distance travelled for visiting each floor in the array in order. 
// simple examples
elevatorDistance([5,2,8]) = 9
elevatorDistance([1,2,3]) = 2
elevatorDistance([7,1,7,1]) = 18

// if two consecutive floors are the same,
//distance travelled between them is 0
elevatorDistance([3,3]) = 0

Array will always contain at least 2 floors. Random tests will contain 2-20 elements in array, and floor values between 0 and 30.
========================================
URL: https://www.codewars.com/kata/59f11118a5e129e591000134
–ó–∞–¥–∞—á–∞:
Imagine you start on the 5th floor of a building, then travel down to the 2nd floor, then back up to the 8th floor. You have travelled a total of 3 + 6 = 9 floors of distance.
Given an array representing a series of floors you must reach by elevator, return an integer representing the total distance travelled for visiting each floor in the array in order. 
// simple examples
elevatorDistance([5,2,8]) = 9
elevatorDistance([1,2,3]) = 2
elevatorDistance([7,1,7,1]) = 18

// if two consecutive floors are the same,
//distance travelled between them is 0
elevatorDistance([3,3]) = 0

Array will always contain at least 2 floors. Random tests will contain 2-20 elements in array, and floor values between 0 and 30.
========================================
URL: https://www.codewars.com/kata/59f7a0a77eb74bf96b00006a
–ó–∞–¥–∞—á–∞:
Imagine you start on the 5th floor of a building, then travel down to the 2nd floor, then back up to the 8th floor. You have travelled a total of 3 + 6 = 9 floors of distance.
Given an array representing a series of floors you must reach by elevator, return an integer representing the total distance travelled for visiting each floor in the array in order. 
// simple examples
elevatorDistance([5,2,8]) = 9
elevatorDistance([1,2,3]) = 2
elevatorDistance([7,1,7,1]) = 18

// if two consecutive floors are the same,
//distance travelled between them is 0
elevatorDistance([3,3]) = 0

Array will always contain at least 2 floors. Random tests will contain 2-20 elements in array, and floor values between 0 and 30.
========================================
URL: https://www.codewars.com/kata/59eb28fb0a2bffafbb0000d6
–ó–∞–¥–∞—á–∞:
Kata Task
You are given a list of cogs in a gear train
Each element represents the number of teeth of that cog
e.g. [100, 50, 25] means 

1st cog has 100 teeth 
2nd cog has 50 teeth
3rd cog has 25 teeth

If the nth cog rotates clockwise at 1 RPM what is the RPM of the cogs at each end of the gear train? 
Notes

no two cogs share the same shaft
return an array whose two elements are RPM of the first and last cogs respectively
use negative numbers for anti-clockwise rotation
for convenience n is zero-based
For C and NASM coders, the returned array will be free'd.


Series:

Cogs
Cogs 2
========================================
URL: https://www.codewars.com/kata/59e77930233243a7b7000026
–ó–∞–¥–∞—á–∞:
Kata Task
You are given a list of cogs in a gear train
Each element represents the number of teeth of that cog
e.g. [100, 50, 25] means 

1st cog has 100 teeth 
2nd cog has 50 teeth
3rd cog has 25 teeth

If the nth cog rotates clockwise at 1 RPM what is the RPM of the cogs at each end of the gear train? 
Notes

no two cogs share the same shaft
return an array whose two elements are RPM of the first and last cogs respectively
use negative numbers for anti-clockwise rotation
for convenience n is zero-based
For C and NASM coders, the returned array will be free'd.


Series:

Cogs
Cogs 2
========================================
URL: https://www.codewars.com/kata/59ea2a532a7accf2510000ce
–ó–∞–¥–∞—á–∞:
Kata Task
You are given a list of cogs in a gear train
Each element represents the number of teeth of that cog
e.g. [100, 50, 25] means 

1st cog has 100 teeth 
2nd cog has 50 teeth
3rd cog has 25 teeth

If the nth cog rotates clockwise at 1 RPM what is the RPM of the cogs at each end of the gear train? 
Notes

no two cogs share the same shaft
return an array whose two elements are RPM of the first and last cogs respectively
use negative numbers for anti-clockwise rotation
for convenience n is zero-based
For C and NASM coders, the returned array will be free'd.


Series:

Cogs
Cogs 2
========================================
URL: https://www.codewars.com/kata/59e9f404fc3c49ab24000112
–ó–∞–¥–∞—á–∞:
Kata Task
You are given a list of cogs in a gear train
Each element represents the number of teeth of that cog
e.g. [100, 50, 25] means 

1st cog has 100 teeth 
2nd cog has 50 teeth
3rd cog has 25 teeth

If the nth cog rotates clockwise at 1 RPM what is the RPM of the cogs at each end of the gear train? 
Notes

no two cogs share the same shaft
return an array whose two elements are RPM of the first and last cogs respectively
use negative numbers for anti-clockwise rotation
for convenience n is zero-based
For C and NASM coders, the returned array will be free'd.


Series:

Cogs
Cogs 2
========================================
URL: https://www.codewars.com/kata/59e72bdcfc3c4974190000d9
–ó–∞–¥–∞—á–∞:
Kata Task
You are given a list of cogs in a gear train
Each element represents the number of teeth of that cog
e.g. [100, 50, 25] means 

1st cog has 100 teeth 
2nd cog has 50 teeth
3rd cog has 25 teeth

If the nth cog rotates clockwise at 1 RPM what is the RPM of the cogs at each end of the gear train? 
Notes

no two cogs share the same shaft
return an array whose two elements are RPM of the first and last cogs respectively
use negative numbers for anti-clockwise rotation
for convenience n is zero-based
For C and NASM coders, the returned array will be free'd.


Series:

Cogs
Cogs 2
========================================
URL: https://www.codewars.com/kata/59e6aec2b2c32c9d8b000184
–ó–∞–¥–∞—á–∞:
It happened decades before Snapchat, years before Twitter and even before Facebook. Targeted advertising was a bit of a challenge back then. One day, the marketing professor at my university told us a story that I am yet to confirm using reliable sources. Nevertheless, I retold the story to dozens of my students already, so, sorry BMW if it is all a big lie.
Allegedly, BMW, in an attempt to target the educated, produced billboard posters featuring the English alphabet with three letters missing: B, M and W. Needless to say, many were confused, some to the extent of road accidents.
Your task is to write a function that takes one parameter str that MUST be a string and removes all capital and small letters B, M and W.If data of the wrong data type was sent as a parameter the function must throw an error with the following specific message: 
TypeError("This program only works for text.")

new Error("This program only works for text.");

"This program only works for text."

new IllegalArgumentException("This program only works for text.")

For Python here's a good resource you might need for the exception type ;)
========================================
URL: https://www.codewars.com/kata/59e5fe367905df7f5c000072
–ó–∞–¥–∞—á–∞:
It happened decades before Snapchat, years before Twitter and even before Facebook. Targeted advertising was a bit of a challenge back then. One day, the marketing professor at my university told us a story that I am yet to confirm using reliable sources. Nevertheless, I retold the story to dozens of my students already, so, sorry BMW if it is all a big lie.
Allegedly, BMW, in an attempt to target the educated, produced billboard posters featuring the English alphabet with three letters missing: B, M and W. Needless to say, many were confused, some to the extent of road accidents.
Your task is to write a function that takes one parameter str that MUST be a string and removes all capital and small letters B, M and W.If data of the wrong data type was sent as a parameter the function must throw an error with the following specific message: 
TypeError("This program only works for text.")

new Error("This program only works for text.");

"This program only works for text."

new IllegalArgumentException("This program only works for text.")

For Python here's a good resource you might need for the exception type ;)
========================================
URL: https://www.codewars.com/kata/59e1b9ce7997cbecb9000014
–ó–∞–¥–∞—á–∞:
It happened decades before Snapchat, years before Twitter and even before Facebook. Targeted advertising was a bit of a challenge back then. One day, the marketing professor at my university told us a story that I am yet to confirm using reliable sources. Nevertheless, I retold the story to dozens of my students already, so, sorry BMW if it is all a big lie.
Allegedly, BMW, in an attempt to target the educated, produced billboard posters featuring the English alphabet with three letters missing: B, M and W. Needless to say, many were confused, some to the extent of road accidents.
Your task is to write a function that takes one parameter str that MUST be a string and removes all capital and small letters B, M and W.If data of the wrong data type was sent as a parameter the function must throw an error with the following specific message: 
TypeError("This program only works for text.")

new Error("This program only works for text.");

"This program only works for text."

new IllegalArgumentException("This program only works for text.")

For Python here's a good resource you might need for the exception type ;)
========================================
URL: https://www.codewars.com/kata/59e49b2afc3c494d5d00002a
–ó–∞–¥–∞—á–∞:
It happened decades before Snapchat, years before Twitter and even before Facebook. Targeted advertising was a bit of a challenge back then. One day, the marketing professor at my university told us a story that I am yet to confirm using reliable sources. Nevertheless, I retold the story to dozens of my students already, so, sorry BMW if it is all a big lie.
Allegedly, BMW, in an attempt to target the educated, produced billboard posters featuring the English alphabet with three letters missing: B, M and W. Needless to say, many were confused, some to the extent of road accidents.
Your task is to write a function that takes one parameter str that MUST be a string and removes all capital and small letters B, M and W.If data of the wrong data type was sent as a parameter the function must throw an error with the following specific message: 
TypeError("This program only works for text.")

new Error("This program only works for text.");

"This program only works for text."

new IllegalArgumentException("This program only works for text.")

For Python here's a good resource you might need for the exception type ;)
========================================
URL: https://www.codewars.com/kata/59de795c289ef9197f000c48
–ó–∞–¥–∞—á–∞:
It happened decades before Snapchat, years before Twitter and even before Facebook. Targeted advertising was a bit of a challenge back then. One day, the marketing professor at my university told us a story that I am yet to confirm using reliable sources. Nevertheless, I retold the story to dozens of my students already, so, sorry BMW if it is all a big lie.
Allegedly, BMW, in an attempt to target the educated, produced billboard posters featuring the English alphabet with three letters missing: B, M and W. Needless to say, many were confused, some to the extent of road accidents.
Your task is to write a function that takes one parameter str that MUST be a string and removes all capital and small letters B, M and W.If data of the wrong data type was sent as a parameter the function must throw an error with the following specific message: 
TypeError("This program only works for text.")

new Error("This program only works for text.");

"This program only works for text."

new IllegalArgumentException("This program only works for text.")

For Python here's a good resource you might need for the exception type ;)
========================================
URL: https://www.codewars.com/kata/59de469cfc3c492da80000c5
–ó–∞–¥–∞—á–∞:
The Menger Sponge is a three-dimensional fractal, first described by Karl Menger in 1926.

An illustration of the iterative construction of a Menger sponge
A method of constructing a Menger Sponge can be visualized as follows:

Start from a cube (first part of image).
Scale down the cube so that side length is 1/3 of its original, and make 20 copies of it.
Place the copies so that they measure the same size as the original cube but without its central parts (next part of image)
Repeat the process from step 2 for the new smaller cubes from the previous step.
In each iteration (e.g. repeating the last three steps), the effect will be that parts of the cube will be removed, they'll never be added. Menger sponge will always consist of parts will never be removed, regardless of how many iterations you do.


An alternative explanation:

Start from a cube (first part of image).
Devide each cube into 27 equal sized cubes.
Remove the middle-cube and the six cubes on each side of the group of 27 cubes (second part of image).
Repeat the process from step 2 for the smaller cubes (third and fourth part of image).

Task
In this kata you will create a function that takes non negative integers (from 0 to n) and return the amount of cubes that the Menger Sponge would have in that specific iteration.
Example
For n = 0, the ouptut should be 1;
For n = 1, the output should be 20;
For n = 2, the output should be 400;
For n = 3, the output should be 8000;
for n = 4, the output should be 160000;
For n = 5, the output should be 3200000;
For n = 6, the output should be 64000000.

Happy coding!
========================================
URL: https://www.codewars.com/kata/59dd2c38f703c4ae5e000014
–ó–∞–¥–∞—á–∞:
The Menger Sponge is a three-dimensional fractal, first described by Karl Menger in 1926.

An illustration of the iterative construction of a Menger sponge
A method of constructing a Menger Sponge can be visualized as follows:

Start from a cube (first part of image).
Scale down the cube so that side length is 1/3 of its original, and make 20 copies of it.
Place the copies so that they measure the same size as the original cube but without its central parts (next part of image)
Repeat the process from step 2 for the new smaller cubes from the previous step.
In each iteration (e.g. repeating the last three steps), the effect will be that parts of the cube will be removed, they'll never be added. Menger sponge will always consist of parts will never be removed, regardless of how many iterations you do.


An alternative explanation:

Start from a cube (first part of image).
Devide each cube into 27 equal sized cubes.
Remove the middle-cube and the six cubes on each side of the group of 27 cubes (second part of image).
Repeat the process from step 2 for the smaller cubes (third and fourth part of image).

Task
In this kata you will create a function that takes non negative integers (from 0 to n) and return the amount of cubes that the Menger Sponge would have in that specific iteration.
Example
For n = 0, the ouptut should be 1;
For n = 1, the output should be 20;
For n = 2, the output should be 400;
For n = 3, the output should be 8000;
for n = 4, the output should be 160000;
For n = 5, the output should be 3200000;
For n = 6, the output should be 64000000.

Happy coding!
========================================
URL: https://www.codewars.com/kata/59d2fc6c23dacca182000068
–ó–∞–¥–∞—á–∞:
The Menger Sponge is a three-dimensional fractal, first described by Karl Menger in 1926.

An illustration of the iterative construction of a Menger sponge
A method of constructing a Menger Sponge can be visualized as follows:

Start from a cube (first part of image).
Scale down the cube so that side length is 1/3 of its original, and make 20 copies of it.
Place the copies so that they measure the same size as the original cube but without its central parts (next part of image)
Repeat the process from step 2 for the new smaller cubes from the previous step.
In each iteration (e.g. repeating the last three steps), the effect will be that parts of the cube will be removed, they'll never be added. Menger sponge will always consist of parts will never be removed, regardless of how many iterations you do.


An alternative explanation:

Start from a cube (first part of image).
Devide each cube into 27 equal sized cubes.
Remove the middle-cube and the six cubes on each side of the group of 27 cubes (second part of image).
Repeat the process from step 2 for the smaller cubes (third and fourth part of image).

Task
In this kata you will create a function that takes non negative integers (from 0 to n) and return the amount of cubes that the Menger Sponge would have in that specific iteration.
Example
For n = 0, the ouptut should be 1;
For n = 1, the output should be 20;
For n = 2, the output should be 400;
For n = 3, the output should be 8000;
for n = 4, the output should be 160000;
For n = 5, the output should be 3200000;
For n = 6, the output should be 64000000.

Happy coding!
========================================
URL: https://www.codewars.com/kata/59d9ff9f7905dfeed50000b0
–ó–∞–¥–∞—á–∞:
The Menger Sponge is a three-dimensional fractal, first described by Karl Menger in 1926.

An illustration of the iterative construction of a Menger sponge
A method of constructing a Menger Sponge can be visualized as follows:

Start from a cube (first part of image).
Scale down the cube so that side length is 1/3 of its original, and make 20 copies of it.
Place the copies so that they measure the same size as the original cube but without its central parts (next part of image)
Repeat the process from step 2 for the new smaller cubes from the previous step.
In each iteration (e.g. repeating the last three steps), the effect will be that parts of the cube will be removed, they'll never be added. Menger sponge will always consist of parts will never be removed, regardless of how many iterations you do.


An alternative explanation:

Start from a cube (first part of image).
Devide each cube into 27 equal sized cubes.
Remove the middle-cube and the six cubes on each side of the group of 27 cubes (second part of image).
Repeat the process from step 2 for the smaller cubes (third and fourth part of image).

Task
In this kata you will create a function that takes non negative integers (from 0 to n) and return the amount of cubes that the Menger Sponge would have in that specific iteration.
Example
For n = 0, the ouptut should be 1;
For n = 1, the output should be 20;
For n = 2, the output should be 400;
For n = 3, the output should be 8000;
for n = 4, the output should be 160000;
For n = 5, the output should be 3200000;
For n = 6, the output should be 64000000.

Happy coding!
========================================
URL: https://www.codewars.com/kata/59d28768a25c8c51a6000057
–ó–∞–¥–∞—á–∞:
The Menger Sponge is a three-dimensional fractal, first described by Karl Menger in 1926.

An illustration of the iterative construction of a Menger sponge
A method of constructing a Menger Sponge can be visualized as follows:

Start from a cube (first part of image).
Scale down the cube so that side length is 1/3 of its original, and make 20 copies of it.
Place the copies so that they measure the same size as the original cube but without its central parts (next part of image)
Repeat the process from step 2 for the new smaller cubes from the previous step.
In each iteration (e.g. repeating the last three steps), the effect will be that parts of the cube will be removed, they'll never be added. Menger sponge will always consist of parts will never be removed, regardless of how many iterations you do.


An alternative explanation:

Start from a cube (first part of image).
Devide each cube into 27 equal sized cubes.
Remove the middle-cube and the six cubes on each side of the group of 27 cubes (second part of image).
Repeat the process from step 2 for the smaller cubes (third and fourth part of image).

Task
In this kata you will create a function that takes non negative integers (from 0 to n) and return the amount of cubes that the Menger Sponge would have in that specific iteration.
Example
For n = 0, the ouptut should be 1;
For n = 1, the output should be 20;
For n = 2, the output should be 400;
For n = 3, the output should be 8000;
for n = 4, the output should be 160000;
For n = 5, the output should be 3200000;
For n = 6, the output should be 64000000.

Happy coding!
========================================
URL: https://www.codewars.com/kata/59cfc09a86a6fdf6df0000f1
–ó–∞–¥–∞—á–∞:
Simple interest on a loan is calculated by simply taking the initial amount (the principal, p) and multiplying it by a rate of interest (r) and the number of time periods (n). 
Compound interest is calculated by adding the interest after each time period to the amount owed, then calculating the next interest payment based on the principal PLUS the interest from all previous periods.
Given a principal p, interest rate r, and a number of periods n, return an array [ total owed under simple interest, total owed under compound interest ]
Notes:

Round all answers to the nearest integer
Principal will always be an integer between 0 and 9999
interest rate will be a decimal between 0 and 1
number of time periods will be an integer between 0 and 50

Examples
interest(100, 0.1,  1)  =  [110, 110]
interest(100, 0.1,  2)  =  [120, 121]
interest(100, 0.1, 10)  =  [200, 259]


More on Simple interest, compound interest and continuous interest
========================================
URL: https://www.codewars.com/kata/59cfc000aeb2844d16000075
–ó–∞–¥–∞—á–∞:
Simple interest on a loan is calculated by simply taking the initial amount (the principal, p) and multiplying it by a rate of interest (r) and the number of time periods (n). 
Compound interest is calculated by adding the interest after each time period to the amount owed, then calculating the next interest payment based on the principal PLUS the interest from all previous periods.
Given a principal p, interest rate r, and a number of periods n, return an array [ total owed under simple interest, total owed under compound interest ]
Notes:

Round all answers to the nearest integer
Principal will always be an integer between 0 and 9999
interest rate will be a decimal between 0 and 1
number of time periods will be an integer between 0 and 50

Examples
interest(100, 0.1,  1)  =  [110, 110]
interest(100, 0.1,  2)  =  [120, 121]
interest(100, 0.1, 10)  =  [200, 259]


More on Simple interest, compound interest and continuous interest
========================================
URL: https://www.codewars.com/kata/59cdb2b3a25c8c6d56000005
–ó–∞–¥–∞—á–∞:
Simple interest on a loan is calculated by simply taking the initial amount (the principal, p) and multiplying it by a rate of interest (r) and the number of time periods (n). 
Compound interest is calculated by adding the interest after each time period to the amount owed, then calculating the next interest payment based on the principal PLUS the interest from all previous periods.
Given a principal p, interest rate r, and a number of periods n, return an array [ total owed under simple interest, total owed under compound interest ]
Notes:

Round all answers to the nearest integer
Principal will always be an integer between 0 and 9999
interest rate will be a decimal between 0 and 1
number of time periods will be an integer between 0 and 50

Examples
interest(100, 0.1,  1)  =  [110, 110]
interest(100, 0.1,  2)  =  [120, 121]
interest(100, 0.1, 10)  =  [200, 259]


More on Simple interest, compound interest and continuous interest
========================================
URL: https://www.codewars.com/kata/59cd155d1a68b70f8e000117
–ó–∞–¥–∞—á–∞:
Simple interest on a loan is calculated by simply taking the initial amount (the principal, p) and multiplying it by a rate of interest (r) and the number of time periods (n). 
Compound interest is calculated by adding the interest after each time period to the amount owed, then calculating the next interest payment based on the principal PLUS the interest from all previous periods.
Given a principal p, interest rate r, and a number of periods n, return an array [ total owed under simple interest, total owed under compound interest ]
Notes:

Round all answers to the nearest integer
Principal will always be an integer between 0 and 9999
interest rate will be a decimal between 0 and 1
number of time periods will be an integer between 0 and 50

Examples
interest(100, 0.1,  1)  =  [110, 110]
interest(100, 0.1,  2)  =  [120, 121]
interest(100, 0.1, 10)  =  [200, 259]


More on Simple interest, compound interest and continuous interest
========================================
URL: https://www.codewars.com/kata/59cd0535328801336e000649
–ó–∞–¥–∞—á–∞:
Simple interest on a loan is calculated by simply taking the initial amount (the principal, p) and multiplying it by a rate of interest (r) and the number of time periods (n). 
Compound interest is calculated by adding the interest after each time period to the amount owed, then calculating the next interest payment based on the principal PLUS the interest from all previous periods.
Given a principal p, interest rate r, and a number of periods n, return an array [ total owed under simple interest, total owed under compound interest ]
Notes:

Round all answers to the nearest integer
Principal will always be an integer between 0 and 9999
interest rate will be a decimal between 0 and 1
number of time periods will be an integer between 0 and 50

Examples
interest(100, 0.1,  1)  =  [110, 110]
interest(100, 0.1,  2)  =  [120, 121]
interest(100, 0.1, 10)  =  [200, 259]


More on Simple interest, compound interest and continuous interest
========================================
URL: https://www.codewars.com/kata/59ca8e8e1a68b7de740001f4
–ó–∞–¥–∞—á–∞:
The vowel substrings in the word codewarriors are o,e,a,io. The longest of these has a length of 2. Given a lowercase string that has alphabetic characters only (both vowels and consonants) and no spaces, return the length of the longest vowel substring.
Vowels are any of aeiou. 
Good luck!
If you like substring Katas, please try:
Non-even substrings
Vowel-consonant lexicon
========================================
URL: https://www.codewars.com/kata/59c62f1bdcc40560a2000060
–ó–∞–¥–∞—á–∞:
The vowel substrings in the word codewarriors are o,e,a,io. The longest of these has a length of 2. Given a lowercase string that has alphabetic characters only (both vowels and consonants) and no spaces, return the length of the longest vowel substring.
Vowels are any of aeiou. 
Good luck!
If you like substring Katas, please try:
Non-even substrings
Vowel-consonant lexicon
========================================
URL: https://www.codewars.com/kata/59ca888aaeb284bb8f0000aa
–ó–∞–¥–∞—á–∞:
The vowel substrings in the word codewarriors are o,e,a,io. The longest of these has a length of 2. Given a lowercase string that has alphabetic characters only (both vowels and consonants) and no spaces, return the length of the longest vowel substring.
Vowels are any of aeiou. 
Good luck!
If you like substring Katas, please try:
Non-even substrings
Vowel-consonant lexicon
========================================
URL: https://www.codewars.com/kata/59c6fa6972851e8959000067
–ó–∞–¥–∞—á–∞:
The vowel substrings in the word codewarriors are o,e,a,io. The longest of these has a length of 2. Given a lowercase string that has alphabetic characters only (both vowels and consonants) and no spaces, return the length of the longest vowel substring.
Vowels are any of aeiou. 
Good luck!
If you like substring Katas, please try:
Non-even substrings
Vowel-consonant lexicon
========================================
URL: https://www.codewars.com/kata/59c5f4e9d751df43cf000035
–ó–∞–¥–∞—á–∞:
The vowel substrings in the word codewarriors are o,e,a,io. The longest of these has a length of 2. Given a lowercase string that has alphabetic characters only (both vowels and consonants) and no spaces, return the length of the longest vowel substring.
Vowels are any of aeiou. 
Good luck!
If you like substring Katas, please try:
Non-even substrings
Vowel-consonant lexicon
========================================
URL: https://www.codewars.com/kata/59c0b9d4cb7fb4dd41000962
–ó–∞–¥–∞—á–∞:
A Nice array is defined to be an array where for every value n in the array, there is also an element n - 1 or n + 1 in the array.
examples:
[2, 10, 9, 3] is a nice array because

 2 =  3 - 1
10 =  9 + 1
 3 =  2 + 1
 9 = 10 - 1

[4, 2, 3] is a nice array because

4 = 3 + 1
2 = 3 - 1
3 = 2 + 1 (or 3 = 4 - 1)

[4, 2, 1] is a not a nice array because

for n = 4, there is neither n - 1 = 3 nor n + 1 = 5

Write a function named isNice/IsNice that returns true if its array argument is a Nice array, else false. An empty array is not considered nice.
========================================
URL: https://www.codewars.com/kata/59bc0059bf10a498a6000025
–ó–∞–¥–∞—á–∞:
A Nice array is defined to be an array where for every value n in the array, there is also an element n - 1 or n + 1 in the array.
examples:
[2, 10, 9, 3] is a nice array because

 2 =  3 - 1
10 =  9 + 1
 3 =  2 + 1
 9 = 10 - 1

[4, 2, 3] is a nice array because

4 = 3 + 1
2 = 3 - 1
3 = 2 + 1 (or 3 = 4 - 1)

[4, 2, 1] is a not a nice array because

for n = 4, there is neither n - 1 = 3 nor n + 1 = 5

Write a function named isNice/IsNice that returns true if its array argument is a Nice array, else false. An empty array is not considered nice.
========================================
URL: https://www.codewars.com/kata/59bd84b8a0640e7c49002398
–ó–∞–¥–∞—á–∞:
A Nice array is defined to be an array where for every value n in the array, there is also an element n - 1 or n + 1 in the array.
examples:
[2, 10, 9, 3] is a nice array because

 2 =  3 - 1
10 =  9 + 1
 3 =  2 + 1
 9 = 10 - 1

[4, 2, 3] is a nice array because

4 = 3 + 1
2 = 3 - 1
3 = 2 + 1 (or 3 = 4 - 1)

[4, 2, 1] is a not a nice array because

for n = 4, there is neither n - 1 = 3 nor n + 1 = 5

Write a function named isNice/IsNice that returns true if its array argument is a Nice array, else false. An empty array is not considered nice.
========================================
URL: https://www.codewars.com/kata/59be6bdc4f98a8a9c700007d
–ó–∞–¥–∞—á–∞:
A Nice array is defined to be an array where for every value n in the array, there is also an element n - 1 or n + 1 in the array.
examples:
[2, 10, 9, 3] is a nice array because

 2 =  3 - 1
10 =  9 + 1
 3 =  2 + 1
 9 = 10 - 1

[4, 2, 3] is a nice array because

4 = 3 + 1
2 = 3 - 1
3 = 2 + 1 (or 3 = 4 - 1)

[4, 2, 1] is a not a nice array because

for n = 4, there is neither n - 1 = 3 nor n + 1 = 5

Write a function named isNice/IsNice that returns true if its array argument is a Nice array, else false. An empty array is not considered nice.
========================================
URL: https://www.codewars.com/kata/59b844528bcb7735560000a0
–ó–∞–¥–∞—á–∞:
A Nice array is defined to be an array where for every value n in the array, there is also an element n - 1 or n + 1 in the array.
examples:
[2, 10, 9, 3] is a nice array because

 2 =  3 - 1
10 =  9 + 1
 3 =  2 + 1
 9 = 10 - 1

[4, 2, 3] is a nice array because

4 = 3 + 1
2 = 3 - 1
3 = 2 + 1 (or 3 = 4 - 1)

[4, 2, 1] is a not a nice array because

for n = 4, there is neither n - 1 = 3 nor n + 1 = 5

Write a function named isNice/IsNice that returns true if its array argument is a Nice array, else false. An empty array is not considered nice.
========================================
URL: https://www.codewars.com/kata/59b843b58bcb7766660000f6
–ó–∞–¥–∞—á–∞:
Converting a 24-hour time like "0830" or "2030" to a 12-hour time (like "8:30 am" or "8:30 pm") sounds easy enough, right?  Well, let's see if you can do it!
You will have to define a function named "to12hourtime", and you will be given a four digit time string (in "hhmm" format) as input.
Your task is to return a 12-hour time string in the form of "h:mm am" or "h:mm pm".  (Of course, the "h" part will be two digits if the hour is greater than 9.)
If you like this kata, try converting 12-hour time to 24-hour time:
https://www.codewars.com/kata/converting-12-hour-time-to-24-hour-time
========================================
URL: https://www.codewars.com/kata/59b710ed70a3b7dd8f000027
–ó–∞–¥–∞—á–∞:
Converting a 24-hour time like "0830" or "2030" to a 12-hour time (like "8:30 am" or "8:30 pm") sounds easy enough, right?  Well, let's see if you can do it!
You will have to define a function named "to12hourtime", and you will be given a four digit time string (in "hhmm" format) as input.
Your task is to return a 12-hour time string in the form of "h:mm am" or "h:mm pm".  (Of course, the "h" part will be two digits if the hour is greater than 9.)
If you like this kata, try converting 12-hour time to 24-hour time:
https://www.codewars.com/kata/converting-12-hour-time-to-24-hour-time
========================================
URL: https://www.codewars.com/kata/59b11f57f322e5da45000254
–ó–∞–¥–∞—á–∞:
Converting a 24-hour time like "0830" or "2030" to a 12-hour time (like "8:30 am" or "8:30 pm") sounds easy enough, right?  Well, let's see if you can do it!
You will have to define a function named "to12hourtime", and you will be given a four digit time string (in "hhmm" format) as input.
Your task is to return a 12-hour time string in the form of "h:mm am" or "h:mm pm".  (Of course, the "h" part will be two digits if the hour is greater than 9.)
If you like this kata, try converting 12-hour time to 24-hour time:
https://www.codewars.com/kata/converting-12-hour-time-to-24-hour-time
========================================
URL: https://www.codewars.com/kata/59b44d00bf10a439dd00006f
–ó–∞–¥–∞—á–∞:
Converting a 24-hour time like "0830" or "2030" to a 12-hour time (like "8:30 am" or "8:30 pm") sounds easy enough, right?  Well, let's see if you can do it!
You will have to define a function named "to12hourtime", and you will be given a four digit time string (in "hhmm" format) as input.
Your task is to return a 12-hour time string in the form of "h:mm am" or "h:mm pm".  (Of course, the "h" part will be two digits if the hour is greater than 9.)
If you like this kata, try converting 12-hour time to 24-hour time:
https://www.codewars.com/kata/converting-12-hour-time-to-24-hour-time
========================================
URL: https://www.codewars.com/kata/59b0ab12cf3395ef68000081
–ó–∞–¥–∞—á–∞:
Converting a 24-hour time like "0830" or "2030" to a 12-hour time (like "8:30 am" or "8:30 pm") sounds easy enough, right?  Well, let's see if you can do it!
You will have to define a function named "to12hourtime", and you will be given a four digit time string (in "hhmm" format) as input.
Your task is to return a 12-hour time string in the form of "h:mm am" or "h:mm pm".  (Of course, the "h" part will be two digits if the hour is greater than 9.)
If you like this kata, try converting 12-hour time to 24-hour time:
https://www.codewars.com/kata/converting-12-hour-time-to-24-hour-time
========================================
URL: https://www.codewars.com/kata/59b0a6da44a4b7080300008a
–ó–∞–¥–∞—á–∞:
Given an array (a list in Python) of integers and an integer n, find all occurrences of n in the given array and return another array containing all the index positions of n in the given array.
If n is not in the given array, return an empty array [].
Assume that n and all values in the given array will always be integers.
Example:
find_all(7, {6, 9, 3, 4, 3, 82, 11}, 3, *z)
// returns pointer to {2, 4}
// assigns array length to `*z`

find_all([6, 9, 3, 4, 3, 82, 11], 3)
> [2, 4]

findAll([6, 9, 3, 4, 3, 82, 11], 3) => [2, 4]

Kata.FindAll(new int[] {6, 9, 3, 4, 3, 82, 11}, 3) => new int[] {2, 4}

findAll [6, 9, 3, 4, 3, 82, 11]  3 = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]
========================================
URL: https://www.codewars.com/kata/59aa2cccd0a5ffdfa000005b
–ó–∞–¥–∞—á–∞:
Given an array (a list in Python) of integers and an integer n, find all occurrences of n in the given array and return another array containing all the index positions of n in the given array.
If n is not in the given array, return an empty array [].
Assume that n and all values in the given array will always be integers.
Example:
find_all(7, {6, 9, 3, 4, 3, 82, 11}, 3, *z)
// returns pointer to {2, 4}
// assigns array length to `*z`

find_all([6, 9, 3, 4, 3, 82, 11], 3)
> [2, 4]

findAll([6, 9, 3, 4, 3, 82, 11], 3) => [2, 4]

Kata.FindAll(new int[] {6, 9, 3, 4, 3, 82, 11}, 3) => new int[] {2, 4}

findAll [6, 9, 3, 4, 3, 82, 11]  3 = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]
========================================
URL: https://www.codewars.com/kata/59afff65f1c8274f270020f5
–ó–∞–¥–∞—á–∞:
Given an array (a list in Python) of integers and an integer n, find all occurrences of n in the given array and return another array containing all the index positions of n in the given array.
If n is not in the given array, return an empty array [].
Assume that n and all values in the given array will always be integers.
Example:
find_all(7, {6, 9, 3, 4, 3, 82, 11}, 3, *z)
// returns pointer to {2, 4}
// assigns array length to `*z`

find_all([6, 9, 3, 4, 3, 82, 11], 3)
> [2, 4]

findAll([6, 9, 3, 4, 3, 82, 11], 3) => [2, 4]

Kata.FindAll(new int[] {6, 9, 3, 4, 3, 82, 11}, 3) => new int[] {2, 4}

findAll [6, 9, 3, 4, 3, 82, 11]  3 = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]
========================================
URL: https://www.codewars.com/kata/59ad7d2e07157af687000070
–ó–∞–¥–∞—á–∞:
Given an array (a list in Python) of integers and an integer n, find all occurrences of n in the given array and return another array containing all the index positions of n in the given array.
If n is not in the given array, return an empty array [].
Assume that n and all values in the given array will always be integers.
Example:
find_all(7, {6, 9, 3, 4, 3, 82, 11}, 3, *z)
// returns pointer to {2, 4}
// assigns array length to `*z`

find_all([6, 9, 3, 4, 3, 82, 11], 3)
> [2, 4]

findAll([6, 9, 3, 4, 3, 82, 11], 3) => [2, 4]

Kata.FindAll(new int[] {6, 9, 3, 4, 3, 82, 11}, 3) => new int[] {2, 4}

findAll [6, 9, 3, 4, 3, 82, 11]  3 = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]
========================================
URL: https://www.codewars.com/kata/59a9919107157a45220000e1
–ó–∞–¥–∞—á–∞:
Given an array (a list in Python) of integers and an integer n, find all occurrences of n in the given array and return another array containing all the index positions of n in the given array.
If n is not in the given array, return an empty array [].
Assume that n and all values in the given array will always be integers.
Example:
find_all(7, {6, 9, 3, 4, 3, 82, 11}, 3, *z)
// returns pointer to {2, 4}
// assigns array length to `*z`

find_all([6, 9, 3, 4, 3, 82, 11], 3)
> [2, 4]

findAll([6, 9, 3, 4, 3, 82, 11], 3) => [2, 4]

Kata.FindAll(new int[] {6, 9, 3, 4, 3, 82, 11}, 3) => new int[] {2, 4}

findAll [6, 9, 3, 4, 3, 82, 11]  3 = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]

find_all([6, 9, 3, 4, 3, 82, 11], 3) = [2, 4]
========================================
URL: https://www.codewars.com/kata/59a96d71dbe3b06c0200009c
–ó–∞–¥–∞—á–∞:
You will be given the number of angles of a shape with equal sides and angles, and you need to return the number of its sides, and the measure of the interior angles.
Should the number be equal or less than 2, return:
"this will be a line segment or a dot"

Otherwise return the result in the following format:
"This shape has s sides and each angle measures d"

(replace s with number of sides and d with the measure of the interior angles).
Angle measure should be floored to the nearest integer.
Number of sides will be tested from 0 to 180.
Have Fun!
========================================
URL: https://www.codewars.com/kata/59a8570b570190d313000037
–ó–∞–¥–∞—á–∞:
You will be given the number of angles of a shape with equal sides and angles, and you need to return the number of its sides, and the measure of the interior angles.
Should the number be equal or less than 2, return:
"this will be a line segment or a dot"

Otherwise return the result in the following format:
"This shape has s sides and each angle measures d"

(replace s with number of sides and d with the measure of the interior angles).
Angle measure should be floored to the nearest integer.
Number of sides will be tested from 0 to 180.
Have Fun!
========================================
URL: https://www.codewars.com/kata/59a2a3ba5eb5d4e609000055
–ó–∞–¥–∞—á–∞:
You will be given the number of angles of a shape with equal sides and angles, and you need to return the number of its sides, and the measure of the interior angles.
Should the number be equal or less than 2, return:
"this will be a line segment or a dot"

Otherwise return the result in the following format:
"This shape has s sides and each angle measures d"

(replace s with number of sides and d with the measure of the interior angles).
Angle measure should be floored to the nearest integer.
Number of sides will be tested from 0 to 180.
Have Fun!
========================================
URL: https://www.codewars.com/kata/59a1ea8b70e25ef8e3002992
–ó–∞–¥–∞—á–∞:
You will be given the number of angles of a shape with equal sides and angles, and you need to return the number of its sides, and the measure of the interior angles.
Should the number be equal or less than 2, return:
"this will be a line segment or a dot"

Otherwise return the result in the following format:
"This shape has s sides and each angle measures d"

(replace s with number of sides and d with the measure of the interior angles).
Angle measure should be floored to the nearest integer.
Number of sides will be tested from 0 to 180.
Have Fun!
========================================
URL: https://www.codewars.com/kata/59a1ec603203e862bb00004f
–ó–∞–¥–∞—á–∞:
You will be given the number of angles of a shape with equal sides and angles, and you need to return the number of its sides, and the measure of the interior angles.
Should the number be equal or less than 2, return:
"this will be a line segment or a dot"

Otherwise return the result in the following format:
"This shape has s sides and each angle measures d"

(replace s with number of sides and d with the measure of the interior angles).
Angle measure should be floored to the nearest integer.
Number of sides will be tested from 0 to 180.
Have Fun!
========================================
URL: https://www.codewars.com/kata/59a1cdde9f922b83ee00003b
–ó–∞–¥–∞—á–∞:
Your friend asks you to explain the difference between the python string methods, isdecimal(), isdigit(), and isnumeric(). Create two lists to show the difference.
The first list: digits_not_decimals should be 
a list with all the Unicode characters that are digits, but not decimals. 
The second list: numeric_not_digitsshould be
a list with all the Unicode characters that are numeric but not digits.
========================================
URL: https://www.codewars.com/kata/59a151c53f64cdd94c00008f
–ó–∞–¥–∞—á–∞:
Your friend asks you to explain the difference between the python string methods, isdecimal(), isdigit(), and isnumeric(). Create two lists to show the difference.
The first list: digits_not_decimals should be 
a list with all the Unicode characters that are digits, but not decimals. 
The second list: numeric_not_digitsshould be
a list with all the Unicode characters that are numeric but not digits.
========================================
URL: https://www.codewars.com/kata/599db0a227ca9f294b0000c8
–ó–∞–¥–∞—á–∞:
Your friend asks you to explain the difference between the python string methods, isdecimal(), isdigit(), and isnumeric(). Create two lists to show the difference.
The first list: digits_not_decimals should be 
a list with all the Unicode characters that are digits, but not decimals. 
The second list: numeric_not_digitsshould be
a list with all the Unicode characters that are numeric but not digits.
========================================
URL: https://www.codewars.com/kata/599da159a30addffd00000af
–ó–∞–¥–∞—á–∞:
Your friend asks you to explain the difference between the python string methods, isdecimal(), isdigit(), and isnumeric(). Create two lists to show the difference.
The first list: digits_not_decimals should be 
a list with all the Unicode characters that are digits, but not decimals. 
The second list: numeric_not_digitsshould be
a list with all the Unicode characters that are numeric but not digits.
========================================
URL: https://www.codewars.com/kata/599b4e682b862b8498000021
–ó–∞–¥–∞—á–∞:
Your friend asks you to explain the difference between the python string methods, isdecimal(), isdigit(), and isnumeric(). Create two lists to show the difference.
The first list: digits_not_decimals should be 
a list with all the Unicode characters that are digits, but not decimals. 
The second list: numeric_not_digitsshould be
a list with all the Unicode characters that are numeric but not digits.
========================================
URL: https://www.codewars.com/kata/59971206e06bbf4407002382
–ó–∞–¥–∞—á–∞:
Given a string "abc" and assuming that each letter in the string has a value equal to its position in the alphabet, our string will have a value of 1 + 2 + 3 = 6. This means that: a = 1, b = 2, c = 3 ....z = 26.
You will be given a list of strings and your task will be to return the values of the strings as explained above multiplied by the position of that string in the list. For our purpose, position begins with 1.
nameValue ["abc","abc abc"] should return [6,24] because of [ 6 * 1, 12 * 2 ]. Note how spaces are ignored.
"abc" has a value of 6, while "abc abc" has a value of 12. Now, the value at position 1 is multiplied by 1 while the value at position 2 is multiplied by 2.
Input will only contain lowercase characters and spaces.
Good luck!
If you like this Kata, please try:
String matchup
Consonant value
========================================
URL: https://www.codewars.com/kata/598f76a44f613e0e0b000026
–ó–∞–¥–∞—á–∞:
Given a string "abc" and assuming that each letter in the string has a value equal to its position in the alphabet, our string will have a value of 1 + 2 + 3 = 6. This means that: a = 1, b = 2, c = 3 ....z = 26.
You will be given a list of strings and your task will be to return the values of the strings as explained above multiplied by the position of that string in the list. For our purpose, position begins with 1.
nameValue ["abc","abc abc"] should return [6,24] because of [ 6 * 1, 12 * 2 ]. Note how spaces are ignored.
"abc" has a value of 6, while "abc abc" has a value of 12. Now, the value at position 1 is multiplied by 1 while the value at position 2 is multiplied by 2.
Input will only contain lowercase characters and spaces.
Good luck!
If you like this Kata, please try:
String matchup
Consonant value
========================================
URL: https://www.codewars.com/kata/59952e17f902df0e5f000078
–ó–∞–¥–∞—á–∞:
Given a string "abc" and assuming that each letter in the string has a value equal to its position in the alphabet, our string will have a value of 1 + 2 + 3 = 6. This means that: a = 1, b = 2, c = 3 ....z = 26.
You will be given a list of strings and your task will be to return the values of the strings as explained above multiplied by the position of that string in the list. For our purpose, position begins with 1.
nameValue ["abc","abc abc"] should return [6,24] because of [ 6 * 1, 12 * 2 ]. Note how spaces are ignored.
"abc" has a value of 6, while "abc abc" has a value of 12. Now, the value at position 1 is multiplied by 1 while the value at position 2 is multiplied by 2.
Input will only contain lowercase characters and spaces.
Good luck!
If you like this Kata, please try:
String matchup
Consonant value
========================================
URL: https://www.codewars.com/kata/5993fb6c4f5d9f770c0000f2
–ó–∞–¥–∞—á–∞:
Given a string "abc" and assuming that each letter in the string has a value equal to its position in the alphabet, our string will have a value of 1 + 2 + 3 = 6. This means that: a = 1, b = 2, c = 3 ....z = 26.
You will be given a list of strings and your task will be to return the values of the strings as explained above multiplied by the position of that string in the list. For our purpose, position begins with 1.
nameValue ["abc","abc abc"] should return [6,24] because of [ 6 * 1, 12 * 2 ]. Note how spaces are ignored.
"abc" has a value of 6, while "abc abc" has a value of 12. Now, the value at position 1 is multiplied by 1 while the value at position 2 is multiplied by 2.
Input will only contain lowercase characters and spaces.
Good luck!
If you like this Kata, please try:
String matchup
Consonant value
========================================
URL: https://www.codewars.com/kata/598d91785d4ce3ec4f000018
–ó–∞–¥–∞—á–∞:
Given a string "abc" and assuming that each letter in the string has a value equal to its position in the alphabet, our string will have a value of 1 + 2 + 3 = 6. This means that: a = 1, b = 2, c = 3 ....z = 26.
You will be given a list of strings and your task will be to return the values of the strings as explained above multiplied by the position of that string in the list. For our purpose, position begins with 1.
nameValue ["abc","abc abc"] should return [6,24] because of [ 6 * 1, 12 * 2 ]. Note how spaces are ignored.
"abc" has a value of 6, while "abc abc" has a value of 12. Now, the value at position 1 is multiplied by 1 while the value at position 2 is multiplied by 2.
Input will only contain lowercase characters and spaces.
Good luck!
If you like this Kata, please try:
String matchup
Consonant value
========================================
URL: https://www.codewars.com/kata/598a1fc1676fdd837f000e56
–ó–∞–¥–∞—á–∞:
It is necessary to define who of two players will win the game in the ideal moves of each.
‚ÄÇThe NxM board is given, the players' figures are on opposite sides of the board.
4x7
|X.....Y|
|X.....Y|
|X.....Y|
|X.....Y|

‚ÄÇIn his turn, the player must move one of his figures forward horizontally to any number of cells, but not further than the enemy figure on this line.
|X......Y..|  =>  |.X.....Y..| or |..X....Y..| or ... or |......XY..|

‚ÄÇA player who can't make a move loses.
Example 3—Ö6 game (not ideal):
      |X....Y|
      |X....Y|
      |X....Y|
      --------
|...X.Y|    |...X.Y|
|X....Y|    |X....Y|
|X....Y|    |XY....|
--------    --------
|...X.Y|    |...X.Y|
|..X..Y|    |..X.Y.|
|XY....|    |XY....|
--------    --------
|....XY|    |....XY|
|..X.Y.|    |..XY..|
|XY....|    |XY....|

‚ÄÇPlayer X can't make a turn => player Y is winner.
@param {n,m} n>=1 m>=2
@return {player} 'first' or 'second'

Examples:
(3,7)   =>  'first'
(6,12)  =>  'second'
(2,4)   =>  'second'
========================================
URL: https://www.codewars.com/kata/59859f435f5d18ede7000050
–ó–∞–¥–∞—á–∞:
It is necessary to define who of two players will win the game in the ideal moves of each.
‚ÄÇThe NxM board is given, the players' figures are on opposite sides of the board.
4x7
|X.....Y|
|X.....Y|
|X.....Y|
|X.....Y|

‚ÄÇIn his turn, the player must move one of his figures forward horizontally to any number of cells, but not further than the enemy figure on this line.
|X......Y..|  =>  |.X.....Y..| or |..X....Y..| or ... or |......XY..|

‚ÄÇA player who can't make a move loses.
Example 3—Ö6 game (not ideal):
      |X....Y|
      |X....Y|
      |X....Y|
      --------
|...X.Y|    |...X.Y|
|X....Y|    |X....Y|
|X....Y|    |XY....|
--------    --------
|...X.Y|    |...X.Y|
|..X..Y|    |..X.Y.|
|XY....|    |XY....|
--------    --------
|....XY|    |....XY|
|..X.Y.|    |..XY..|
|XY....|    |XY....|

‚ÄÇPlayer X can't make a turn => player Y is winner.
@param {n,m} n>=1 m>=2
@return {player} 'first' or 'second'

Examples:
(3,7)   =>  'first'
(6,12)  =>  'second'
(2,4)   =>  'second'
========================================
URL: https://www.codewars.com/kata/5983cba828b2f1fd55000114
–ó–∞–¥–∞—á–∞:
It is necessary to define who of two players will win the game in the ideal moves of each.
‚ÄÇThe NxM board is given, the players' figures are on opposite sides of the board.
4x7
|X.....Y|
|X.....Y|
|X.....Y|
|X.....Y|

‚ÄÇIn his turn, the player must move one of his figures forward horizontally to any number of cells, but not further than the enemy figure on this line.
|X......Y..|  =>  |.X.....Y..| or |..X....Y..| or ... or |......XY..|

‚ÄÇA player who can't make a move loses.
Example 3—Ö6 game (not ideal):
      |X....Y|
      |X....Y|
      |X....Y|
      --------
|...X.Y|    |...X.Y|
|X....Y|    |X....Y|
|X....Y|    |XY....|
--------    --------
|...X.Y|    |...X.Y|
|..X..Y|    |..X.Y.|
|XY....|    |XY....|
--------    --------
|....XY|    |....XY|
|..X.Y.|    |..XY..|
|XY....|    |XY....|

‚ÄÇPlayer X can't make a turn => player Y is winner.
@param {n,m} n>=1 m>=2
@return {player} 'first' or 'second'

Examples:
(3,7)   =>  'first'
(6,12)  =>  'second'
(2,4)   =>  'second'
========================================
URL: https://www.codewars.com/kata/59887207635904314100007b
–ó–∞–¥–∞—á–∞:
It is necessary to define who of two players will win the game in the ideal moves of each.
‚ÄÇThe NxM board is given, the players' figures are on opposite sides of the board.
4x7
|X.....Y|
|X.....Y|
|X.....Y|
|X.....Y|

‚ÄÇIn his turn, the player must move one of his figures forward horizontally to any number of cells, but not further than the enemy figure on this line.
|X......Y..|  =>  |.X.....Y..| or |..X....Y..| or ... or |......XY..|

‚ÄÇA player who can't make a move loses.
Example 3—Ö6 game (not ideal):
      |X....Y|
      |X....Y|
      |X....Y|
      --------
|...X.Y|    |...X.Y|
|X....Y|    |X....Y|
|X....Y|    |XY....|
--------    --------
|...X.Y|    |...X.Y|
|..X..Y|    |..X.Y.|
|XY....|    |XY....|
--------    --------
|....XY|    |....XY|
|..X.Y.|    |..XY..|
|XY....|    |XY....|

‚ÄÇPlayer X can't make a turn => player Y is winner.
@param {n,m} n>=1 m>=2
@return {player} 'first' or 'second'

Examples:
(3,7)   =>  'first'
(6,12)  =>  'second'
(2,4)   =>  'second'
========================================
URL: https://www.codewars.com/kata/59831e3575ca6c8aea00003a
–ó–∞–¥–∞—á–∞:
It is necessary to define who of two players will win the game in the ideal moves of each.
‚ÄÇThe NxM board is given, the players' figures are on opposite sides of the board.
4x7
|X.....Y|
|X.....Y|
|X.....Y|
|X.....Y|

‚ÄÇIn his turn, the player must move one of his figures forward horizontally to any number of cells, but not further than the enemy figure on this line.
|X......Y..|  =>  |.X.....Y..| or |..X....Y..| or ... or |......XY..|

‚ÄÇA player who can't make a move loses.
Example 3—Ö6 game (not ideal):
      |X....Y|
      |X....Y|
      |X....Y|
      --------
|...X.Y|    |...X.Y|
|X....Y|    |X....Y|
|X....Y|    |XY....|
--------    --------
|...X.Y|    |...X.Y|
|..X..Y|    |..X.Y.|
|XY....|    |XY....|
--------    --------
|....XY|    |....XY|
|..X.Y.|    |..XY..|
|XY....|    |XY....|

‚ÄÇPlayer X can't make a turn => player Y is winner.
@param {n,m} n>=1 m>=2
@return {player} 'first' or 'second'

Examples:
(3,7)   =>  'first'
(6,12)  =>  'second'
(2,4)   =>  'second'
========================================
URL: https://www.codewars.com/kata/5982619d2671576e90000017
–ó–∞–¥–∞—á–∞:
The code provided is supposed return a person's Full Name given their first and last names.
But it's not working properly.
Notes
The first and/or last names are never null, but may be empty.
Task
Fix the bug so we can all go home early.
========================================
URL: https://www.codewars.com/kata/59824f384df1741e05000913
–ó–∞–¥–∞—á–∞:
The code provided is supposed return a person's Full Name given their first and last names.
But it's not working properly.
Notes
The first and/or last names are never null, but may be empty.
Task
Fix the bug so we can all go home early.
========================================
URL: https://www.codewars.com/kata/5981a139f5471fd1b2000071
–ó–∞–¥–∞—á–∞:
The code provided is supposed return a person's Full Name given their first and last names.
But it's not working properly.
Notes
The first and/or last names are never null, but may be empty.
Task
Fix the bug so we can all go home early.
========================================
URL: https://www.codewars.com/kata/597d75744f4190857a00008d
–ó–∞–¥–∞—á–∞:
The code provided is supposed return a person's Full Name given their first and last names.
But it's not working properly.
Notes
The first and/or last names are never null, but may be empty.
Task
Fix the bug so we can all go home early.
========================================
URL: https://www.codewars.com/kata/597c684822bc9388f600010f
–ó–∞–¥–∞—á–∞:
The code provided is supposed return a person's Full Name given their first and last names.
But it's not working properly.
Notes
The first and/or last names are never null, but may be empty.
Task
Fix the bug so we can all go home early.
========================================
URL: https://www.codewars.com/kata/597bb84522bc93b71e00007e
–ó–∞–¥–∞—á–∞:
My friend wants a new band name for her band. She like bands that use the formula: "The" + a noun with the first letter capitalized, for example:
"dolphin" -> "The Dolphin"
However, when a noun STARTS and ENDS with the same letter, she likes to repeat the noun twice and connect them together with the first and last letter, combined into one word (WITHOUT "The" in front), like this:
"alaska" -> "Alaskalaska"
Complete the function that takes a noun as a string, and returns her preferred band name written as a string.
========================================
URL: https://www.codewars.com/kata/59778cb1b061e877c50000cc
–ó–∞–¥–∞—á–∞:
My friend wants a new band name for her band. She like bands that use the formula: "The" + a noun with the first letter capitalized, for example:
"dolphin" -> "The Dolphin"
However, when a noun STARTS and ENDS with the same letter, she likes to repeat the noun twice and connect them together with the first and last letter, combined into one word (WITHOUT "The" in front), like this:
"alaska" -> "Alaskalaska"
Complete the function that takes a noun as a string, and returns her preferred band name written as a string.
========================================
URL: https://www.codewars.com/kata/597ab747d1ba5b843f0000ca
–ó–∞–¥–∞—á–∞:
My friend wants a new band name for her band. She like bands that use the formula: "The" + a noun with the first letter capitalized, for example:
"dolphin" -> "The Dolphin"
However, when a noun STARTS and ENDS with the same letter, she likes to repeat the noun twice and connect them together with the first and last letter, combined into one word (WITHOUT "The" in front), like this:
"alaska" -> "Alaskalaska"
Complete the function that takes a noun as a string, and returns her preferred band name written as a string.
========================================
URL: https://www.codewars.com/kata/59759761e30a19cfe1000024
–ó–∞–¥–∞—á–∞:
My friend wants a new band name for her band. She like bands that use the formula: "The" + a noun with the first letter capitalized, for example:
"dolphin" -> "The Dolphin"
However, when a noun STARTS and ENDS with the same letter, she likes to repeat the noun twice and connect them together with the first and last letter, combined into one word (WITHOUT "The" in front), like this:
"alaska" -> "Alaskalaska"
Complete the function that takes a noun as a string, and returns her preferred band name written as a string.
========================================
URL: https://www.codewars.com/kata/59727ff285281a44e3000011
–ó–∞–¥–∞—á–∞:
My friend wants a new band name for her band. She like bands that use the formula: "The" + a noun with the first letter capitalized, for example:
"dolphin" -> "The Dolphin"
However, when a noun STARTS and ENDS with the same letter, she likes to repeat the noun twice and connect them together with the first and last letter, combined into one word (WITHOUT "The" in front), like this:
"alaska" -> "Alaskalaska"
Complete the function that takes a noun as a string, and returns her preferred band name written as a string.
========================================
URL: https://www.codewars.com/kata/5970915e54c27bd71000007b
–ó–∞–¥–∞—á–∞:
Implement a function which takes a string, and returns its hash value.
Algorithm steps:

a := sum of the ascii values of the input characters
b := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)
c := (a OR b) AND ((NOT a) shift left by 2 bits)
d := c XOR (32 * (total_number_of_spaces + 1))
return d

Note: OR, AND, NOT, XOR are bitwise operations.

Examples
input = "a"
a = 97
b = 0
result = 64

input = "ca"
a = 196
b = -2
result = -820


Give an example why this hashing algorithm is bad?
========================================
URL: https://www.codewars.com/kata/59706036f6e5d1e22d000016
–ó–∞–¥–∞—á–∞:
Implement a function which takes a string, and returns its hash value.
Algorithm steps:

a := sum of the ascii values of the input characters
b := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)
c := (a OR b) AND ((NOT a) shift left by 2 bits)
d := c XOR (32 * (total_number_of_spaces + 1))
return d

Note: OR, AND, NOT, XOR are bitwise operations.

Examples
input = "a"
a = 97
b = 0
result = 64

input = "ca"
a = 196
b = -2
result = -820


Give an example why this hashing algorithm is bad?
========================================
URL: https://www.codewars.com/kata/596d93bd9b6a5df4de000049
–ó–∞–¥–∞—á–∞:
Implement a function which takes a string, and returns its hash value.
Algorithm steps:

a := sum of the ascii values of the input characters
b := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)
c := (a OR b) AND ((NOT a) shift left by 2 bits)
d := c XOR (32 * (total_number_of_spaces + 1))
return d

Note: OR, AND, NOT, XOR are bitwise operations.

Examples
input = "a"
a = 97
b = 0
result = 64

input = "ca"
a = 196
b = -2
result = -820


Give an example why this hashing algorithm is bad?
========================================
URL: https://www.codewars.com/kata/596f6385e7cd727fff0000d6
–ó–∞–¥–∞—á–∞:
Implement a function which takes a string, and returns its hash value.
Algorithm steps:

a := sum of the ascii values of the input characters
b := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)
c := (a OR b) AND ((NOT a) shift left by 2 bits)
d := c XOR (32 * (total_number_of_spaces + 1))
return d

Note: OR, AND, NOT, XOR are bitwise operations.

Examples
input = "a"
a = 97
b = 0
result = 64

input = "ca"
a = 196
b = -2
result = -820


Give an example why this hashing algorithm is bad?
========================================
URL: https://www.codewars.com/kata/596ddaccdd42c1cf0e00005c
–ó–∞–¥–∞—á–∞:
Implement a function which takes a string, and returns its hash value.
Algorithm steps:

a := sum of the ascii values of the input characters
b := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)
c := (a OR b) AND ((NOT a) shift left by 2 bits)
d := c XOR (32 * (total_number_of_spaces + 1))
return d

Note: OR, AND, NOT, XOR are bitwise operations.

Examples
input = "a"
a = 97
b = 0
result = 64

input = "ca"
a = 196
b = -2
result = -820


Give an example why this hashing algorithm is bad?
========================================
URL: https://www.codewars.com/kata/596b8a3fc4cb1de46b000001
–ó–∞–¥–∞—á–∞:
Description:At 'We Rate Dogs', we try our best to give dogs accurate ratings, which will always be above 10/10. Because they're good dogs. Over the weekend Bront has come in and hacked our system, lowering the ratings of dogs to below 10/10. 
Please help to fix Brant's bad system and give the dogs their original ratings. They're good dogs Brent.
Task:The function weRateDogs(str, rating) takes a string and an integer as the inputs. Within the string is an incorrect rating x/y. 
You will need to change the incorrect rating x/y to the correct rating rating/10. The given string may contain numbers and letters, but no special characters other than /. 
For example:if you are given the following string:'This is Max99. She has one ear that is always s1ightly higher than the other 4/10 wonky af'And the following rating: 11
return: 'This is Max99. She has one ear that is always s1ightly heigher than the other 11/10 wonky af'
========================================
URL: https://www.codewars.com/kata/5966f6343c0702d1dc00004c
–ó–∞–¥–∞—á–∞:
Description:At 'We Rate Dogs', we try our best to give dogs accurate ratings, which will always be above 10/10. Because they're good dogs. Over the weekend Bront has come in and hacked our system, lowering the ratings of dogs to below 10/10. 
Please help to fix Brant's bad system and give the dogs their original ratings. They're good dogs Brent.
Task:The function weRateDogs(str, rating) takes a string and an integer as the inputs. Within the string is an incorrect rating x/y. 
You will need to change the incorrect rating x/y to the correct rating rating/10. The given string may contain numbers and letters, but no special characters other than /. 
For example:if you are given the following string:'This is Max99. She has one ear that is always s1ightly higher than the other 4/10 wonky af'And the following rating: 11
return: 'This is Max99. She has one ear that is always s1ightly heigher than the other 11/10 wonky af'
========================================
URL: https://www.codewars.com/kata/5966eeb31b229e44eb00007a
–ó–∞–¥–∞—á–∞:
Description:At 'We Rate Dogs', we try our best to give dogs accurate ratings, which will always be above 10/10. Because they're good dogs. Over the weekend Bront has come in and hacked our system, lowering the ratings of dogs to below 10/10. 
Please help to fix Brant's bad system and give the dogs their original ratings. They're good dogs Brent.
Task:The function weRateDogs(str, rating) takes a string and an integer as the inputs. Within the string is an incorrect rating x/y. 
You will need to change the incorrect rating x/y to the correct rating rating/10. The given string may contain numbers and letters, but no special characters other than /. 
For example:if you are given the following string:'This is Max99. She has one ear that is always s1ightly higher than the other 4/10 wonky af'And the following rating: 11
return: 'This is Max99. She has one ear that is always s1ightly heigher than the other 11/10 wonky af'
========================================
URL: https://www.codewars.com/kata/596776fbb4f24d0d82000141
–ó–∞–¥–∞—á–∞:
Description:At 'We Rate Dogs', we try our best to give dogs accurate ratings, which will always be above 10/10. Because they're good dogs. Over the weekend Bront has come in and hacked our system, lowering the ratings of dogs to below 10/10. 
Please help to fix Brant's bad system and give the dogs their original ratings. They're good dogs Brent.
Task:The function weRateDogs(str, rating) takes a string and an integer as the inputs. Within the string is an incorrect rating x/y. 
You will need to change the incorrect rating x/y to the correct rating rating/10. The given string may contain numbers and letters, but no special characters other than /. 
For example:if you are given the following string:'This is Max99. She has one ear that is always s1ightly higher than the other 4/10 wonky af'And the following rating: 11
return: 'This is Max99. She has one ear that is always s1ightly heigher than the other 11/10 wonky af'
========================================
URL: https://www.codewars.com/kata/5965144da82d479517000001
–ó–∞–¥–∞—á–∞:
Description:At 'We Rate Dogs', we try our best to give dogs accurate ratings, which will always be above 10/10. Because they're good dogs. Over the weekend Bront has come in and hacked our system, lowering the ratings of dogs to below 10/10. 
Please help to fix Brant's bad system and give the dogs their original ratings. They're good dogs Brent.
Task:The function weRateDogs(str, rating) takes a string and an integer as the inputs. Within the string is an incorrect rating x/y. 
You will need to change the incorrect rating x/y to the correct rating rating/10. The given string may contain numbers and letters, but no special characters other than /. 
For example:if you are given the following string:'This is Max99. She has one ear that is always s1ightly higher than the other 4/10 wonky af'And the following rating: 11
return: 'This is Max99. She has one ear that is always s1ightly heigher than the other 11/10 wonky af'
========================================
URL: https://www.codewars.com/kata/596343a24489a8b2a00000a2
–ó–∞–¥–∞—á–∞:
Groups of characters decided to make a battle. Help them to figure out what group is more powerful. Create a function that will accept 2 variables and return the one who's stronger.
Rules

Each character has its own power:  A = 1, B = 2, ... Y = 25, Z = 26
  a = 0.5, b = 1, ... y = 12.5, z = 13


Only alphabetical characters can and will participate in a battle.
Only two groups to a fight.
Group whose total power (a + B + c + ...) is bigger wins.
If the powers are equal, it's a tie.

Examples
"One", "Two"  -->  "Two"
"ONE", "NEO"  -->  "Tie!"

Related kata

Battle of the characters (Easy)
========================================
URL: https://www.codewars.com/kata/5962ddfc2f9addd52200001d
–ó–∞–¥–∞—á–∞:
Groups of characters decided to make a battle. Help them to figure out what group is more powerful. Create a function that will accept 2 variables and return the one who's stronger.
Rules

Each character has its own power:  A = 1, B = 2, ... Y = 25, Z = 26
  a = 0.5, b = 1, ... y = 12.5, z = 13


Only alphabetical characters can and will participate in a battle.
Only two groups to a fight.
Group whose total power (a + B + c + ...) is bigger wins.
If the powers are equal, it's a tie.

Examples
"One", "Two"  -->  "Two"
"ONE", "NEO"  -->  "Tie!"

Related kata

Battle of the characters (Easy)
========================================
URL: https://www.codewars.com/kata/595f4df2e8f12961ab00007f
–ó–∞–¥–∞—á–∞:
Groups of characters decided to make a battle. Help them to figure out what group is more powerful. Create a function that will accept 2 variables and return the one who's stronger.
Rules

Each character has its own power:  A = 1, B = 2, ... Y = 25, Z = 26
  a = 0.5, b = 1, ... y = 12.5, z = 13


Only alphabetical characters can and will participate in a battle.
Only two groups to a fight.
Group whose total power (a + B + c + ...) is bigger wins.
If the powers are equal, it's a tie.

Examples
"One", "Two"  -->  "Two"
"ONE", "NEO"  -->  "Tie!"

Related kata

Battle of the characters (Easy)
========================================
URL: https://www.codewars.com/kata/59619e4609868dd923000041
–ó–∞–¥–∞—á–∞:
Groups of characters decided to make a battle. Help them to figure out what group is more powerful. Create a function that will accept 2 variables and return the one who's stronger.
Rules

Each character has its own power:  A = 1, B = 2, ... Y = 25, Z = 26
  a = 0.5, b = 1, ... y = 12.5, z = 13


Only alphabetical characters can and will participate in a battle.
Only two groups to a fight.
Group whose total power (a + B + c + ...) is bigger wins.
If the powers are equal, it's a tie.

Examples
"One", "Two"  -->  "Two"
"ONE", "NEO"  -->  "Tie!"

Related kata

Battle of the characters (Easy)
========================================
URL: https://www.codewars.com/kata/595e9f258b763bc2d2000032
–ó–∞–¥–∞—á–∞:
Groups of characters decided to make a battle. Help them to figure out what group is more powerful. Create a function that will accept 2 variables and return the one who's stronger.
Rules

Each character has its own power:  A = 1, B = 2, ... Y = 25, Z = 26
  a = 0.5, b = 1, ... y = 12.5, z = 13


Only alphabetical characters can and will participate in a battle.
Only two groups to a fight.
Group whose total power (a + B + c + ...) is bigger wins.
If the powers are equal, it's a tie.

Examples
"One", "Two"  -->  "Two"
"ONE", "NEO"  -->  "Tie!"

Related kata

Battle of the characters (Easy)
========================================
URL: https://www.codewars.com/kata/595d54bddddd7cf91800008c
–ó–∞–¥–∞—á–∞:
At the end of the last semester, Prof. Joey Greenhorn implemented an online report card for his students in order to save paper. Everything seemed to be working fine back then, but since the start of the new semester he has received several emails from students complaining about erroneous grades showing up in their online report cards. Can you help him correct his implementation of the "Student" class?
The "Student" class should behave like this :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98] # Evaluates to True
someOtherStudent.grades == [77] # Evaluates to True

But right now, this is happening :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98, 77] # Evaluates to True
someOtherStudent.grades == [98, 77] # Evaluates to True
========================================
URL: https://www.codewars.com/kata/595aa94353e43a8746000120
–ó–∞–¥–∞—á–∞:
At the end of the last semester, Prof. Joey Greenhorn implemented an online report card for his students in order to save paper. Everything seemed to be working fine back then, but since the start of the new semester he has received several emails from students complaining about erroneous grades showing up in their online report cards. Can you help him correct his implementation of the "Student" class?
The "Student" class should behave like this :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98] # Evaluates to True
someOtherStudent.grades == [77] # Evaluates to True

But right now, this is happening :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98, 77] # Evaluates to True
someOtherStudent.grades == [98, 77] # Evaluates to True
========================================
URL: https://www.codewars.com/kata/5959ec605595565f5c00002b
–ó–∞–¥–∞—á–∞:
At the end of the last semester, Prof. Joey Greenhorn implemented an online report card for his students in order to save paper. Everything seemed to be working fine back then, but since the start of the new semester he has received several emails from students complaining about erroneous grades showing up in their online report cards. Can you help him correct his implementation of the "Student" class?
The "Student" class should behave like this :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98] # Evaluates to True
someOtherStudent.grades == [77] # Evaluates to True

But right now, this is happening :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98, 77] # Evaluates to True
someOtherStudent.grades == [98, 77] # Evaluates to True
========================================
URL: https://www.codewars.com/kata/5956d127a817c7c51b000026
–ó–∞–¥–∞—á–∞:
At the end of the last semester, Prof. Joey Greenhorn implemented an online report card for his students in order to save paper. Everything seemed to be working fine back then, but since the start of the new semester he has received several emails from students complaining about erroneous grades showing up in their online report cards. Can you help him correct his implementation of the "Student" class?
The "Student" class should behave like this :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98] # Evaluates to True
someOtherStudent.grades == [77] # Evaluates to True

But right now, this is happening :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98, 77] # Evaluates to True
someOtherStudent.grades == [98, 77] # Evaluates to True
========================================
URL: https://www.codewars.com/kata/595877be60d17855980013d3
–ó–∞–¥–∞—á–∞:
At the end of the last semester, Prof. Joey Greenhorn implemented an online report card for his students in order to save paper. Everything seemed to be working fine back then, but since the start of the new semester he has received several emails from students complaining about erroneous grades showing up in their online report cards. Can you help him correct his implementation of the "Student" class?
The "Student" class should behave like this :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98] # Evaluates to True
someOtherStudent.grades == [77] # Evaluates to True

But right now, this is happening :
someStudent = Student()
someOtherStudent = Student()
someStudent.add_grade(98)
someOtherStudent.add_grade(77)
someStudent.grades == [98, 77] # Evaluates to True
someOtherStudent.grades == [98, 77] # Evaluates to True
========================================
URL: https://www.codewars.com/kata/59564f3bcc15b5591a00004a
–ó–∞–¥–∞—á–∞:
Task
In the field, two beggars A and B found some gold at the same time. They all wanted the gold, and they decided to use simple rules to distribute gold:
They divided gold into n piles and be in line. 
The amount of each pile and the order of piles all are randomly.

They took turns to take away a pile of gold from the 
far left or the far right.

They always choose the bigger pile. That is to say, 
if the left is 1, the right is 2, then choose to take 2.

If the both sides are equal, take the left pile.

Given an integer array golds, and assume that A always takes first. Please calculate the final amount of gold obtained by A and B. returns a two-element array [amount of A, amount of B].
Example
For golds = [4,2,9,5,2,7], the output should be [14,15].
The pile of most left is 4, 
The pile of most right is 7, 
A choose the largest one -- > take 7

The pile of most left is 4, 
The pile of most right is 2, 
B choose the largest one -- > take 4

The pile of most left is 2, 
The pile of most left is 2, 
A choose the most left one -- > take 2

The pile of most left is 9, 
The pile of most right is 2, 
B choose the largest one -- > take 9

The pile of most left is 5, 
The pile of most left is 2, 
A choose the largest one -- > take 5

Tehn, only 1 pile left, 
B  -- > take 2

A: 7 + 2 + 5 = 14
B: 4 + 9 + 2 = 15

For golds = [10,1000,2,1], the output should be [12,1001].
A take 10
B take 1000
A take 2
B take 1

A: 10 + 2 = 12
B: 1000 + 1 = 1001
========================================
URL: https://www.codewars.com/kata/59564a286e595346de000079
–ó–∞–¥–∞—á–∞:
Task
In the field, two beggars A and B found some gold at the same time. They all wanted the gold, and they decided to use simple rules to distribute gold:
They divided gold into n piles and be in line. 
The amount of each pile and the order of piles all are randomly.

They took turns to take away a pile of gold from the 
far left or the far right.

They always choose the bigger pile. That is to say, 
if the left is 1, the right is 2, then choose to take 2.

If the both sides are equal, take the left pile.

Given an integer array golds, and assume that A always takes first. Please calculate the final amount of gold obtained by A and B. returns a two-element array [amount of A, amount of B].
Example
For golds = [4,2,9,5,2,7], the output should be [14,15].
The pile of most left is 4, 
The pile of most right is 7, 
A choose the largest one -- > take 7

The pile of most left is 4, 
The pile of most right is 2, 
B choose the largest one -- > take 4

The pile of most left is 2, 
The pile of most left is 2, 
A choose the most left one -- > take 2

The pile of most left is 9, 
The pile of most right is 2, 
B choose the largest one -- > take 9

The pile of most left is 5, 
The pile of most left is 2, 
A choose the largest one -- > take 5

Tehn, only 1 pile left, 
B  -- > take 2

A: 7 + 2 + 5 = 14
B: 4 + 9 + 2 = 15

For golds = [10,1000,2,1], the output should be [12,1001].
A take 10
B take 1000
A take 2
B take 1

A: 10 + 2 = 12
B: 1000 + 1 = 1001
========================================
URL: https://www.codewars.com/kata/59557b2a6e595316ab000046
–ó–∞–¥–∞—á–∞:
Task
In the field, two beggars A and B found some gold at the same time. They all wanted the gold, and they decided to use simple rules to distribute gold:
They divided gold into n piles and be in line. 
The amount of each pile and the order of piles all are randomly.

They took turns to take away a pile of gold from the 
far left or the far right.

They always choose the bigger pile. That is to say, 
if the left is 1, the right is 2, then choose to take 2.

If the both sides are equal, take the left pile.

Given an integer array golds, and assume that A always takes first. Please calculate the final amount of gold obtained by A and B. returns a two-element array [amount of A, amount of B].
Example
For golds = [4,2,9,5,2,7], the output should be [14,15].
The pile of most left is 4, 
The pile of most right is 7, 
A choose the largest one -- > take 7

The pile of most left is 4, 
The pile of most right is 2, 
B choose the largest one -- > take 4

The pile of most left is 2, 
The pile of most left is 2, 
A choose the most left one -- > take 2

The pile of most left is 9, 
The pile of most right is 2, 
B choose the largest one -- > take 9

The pile of most left is 5, 
The pile of most left is 2, 
A choose the largest one -- > take 5

Tehn, only 1 pile left, 
B  -- > take 2

A: 7 + 2 + 5 = 14
B: 4 + 9 + 2 = 15

For golds = [10,1000,2,1], the output should be [12,1001].
A take 10
B take 1000
A take 2
B take 1

A: 10 + 2 = 12
B: 1000 + 1 = 1001
========================================
URL: https://www.codewars.com/kata/59547688d8e005759e000092
–ó–∞–¥–∞—á–∞:
Task
In the field, two beggars A and B found some gold at the same time. They all wanted the gold, and they decided to use simple rules to distribute gold:
They divided gold into n piles and be in line. 
The amount of each pile and the order of piles all are randomly.

They took turns to take away a pile of gold from the 
far left or the far right.

They always choose the bigger pile. That is to say, 
if the left is 1, the right is 2, then choose to take 2.

If the both sides are equal, take the left pile.

Given an integer array golds, and assume that A always takes first. Please calculate the final amount of gold obtained by A and B. returns a two-element array [amount of A, amount of B].
Example
For golds = [4,2,9,5,2,7], the output should be [14,15].
The pile of most left is 4, 
The pile of most right is 7, 
A choose the largest one -- > take 7

The pile of most left is 4, 
The pile of most right is 2, 
B choose the largest one -- > take 4

The pile of most left is 2, 
The pile of most left is 2, 
A choose the most left one -- > take 2

The pile of most left is 9, 
The pile of most right is 2, 
B choose the largest one -- > take 9

The pile of most left is 5, 
The pile of most left is 2, 
A choose the largest one -- > take 5

Tehn, only 1 pile left, 
B  -- > take 2

A: 7 + 2 + 5 = 14
B: 4 + 9 + 2 = 15

For golds = [10,1000,2,1], the output should be [12,1001].
A take 10
B take 1000
A take 2
B take 1

A: 10 + 2 = 12
B: 1000 + 1 = 1001
========================================
URL: https://www.codewars.com/kata/595519279be6c575b5000016
–ó–∞–¥–∞—á–∞:
Task
In the field, two beggars A and B found some gold at the same time. They all wanted the gold, and they decided to use simple rules to distribute gold:
They divided gold into n piles and be in line. 
The amount of each pile and the order of piles all are randomly.

They took turns to take away a pile of gold from the 
far left or the far right.

They always choose the bigger pile. That is to say, 
if the left is 1, the right is 2, then choose to take 2.

If the both sides are equal, take the left pile.

Given an integer array golds, and assume that A always takes first. Please calculate the final amount of gold obtained by A and B. returns a two-element array [amount of A, amount of B].
Example
For golds = [4,2,9,5,2,7], the output should be [14,15].
The pile of most left is 4, 
The pile of most right is 7, 
A choose the largest one -- > take 7

The pile of most left is 4, 
The pile of most right is 2, 
B choose the largest one -- > take 4

The pile of most left is 2, 
The pile of most left is 2, 
A choose the most left one -- > take 2

The pile of most left is 9, 
The pile of most right is 2, 
B choose the largest one -- > take 9

The pile of most left is 5, 
The pile of most left is 2, 
A choose the largest one -- > take 5

Tehn, only 1 pile left, 
B  -- > take 2

A: 7 + 2 + 5 = 14
B: 4 + 9 + 2 = 15

For golds = [10,1000,2,1], the output should be [12,1001].
A take 10
B take 1000
A take 2
B take 1

A: 10 + 2 = 12
B: 1000 + 1 = 1001
========================================
URL: https://www.codewars.com/kata/595249fc10b69f4f7a000003
–ó–∞–¥–∞—á–∞:
A byte is a sequence of 8 bits. One could imagine implementing a small set data structure using a single byte. The set would hold at most the elements 0 through 7. The value of each bit in the byte would indicate whether the index of that bit was included in the set.
Consider the following byte, where the index of each bit is marked below.
Byte:  0 1 1 0 0 1 0 1
Index: 0 1 2 3 4 5 6 7
This byte would represent the set {1, 2, 5, 7}. Similarly,
10101010 ==> {0, 2, 4, 6}
11100000 ==> {0, 1, 2}
Your task is to write a function byte_to_set which takes a single byte (an integer 0-255), and returns the corresponding set.
>> byte_to_set(0)
set()

>> byte_to_set(255)
{0,1,2,3,4,5,6,7}

>> byte_to_set(3)
{6,7}
========================================
URL: https://www.codewars.com/kata/5950a4bfc6bf4f433f000031
–ó–∞–¥–∞—á–∞:
A byte is a sequence of 8 bits. One could imagine implementing a small set data structure using a single byte. The set would hold at most the elements 0 through 7. The value of each bit in the byte would indicate whether the index of that bit was included in the set.
Consider the following byte, where the index of each bit is marked below.
Byte:  0 1 1 0 0 1 0 1
Index: 0 1 2 3 4 5 6 7
This byte would represent the set {1, 2, 5, 7}. Similarly,
10101010 ==> {0, 2, 4, 6}
11100000 ==> {0, 1, 2}
Your task is to write a function byte_to_set which takes a single byte (an integer 0-255), and returns the corresponding set.
>> byte_to_set(0)
set()

>> byte_to_set(255)
{0,1,2,3,4,5,6,7}

>> byte_to_set(3)
{6,7}
========================================
URL: https://www.codewars.com/kata/5951b409aea9beff3f0000c6
–ó–∞–¥–∞—á–∞:
A byte is a sequence of 8 bits. One could imagine implementing a small set data structure using a single byte. The set would hold at most the elements 0 through 7. The value of each bit in the byte would indicate whether the index of that bit was included in the set.
Consider the following byte, where the index of each bit is marked below.
Byte:  0 1 1 0 0 1 0 1
Index: 0 1 2 3 4 5 6 7
This byte would represent the set {1, 2, 5, 7}. Similarly,
10101010 ==> {0, 2, 4, 6}
11100000 ==> {0, 1, 2}
Your task is to write a function byte_to_set which takes a single byte (an integer 0-255), and returns the corresponding set.
>> byte_to_set(0)
set()

>> byte_to_set(255)
{0,1,2,3,4,5,6,7}

>> byte_to_set(3)
{6,7}
========================================
URL: https://www.codewars.com/kata/594cd799c08247a55a000004
–ó–∞–¥–∞—á–∞:
A byte is a sequence of 8 bits. One could imagine implementing a small set data structure using a single byte. The set would hold at most the elements 0 through 7. The value of each bit in the byte would indicate whether the index of that bit was included in the set.
Consider the following byte, where the index of each bit is marked below.
Byte:  0 1 1 0 0 1 0 1
Index: 0 1 2 3 4 5 6 7
This byte would represent the set {1, 2, 5, 7}. Similarly,
10101010 ==> {0, 2, 4, 6}
11100000 ==> {0, 1, 2}
Your task is to write a function byte_to_set which takes a single byte (an integer 0-255), and returns the corresponding set.
>> byte_to_set(0)
set()

>> byte_to_set(255)
{0,1,2,3,4,5,6,7}

>> byte_to_set(3)
{6,7}
========================================
URL: https://www.codewars.com/kata/594b8e182fa0a0d7fc000875
–ó–∞–¥–∞—á–∞:
Task:
Given a list of integers, determine whether the sum of its elements is odd or even.
Give your answer as a string matching "odd" or "even".
If the input array is empty consider it as: [0] (array with a zero).
Examples:
Input: [0]
Output: "even"

Input: [0, 1, 4]
Output: "odd"

Input: [0, -1, -5]
Output: "even"

Have fun!
========================================
URL: https://www.codewars.com/kata/594adadee075005308000122
–ó–∞–¥–∞—á–∞:
Task:
Given a list of integers, determine whether the sum of its elements is odd or even.
Give your answer as a string matching "odd" or "even".
If the input array is empty consider it as: [0] (array with a zero).
Examples:
Input: [0]
Output: "even"

Input: [0, 1, 4]
Output: "odd"

Input: [0, -1, -5]
Output: "even"

Have fun!
========================================
URL: https://www.codewars.com/kata/594a1822a2db9e93bd0001d4
–ó–∞–¥–∞—á–∞:
Task:
Given a list of integers, determine whether the sum of its elements is odd or even.
Give your answer as a string matching "odd" or "even".
If the input array is empty consider it as: [0] (array with a zero).
Examples:
Input: [0]
Output: "even"

Input: [0, 1, 4]
Output: "odd"

Input: [0, -1, -5]
Output: "even"

Have fun!
========================================
URL: https://www.codewars.com/kata/5949481f86420f59480000e7
–ó–∞–¥–∞—á–∞:
Task:
Given a list of integers, determine whether the sum of its elements is odd or even.
Give your answer as a string matching "odd" or "even".
If the input array is empty consider it as: [0] (array with a zero).
Examples:
Input: [0]
Output: "even"

Input: [0, 1, 4]
Output: "odd"

Input: [0, -1, -5]
Output: "even"

Have fun!
========================================
URL: https://www.codewars.com/kata/594979a364becbc1ab00003a
–ó–∞–¥–∞—á–∞:
Task:
Given a list of integers, determine whether the sum of its elements is odd or even.
Give your answer as a string matching "odd" or "even".
If the input array is empty consider it as: [0] (array with a zero).
Examples:
Input: [0]
Output: "even"

Input: [0, 1, 4]
Output: "odd"

Input: [0, -1, -5]
Output: "even"

Have fun!
========================================
URL: https://www.codewars.com/kata/594093784aafb857f0000122
–ó–∞–¥–∞—á–∞:
Nickname Generator
Write a function, nicknameGenerator that takes a string name as an argument and returns the first 3 or 4 letters as a nickname.
If the 3rd letter is a consonant, return the first 3 letters.
nickname("Robert") //=> "Rob"
nickname("Kimberly") //=> "Kim"
nickname("Samantha") //=> "Sam"

If the 3rd letter is a vowel, return the first 4 letters. 
nickname("Jeannie") //=> "Jean"
nickname("Douglas") //=> "Doug"
nickname("Gregory") //=> "Greg"

If the string is less than 4 characters, return "Error: Name too short".
Notes:

Vowels are "aeiou", so discount the letter "y".
Input will always be a string.
Input will always have the first letter capitalised and the rest lowercase (e.g. Sam).
The input can be modified
========================================
URL: https://www.codewars.com/kata/59414b46d040b7b8f7000021
–ó–∞–¥–∞—á–∞:
Nickname Generator
Write a function, nicknameGenerator that takes a string name as an argument and returns the first 3 or 4 letters as a nickname.
If the 3rd letter is a consonant, return the first 3 letters.
nickname("Robert") //=> "Rob"
nickname("Kimberly") //=> "Kim"
nickname("Samantha") //=> "Sam"

If the 3rd letter is a vowel, return the first 4 letters. 
nickname("Jeannie") //=> "Jean"
nickname("Douglas") //=> "Doug"
nickname("Gregory") //=> "Greg"

If the string is less than 4 characters, return "Error: Name too short".
Notes:

Vowels are "aeiou", so discount the letter "y".
Input will always be a string.
Input will always have the first letter capitalised and the rest lowercase (e.g. Sam).
The input can be modified
========================================
URL: https://www.codewars.com/kata/593b1909e68ff627c9000186
–ó–∞–¥–∞—á–∞:
Nickname Generator
Write a function, nicknameGenerator that takes a string name as an argument and returns the first 3 or 4 letters as a nickname.
If the 3rd letter is a consonant, return the first 3 letters.
nickname("Robert") //=> "Rob"
nickname("Kimberly") //=> "Kim"
nickname("Samantha") //=> "Sam"

If the 3rd letter is a vowel, return the first 4 letters. 
nickname("Jeannie") //=> "Jean"
nickname("Douglas") //=> "Doug"
nickname("Gregory") //=> "Greg"

If the string is less than 4 characters, return "Error: Name too short".
Notes:

Vowels are "aeiou", so discount the letter "y".
Input will always be a string.
Input will always have the first letter capitalised and the rest lowercase (e.g. Sam).
The input can be modified
========================================
URL: https://www.codewars.com/kata/593c9175933500f33400003e
–ó–∞–¥–∞—á–∞:
Nickname Generator
Write a function, nicknameGenerator that takes a string name as an argument and returns the first 3 or 4 letters as a nickname.
If the 3rd letter is a consonant, return the first 3 letters.
nickname("Robert") //=> "Rob"
nickname("Kimberly") //=> "Kim"
nickname("Samantha") //=> "Sam"

If the 3rd letter is a vowel, return the first 4 letters. 
nickname("Jeannie") //=> "Jean"
nickname("Douglas") //=> "Doug"
nickname("Gregory") //=> "Greg"

If the string is less than 4 characters, return "Error: Name too short".
Notes:

Vowels are "aeiou", so discount the letter "y".
Input will always be a string.
Input will always have the first letter capitalised and the rest lowercase (e.g. Sam).
The input can be modified
========================================
URL: https://www.codewars.com/kata/593f50f343030bd35e0000c6
–ó–∞–¥–∞—á–∞:
Nickname Generator
Write a function, nicknameGenerator that takes a string name as an argument and returns the first 3 or 4 letters as a nickname.
If the 3rd letter is a consonant, return the first 3 letters.
nickname("Robert") //=> "Rob"
nickname("Kimberly") //=> "Kim"
nickname("Samantha") //=> "Sam"

If the 3rd letter is a vowel, return the first 4 letters. 
nickname("Jeannie") //=> "Jean"
nickname("Douglas") //=> "Doug"
nickname("Gregory") //=> "Greg"

If the string is less than 4 characters, return "Error: Name too short".
Notes:

Vowels are "aeiou", so discount the letter "y".
Input will always be a string.
Input will always have the first letter capitalised and the rest lowercase (e.g. Sam).
The input can be modified
========================================
URL: https://www.codewars.com/kata/5939ab6eed348a945f0007b2
–ó–∞–¥–∞—á–∞:
Covfefe
Your are given a string. You must replace any occurence of the sequence coverage by covfefe, however, if you don't find the word coverage in the string, you must add covfefe at the end of the string with a leading space.
For the languages where the string is mutable (such as ruby), don't modify the given string, otherwise this will break the test cases.
========================================
URL: https://www.codewars.com/kata/59377c53e66267c8f6000027
–ó–∞–¥–∞—á–∞:
Covfefe
Your are given a string. You must replace any occurence of the sequence coverage by covfefe, however, if you don't find the word coverage in the string, you must add covfefe at the end of the string with a leading space.
For the languages where the string is mutable (such as ruby), don't modify the given string, otherwise this will break the test cases.
========================================
URL: https://www.codewars.com/kata/5932c94f6aa4d1d786000028
–ó–∞–¥–∞—á–∞:
Covfefe
Your are given a string. You must replace any occurence of the sequence coverage by covfefe, however, if you don't find the word coverage in the string, you must add covfefe at the end of the string with a leading space.
For the languages where the string is mutable (such as ruby), don't modify the given string, otherwise this will break the test cases.
========================================
URL: https://www.codewars.com/kata/592fd8f752ee71ac7e00008a
–ó–∞–¥–∞—á–∞:
Covfefe
Your are given a string. You must replace any occurence of the sequence coverage by covfefe, however, if you don't find the word coverage in the string, you must add covfefe at the end of the string with a leading space.
For the languages where the string is mutable (such as ruby), don't modify the given string, otherwise this will break the test cases.
========================================
URL: https://www.codewars.com/kata/5933af2db328fbc731000010
–ó–∞–¥–∞—á–∞:
Covfefe
Your are given a string. You must replace any occurence of the sequence coverage by covfefe, however, if you don't find the word coverage in the string, you must add covfefe at the end of the string with a leading space.
For the languages where the string is mutable (such as ruby), don't modify the given string, otherwise this will break the test cases.
========================================
URL: https://www.codewars.com/kata/592eaf848c91f248ca000012
–ó–∞–¥–∞—á–∞:
Introduction 
The GADERYPOLUKI is a simple substitution cypher used in scouting to encrypt messages. The encryption is based on short, easy to remember key. The key is written as paired letters, which are in the cipher simple replacement.
The most frequently used key is "GA-DE-RY-PO-LU-KI".
 G => A
 g => a
 a => g
 A => G
 D => E
  etc.

The letters, which are not on the list of substitutes, stays in the encrypted text without changes.
Task
Your task is to help scouts to encrypt and decrypt thier messages.
Write the Encode and Decode functions.
Input/Output
The input string consists of lowercase and uperrcase characters and white .
The substitution has to be case-sensitive. 
Example
 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki"); // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki")  // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

encode("ABCD")          // => GBCE 
encode("Ala has a cat") // => Gug hgs g cgt 
encode("gaderypoluki"); // => agedyropulik
decode("Gug hgs g cgt") // => Ala has a cat 
decode("agedyropulik")  // => gaderypoluki
decode("GBCE

GADERYPOLUKI collection


GADERYPOLUKI cypher vol 1


GADERYPOLUKI cypher vol 2


GADERYPOLUKI cypher vol 3 - Missing Key


GADERYPOLUKI cypher vol 4 - Missing key madness
========================================
URL: https://www.codewars.com/kata/592edfda5be407b9640000b2
–ó–∞–¥–∞—á–∞:
Introduction 
The GADERYPOLUKI is a simple substitution cypher used in scouting to encrypt messages. The encryption is based on short, easy to remember key. The key is written as paired letters, which are in the cipher simple replacement.
The most frequently used key is "GA-DE-RY-PO-LU-KI".
 G => A
 g => a
 a => g
 A => G
 D => E
  etc.

The letters, which are not on the list of substitutes, stays in the encrypted text without changes.
Task
Your task is to help scouts to encrypt and decrypt thier messages.
Write the Encode and Decode functions.
Input/Output
The input string consists of lowercase and uperrcase characters and white .
The substitution has to be case-sensitive. 
Example
 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki"); // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki")  // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

encode("ABCD")          // => GBCE 
encode("Ala has a cat") // => Gug hgs g cgt 
encode("gaderypoluki"); // => agedyropulik
decode("Gug hgs g cgt") // => Ala has a cat 
decode("agedyropulik")  // => gaderypoluki
decode("GBCE

GADERYPOLUKI collection


GADERYPOLUKI cypher vol 1


GADERYPOLUKI cypher vol 2


GADERYPOLUKI cypher vol 3 - Missing Key


GADERYPOLUKI cypher vol 4 - Missing key madness
========================================
URL: https://www.codewars.com/kata/592e830e043b99888600002d
–ó–∞–¥–∞—á–∞:
Introduction 
The GADERYPOLUKI is a simple substitution cypher used in scouting to encrypt messages. The encryption is based on short, easy to remember key. The key is written as paired letters, which are in the cipher simple replacement.
The most frequently used key is "GA-DE-RY-PO-LU-KI".
 G => A
 g => a
 a => g
 A => G
 D => E
  etc.

The letters, which are not on the list of substitutes, stays in the encrypted text without changes.
Task
Your task is to help scouts to encrypt and decrypt thier messages.
Write the Encode and Decode functions.
Input/Output
The input string consists of lowercase and uperrcase characters and white .
The substitution has to be case-sensitive. 
Example
 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki"); // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki")  // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

encode("ABCD")          // => GBCE 
encode("Ala has a cat") // => Gug hgs g cgt 
encode("gaderypoluki"); // => agedyropulik
decode("Gug hgs g cgt") // => Ala has a cat 
decode("agedyropulik")  // => gaderypoluki
decode("GBCE

GADERYPOLUKI collection


GADERYPOLUKI cypher vol 1


GADERYPOLUKI cypher vol 2


GADERYPOLUKI cypher vol 3 - Missing Key


GADERYPOLUKI cypher vol 4 - Missing key madness
========================================
URL: https://www.codewars.com/kata/592a6ad46d6c5a62b600003f
–ó–∞–¥–∞—á–∞:
Introduction 
The GADERYPOLUKI is a simple substitution cypher used in scouting to encrypt messages. The encryption is based on short, easy to remember key. The key is written as paired letters, which are in the cipher simple replacement.
The most frequently used key is "GA-DE-RY-PO-LU-KI".
 G => A
 g => a
 a => g
 A => G
 D => E
  etc.

The letters, which are not on the list of substitutes, stays in the encrypted text without changes.
Task
Your task is to help scouts to encrypt and decrypt thier messages.
Write the Encode and Decode functions.
Input/Output
The input string consists of lowercase and uperrcase characters and white .
The substitution has to be case-sensitive. 
Example
 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki"); // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki")  // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

encode("ABCD")          // => GBCE 
encode("Ala has a cat") // => Gug hgs g cgt 
encode("gaderypoluki"); // => agedyropulik
decode("Gug hgs g cgt") // => Ala has a cat 
decode("agedyropulik")  // => gaderypoluki
decode("GBCE

GADERYPOLUKI collection


GADERYPOLUKI cypher vol 1


GADERYPOLUKI cypher vol 2


GADERYPOLUKI cypher vol 3 - Missing Key


GADERYPOLUKI cypher vol 4 - Missing key madness
========================================
URL: https://www.codewars.com/kata/592e2446dc403b132d0000be
–ó–∞–¥–∞—á–∞:
Introduction 
The GADERYPOLUKI is a simple substitution cypher used in scouting to encrypt messages. The encryption is based on short, easy to remember key. The key is written as paired letters, which are in the cipher simple replacement.
The most frequently used key is "GA-DE-RY-PO-LU-KI".
 G => A
 g => a
 a => g
 A => G
 D => E
  etc.

The letters, which are not on the list of substitutes, stays in the encrypted text without changes.
Task
Your task is to help scouts to encrypt and decrypt thier messages.
Write the Encode and Decode functions.
Input/Output
The input string consists of lowercase and uperrcase characters and white .
The substitution has to be case-sensitive. 
Example
 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki"); // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 encode("ABCD")          // => GBCE 
 encode("Ala has a cat") // => Gug hgs g cgt 
 encode("gaderypoluki"); // => agedyropulik
 decode("Gug hgs g cgt") // => Ala has a cat 
 decode("agedyropulik")  // => gaderypoluki
 decode("GBCE")          // => ABCD

 Encode("ABCD")          // => GBCE 
 Encode("Ala has a cat") // => Gug hgs g cgt 
 Encode("gaderypoluki")  // => agedyropulik
 Decode("Gug hgs g cgt") // => Ala has a cat 
 Decode("agedyropulik")  // => gaderypoluki
 Decode("GBCE")          // => ABCD

encode("ABCD")          // => GBCE 
encode("Ala has a cat") // => Gug hgs g cgt 
encode("gaderypoluki"); // => agedyropulik
decode("Gug hgs g cgt") // => Ala has a cat 
decode("agedyropulik")  // => gaderypoluki
decode("GBCE

GADERYPOLUKI collection


GADERYPOLUKI cypher vol 1


GADERYPOLUKI cypher vol 2


GADERYPOLUKI cypher vol 3 - Missing Key


GADERYPOLUKI cypher vol 4 - Missing key madness
========================================
URL: https://www.codewars.com/kata/592a33e549fe9840a8000ba1
–ó–∞–¥–∞—á–∞:
Task
Ram lives in a house which is round in shape. The house has n entrances numbered from 1 to n. For each i in range 1..n-1 entrances i and i + 1 are adjacent; entrances 1 and n are also adjacent.
Ram's flat is located at entrance a. Each evening he goes for a walk around the house, counting the entrances he walks by. Today Ram decided to walk until he counts b entrances.
Help Ram to determine the number of the entrance near which he will be at the end of his walk.
Input/Output
Input:

integer n - The number of entrances, 1 ‚â§ n ‚â§ 200
integer a - The number of the entrance where Ram starts his walk, 1 ‚â§ a ‚â§ n
integer b - The number of entrances Ram wants to count, -100 000 ‚â§ b ‚â§ 100 000

Note:

if b > 0, Ram walks clockwise until he counts b entrances
if b < 0, Ram walks counterclockwise until he counts b entrances
if b = 0, Ram stays at his entrance and doesn't go anywhere

Output:

an integer - The number of the house at the end of his walk.

Examples
For n = 5, a = 1 and b = 3, the output should be 4: Ram will walk clockwise around the house, counting the entrances as follows: 1 -> 2 -> 3 -> 4
For n = 6, a = 2 and b = -5, the output should be 3: 
Ram will walk counterclockwise around the house, so he will count the entrances as follows: 2 -> 1 -> 6 -> 5 -> 4 -> 3
========================================
URL: https://www.codewars.com/kata/592915cc1fad49252f000006
–ó–∞–¥–∞—á–∞:
Task
Ram lives in a house which is round in shape. The house has n entrances numbered from 1 to n. For each i in range 1..n-1 entrances i and i + 1 are adjacent; entrances 1 and n are also adjacent.
Ram's flat is located at entrance a. Each evening he goes for a walk around the house, counting the entrances he walks by. Today Ram decided to walk until he counts b entrances.
Help Ram to determine the number of the entrance near which he will be at the end of his walk.
Input/Output
Input:

integer n - The number of entrances, 1 ‚â§ n ‚â§ 200
integer a - The number of the entrance where Ram starts his walk, 1 ‚â§ a ‚â§ n
integer b - The number of entrances Ram wants to count, -100 000 ‚â§ b ‚â§ 100 000

Note:

if b > 0, Ram walks clockwise until he counts b entrances
if b < 0, Ram walks counterclockwise until he counts b entrances
if b = 0, Ram stays at his entrance and doesn't go anywhere

Output:

an integer - The number of the house at the end of his walk.

Examples
For n = 5, a = 1 and b = 3, the output should be 4: Ram will walk clockwise around the house, counting the entrances as follows: 1 -> 2 -> 3 -> 4
For n = 6, a = 2 and b = -5, the output should be 3: 
Ram will walk counterclockwise around the house, so he will count the entrances as follows: 2 -> 1 -> 6 -> 5 -> 4 -> 3
========================================
URL: https://www.codewars.com/kata/591e8c715b1d254f9e00005e
–ó–∞–¥–∞—á–∞:
Task
Ram lives in a house which is round in shape. The house has n entrances numbered from 1 to n. For each i in range 1..n-1 entrances i and i + 1 are adjacent; entrances 1 and n are also adjacent.
Ram's flat is located at entrance a. Each evening he goes for a walk around the house, counting the entrances he walks by. Today Ram decided to walk until he counts b entrances.
Help Ram to determine the number of the entrance near which he will be at the end of his walk.
Input/Output
Input:

integer n - The number of entrances, 1 ‚â§ n ‚â§ 200
integer a - The number of the entrance where Ram starts his walk, 1 ‚â§ a ‚â§ n
integer b - The number of entrances Ram wants to count, -100 000 ‚â§ b ‚â§ 100 000

Note:

if b > 0, Ram walks clockwise until he counts b entrances
if b < 0, Ram walks counterclockwise until he counts b entrances
if b = 0, Ram stays at his entrance and doesn't go anywhere

Output:

an integer - The number of the house at the end of his walk.

Examples
For n = 5, a = 1 and b = 3, the output should be 4: Ram will walk clockwise around the house, counting the entrances as follows: 1 -> 2 -> 3 -> 4
For n = 6, a = 2 and b = -5, the output should be 3: 
Ram will walk counterclockwise around the house, so he will count the entrances as follows: 2 -> 1 -> 6 -> 5 -> 4 -> 3
========================================
URL: https://www.codewars.com/kata/5925acf31a9825d616000e74
–ó–∞–¥–∞—á–∞:
Task
Ram lives in a house which is round in shape. The house has n entrances numbered from 1 to n. For each i in range 1..n-1 entrances i and i + 1 are adjacent; entrances 1 and n are also adjacent.
Ram's flat is located at entrance a. Each evening he goes for a walk around the house, counting the entrances he walks by. Today Ram decided to walk until he counts b entrances.
Help Ram to determine the number of the entrance near which he will be at the end of his walk.
Input/Output
Input:

integer n - The number of entrances, 1 ‚â§ n ‚â§ 200
integer a - The number of the entrance where Ram starts his walk, 1 ‚â§ a ‚â§ n
integer b - The number of entrances Ram wants to count, -100 000 ‚â§ b ‚â§ 100 000

Note:

if b > 0, Ram walks clockwise until he counts b entrances
if b < 0, Ram walks counterclockwise until he counts b entrances
if b = 0, Ram stays at his entrance and doesn't go anywhere

Output:

an integer - The number of the house at the end of his walk.

Examples
For n = 5, a = 1 and b = 3, the output should be 4: Ram will walk clockwise around the house, counting the entrances as follows: 1 -> 2 -> 3 -> 4
For n = 6, a = 2 and b = -5, the output should be 3: 
Ram will walk counterclockwise around the house, so he will count the entrances as follows: 2 -> 1 -> 6 -> 5 -> 4 -> 3
========================================
URL: https://www.codewars.com/kata/5926624c9b424d10390000bf
–ó–∞–¥–∞—á–∞:
Task
Ram lives in a house which is round in shape. The house has n entrances numbered from 1 to n. For each i in range 1..n-1 entrances i and i + 1 are adjacent; entrances 1 and n are also adjacent.
Ram's flat is located at entrance a. Each evening he goes for a walk around the house, counting the entrances he walks by. Today Ram decided to walk until he counts b entrances.
Help Ram to determine the number of the entrance near which he will be at the end of his walk.
Input/Output
Input:

integer n - The number of entrances, 1 ‚â§ n ‚â§ 200
integer a - The number of the entrance where Ram starts his walk, 1 ‚â§ a ‚â§ n
integer b - The number of entrances Ram wants to count, -100 000 ‚â§ b ‚â§ 100 000

Note:

if b > 0, Ram walks clockwise until he counts b entrances
if b < 0, Ram walks counterclockwise until he counts b entrances
if b = 0, Ram stays at his entrance and doesn't go anywhere

Output:

an integer - The number of the house at the end of his walk.

Examples
For n = 5, a = 1 and b = 3, the output should be 4: Ram will walk clockwise around the house, counting the entrances as follows: 1 -> 2 -> 3 -> 4
For n = 6, a = 2 and b = -5, the output should be 3: 
Ram will walk counterclockwise around the house, so he will count the entrances as follows: 2 -> 1 -> 6 -> 5 -> 4 -> 3
========================================
URL: https://www.codewars.com/kata/591592b0f05d9a3019000087
–ó–∞–¥–∞—á–∞:
Task
Given array of integers sequence and some integer fixedElement, output the number of even values in sequence before the first occurrence of fixedElement or -1 if and only if fixedElement is not contained in sequence.
Input/Output
[input] integer array sequence
A non-empty array of positive integers.
4 ‚â§ sequence.length ‚â§ 100
1 ‚â§ sequence[i] ‚â§ 9
[input] integer fixedElement
An positive integer
1 ‚â§ fixedElement ‚â§ 9
[output] an integer
Example
For sequence = [1, 4, 2, 6, 3, 1] and fixedElement = 6, the output should be 2.
There are 2 even numbers before 6: 4 and 2
For sequence = [2, 2, 2, 1] and fixedElement = 3, the output should be -1.
There is no 3 appears in sequence. So returns -1.
For sequence = [1, 3, 4, 3] and fixedElement = 3, the output should be 0.
3 appears in sequence, but there is no even number before 3.
========================================
URL: https://www.codewars.com/kata/5912701a89fc3d0a6a000169
–ó–∞–¥–∞—á–∞:
Task
Given array of integers sequence and some integer fixedElement, output the number of even values in sequence before the first occurrence of fixedElement or -1 if and only if fixedElement is not contained in sequence.
Input/Output
[input] integer array sequence
A non-empty array of positive integers.
4 ‚â§ sequence.length ‚â§ 100
1 ‚â§ sequence[i] ‚â§ 9
[input] integer fixedElement
An positive integer
1 ‚â§ fixedElement ‚â§ 9
[output] an integer
Example
For sequence = [1, 4, 2, 6, 3, 1] and fixedElement = 6, the output should be 2.
There are 2 even numbers before 6: 4 and 2
For sequence = [2, 2, 2, 1] and fixedElement = 3, the output should be -1.
There is no 3 appears in sequence. So returns -1.
For sequence = [1, 3, 4, 3] and fixedElement = 3, the output should be 0.
3 appears in sequence, but there is no even number before 3.
========================================
URL: https://www.codewars.com/kata/5915686ed2563aa6650000ab
–ó–∞–¥–∞—á–∞:
Task
Given array of integers sequence and some integer fixedElement, output the number of even values in sequence before the first occurrence of fixedElement or -1 if and only if fixedElement is not contained in sequence.
Input/Output
[input] integer array sequence
A non-empty array of positive integers.
4 ‚â§ sequence.length ‚â§ 100
1 ‚â§ sequence[i] ‚â§ 9
[input] integer fixedElement
An positive integer
1 ‚â§ fixedElement ‚â§ 9
[output] an integer
Example
For sequence = [1, 4, 2, 6, 3, 1] and fixedElement = 6, the output should be 2.
There are 2 even numbers before 6: 4 and 2
For sequence = [2, 2, 2, 1] and fixedElement = 3, the output should be -1.
There is no 3 appears in sequence. So returns -1.
For sequence = [1, 3, 4, 3] and fixedElement = 3, the output should be 0.
3 appears in sequence, but there is no even number before 3.
========================================
URL: https://www.codewars.com/kata/5912ded3f9f87fd271000120
–ó–∞–¥–∞—á–∞:
Task
Given array of integers sequence and some integer fixedElement, output the number of even values in sequence before the first occurrence of fixedElement or -1 if and only if fixedElement is not contained in sequence.
Input/Output
[input] integer array sequence
A non-empty array of positive integers.
4 ‚â§ sequence.length ‚â§ 100
1 ‚â§ sequence[i] ‚â§ 9
[input] integer fixedElement
An positive integer
1 ‚â§ fixedElement ‚â§ 9
[output] an integer
Example
For sequence = [1, 4, 2, 6, 3, 1] and fixedElement = 6, the output should be 2.
There are 2 even numbers before 6: 4 and 2
For sequence = [2, 2, 2, 1] and fixedElement = 3, the output should be -1.
There is no 3 appears in sequence. So returns -1.
For sequence = [1, 3, 4, 3] and fixedElement = 3, the output should be 0.
3 appears in sequence, but there is no even number before 3.
========================================
URL: https://www.codewars.com/kata/5913152be0b295cf99000001
–ó–∞–¥–∞—á–∞:
Task
Given array of integers sequence and some integer fixedElement, output the number of even values in sequence before the first occurrence of fixedElement or -1 if and only if fixedElement is not contained in sequence.
Input/Output
[input] integer array sequence
A non-empty array of positive integers.
4 ‚â§ sequence.length ‚â§ 100
1 ‚â§ sequence[i] ‚â§ 9
[input] integer fixedElement
An positive integer
1 ‚â§ fixedElement ‚â§ 9
[output] an integer
Example
For sequence = [1, 4, 2, 6, 3, 1] and fixedElement = 6, the output should be 2.
There are 2 even numbers before 6: 4 and 2
For sequence = [2, 2, 2, 1] and fixedElement = 3, the output should be -1.
There is no 3 appears in sequence. So returns -1.
For sequence = [1, 3, 4, 3] and fixedElement = 3, the output should be 0.
3 appears in sequence, but there is no even number before 3.
========================================
URL: https://www.codewars.com/kata/590fd3220f05b4f1ad00007c
–ó–∞–¥–∞—á–∞:
Given an input of an array of digits, return the array with each digit incremented by its position in the array: the first digit will be incremented by 1, the second digit by 2, etc. Make sure to start counting your positions from 1 ( and not 0 ).
Your result can only contain single digit numbers, so if adding a digit with its position gives you a multiple-digit number, only the last digit of the number should be returned.
Notes:

return an empty array if your array is empty
arrays will only contain numbers so don't worry about checking that

Examples:
[1, 2, 3]  -->  [2, 4, 6]   #  [1+1, 2+2, 3+3]

[4, 6, 9, 1, 3]  -->  [5, 8, 2, 5, 8]  #  [4+1, 6+2, 9+3, 1+4, 3+5]
                                       #  9+3 = 12  -->  2
========================================
URL: https://www.codewars.com/kata/590fca79b5f8a69285000465
–ó–∞–¥–∞—á–∞:
Given an input of an array of digits, return the array with each digit incremented by its position in the array: the first digit will be incremented by 1, the second digit by 2, etc. Make sure to start counting your positions from 1 ( and not 0 ).
Your result can only contain single digit numbers, so if adding a digit with its position gives you a multiple-digit number, only the last digit of the number should be returned.
Notes:

return an empty array if your array is empty
arrays will only contain numbers so don't worry about checking that

Examples:
[1, 2, 3]  -->  [2, 4, 6]   #  [1+1, 2+2, 3+3]

[4, 6, 9, 1, 3]  -->  [5, 8, 2, 5, 8]  #  [4+1, 6+2, 9+3, 1+4, 3+5]
                                       #  9+3 = 12  -->  2
========================================
URL: https://www.codewars.com/kata/590ee3c979ae8923bf00095b
–ó–∞–¥–∞—á–∞:
Given an input of an array of digits, return the array with each digit incremented by its position in the array: the first digit will be incremented by 1, the second digit by 2, etc. Make sure to start counting your positions from 1 ( and not 0 ).
Your result can only contain single digit numbers, so if adding a digit with its position gives you a multiple-digit number, only the last digit of the number should be returned.
Notes:

return an empty array if your array is empty
arrays will only contain numbers so don't worry about checking that

Examples:
[1, 2, 3]  -->  [2, 4, 6]   #  [1+1, 2+2, 3+3]

[4, 6, 9, 1, 3]  -->  [5, 8, 2, 5, 8]  #  [4+1, 6+2, 9+3, 1+4, 3+5]
                                       #  9+3 = 12  -->  2
========================================
URL: https://www.codewars.com/kata/590f5b4a7bbb3e246000007d
–ó–∞–¥–∞—á–∞:
Given an input of an array of digits, return the array with each digit incremented by its position in the array: the first digit will be incremented by 1, the second digit by 2, etc. Make sure to start counting your positions from 1 ( and not 0 ).
Your result can only contain single digit numbers, so if adding a digit with its position gives you a multiple-digit number, only the last digit of the number should be returned.
Notes:

return an empty array if your array is empty
arrays will only contain numbers so don't worry about checking that

Examples:
[1, 2, 3]  -->  [2, 4, 6]   #  [1+1, 2+2, 3+3]

[4, 6, 9, 1, 3]  -->  [5, 8, 2, 5, 8]  #  [4+1, 6+2, 9+3, 1+4, 3+5]
                                       #  9+3 = 12  -->  2
========================================
URL: https://www.codewars.com/kata/590e03aef55cab099a0002e8
–ó–∞–¥–∞—á–∞:
Given an input of an array of digits, return the array with each digit incremented by its position in the array: the first digit will be incremented by 1, the second digit by 2, etc. Make sure to start counting your positions from 1 ( and not 0 ).
Your result can only contain single digit numbers, so if adding a digit with its position gives you a multiple-digit number, only the last digit of the number should be returned.
Notes:

return an empty array if your array is empty
arrays will only contain numbers so don't worry about checking that

Examples:
[1, 2, 3]  -->  [2, 4, 6]   #  [1+1, 2+2, 3+3]

[4, 6, 9, 1, 3]  -->  [5, 8, 2, 5, 8]  #  [4+1, 6+2, 9+3, 1+4, 3+5]
                                       #  9+3 = 12  -->  2
========================================
URL: https://www.codewars.com/kata/590bdaa251ab8267b800005b
–ó–∞–¥–∞—á–∞:
Task
Your friend has invited you to watch a tennis match at a local sports club. Since tennis isn't your favorite sport, you get bored right at the start of the first game and start looking for something to keep yourself entertained. Noticing the scoreboard, you realize you don't even know how many points have been won since the game started, so you decided to calculate this number. Given the current score, your goal is to find the number of points won in the current game.
If you are not familiar with tennis rules, here's a short description of its scoring system. Score calling is unique in tennis: each point has a corresponding call that is different from its point value. The table of points won and corresponding calls is given below.
+----------------------+--------------------+
| Number of points won | Corresponding call |
+----------------------+--------------------+
|          0           |      "love"        |
+----------------------+--------------------+
|          1           |       "15"         |
+----------------------+--------------------+
|          2           |       "30"         |
+----------------------+--------------------+
|          3           |       "40"         |
+----------------------+--------------------+

There's an additional rule to remember: when players are tied by one or two points, the score is described as "15-all" and "30-all", respectively.
It's guaranteed that no more than 5 points have been won so far, and the game is not over yet. It is also guaranteed that at least one point has been won.
Input/Output
[input] string score
A string in the format <p1>-<p2> representing a valid score, where <p1> is the first player's score, and <p2> is the second player's score.
[output] an integer
The number of points won so far.
Example
For score = "15-40", the output should be 4.
The first player won 1 point, and the second 3, so 1 + 3 = 4 points have been won.
For score = "30-all", the output should be 4.
The players have won 2 points each.
========================================
URL: https://www.codewars.com/kata/59094c5d579da9aceb000037
–ó–∞–¥–∞—á–∞:
Task
Your friend has invited you to watch a tennis match at a local sports club. Since tennis isn't your favorite sport, you get bored right at the start of the first game and start looking for something to keep yourself entertained. Noticing the scoreboard, you realize you don't even know how many points have been won since the game started, so you decided to calculate this number. Given the current score, your goal is to find the number of points won in the current game.
If you are not familiar with tennis rules, here's a short description of its scoring system. Score calling is unique in tennis: each point has a corresponding call that is different from its point value. The table of points won and corresponding calls is given below.
+----------------------+--------------------+
| Number of points won | Corresponding call |
+----------------------+--------------------+
|          0           |      "love"        |
+----------------------+--------------------+
|          1           |       "15"         |
+----------------------+--------------------+
|          2           |       "30"         |
+----------------------+--------------------+
|          3           |       "40"         |
+----------------------+--------------------+

There's an additional rule to remember: when players are tied by one or two points, the score is described as "15-all" and "30-all", respectively.
It's guaranteed that no more than 5 points have been won so far, and the game is not over yet. It is also guaranteed that at least one point has been won.
Input/Output
[input] string score
A string in the format <p1>-<p2> representing a valid score, where <p1> is the first player's score, and <p2> is the second player's score.
[output] an integer
The number of points won so far.
Example
For score = "15-40", the output should be 4.
The first player won 1 point, and the second 3, so 1 + 3 = 4 points have been won.
For score = "30-all", the output should be 4.
The players have won 2 points each.
========================================
URL: https://www.codewars.com/kata/590ac6b9be4dff49b0000042
–ó–∞–¥–∞—á–∞:
Task
Your friend has invited you to watch a tennis match at a local sports club. Since tennis isn't your favorite sport, you get bored right at the start of the first game and start looking for something to keep yourself entertained. Noticing the scoreboard, you realize you don't even know how many points have been won since the game started, so you decided to calculate this number. Given the current score, your goal is to find the number of points won in the current game.
If you are not familiar with tennis rules, here's a short description of its scoring system. Score calling is unique in tennis: each point has a corresponding call that is different from its point value. The table of points won and corresponding calls is given below.
+----------------------+--------------------+
| Number of points won | Corresponding call |
+----------------------+--------------------+
|          0           |      "love"        |
+----------------------+--------------------+
|          1           |       "15"         |
+----------------------+--------------------+
|          2           |       "30"         |
+----------------------+--------------------+
|          3           |       "40"         |
+----------------------+--------------------+

There's an additional rule to remember: when players are tied by one or two points, the score is described as "15-all" and "30-all", respectively.
It's guaranteed that no more than 5 points have been won so far, and the game is not over yet. It is also guaranteed that at least one point has been won.
Input/Output
[input] string score
A string in the format <p1>-<p2> representing a valid score, where <p1> is the first player's score, and <p2> is the second player's score.
[output] an integer
The number of points won so far.
Example
For score = "15-40", the output should be 4.
The first player won 1 point, and the second 3, so 1 + 3 = 4 points have been won.
For score = "30-all", the output should be 4.
The players have won 2 points each.
========================================
URL: https://www.codewars.com/kata/590a7f2be8e86e1240000068
–ó–∞–¥–∞—á–∞:
Task
Your friend has invited you to watch a tennis match at a local sports club. Since tennis isn't your favorite sport, you get bored right at the start of the first game and start looking for something to keep yourself entertained. Noticing the scoreboard, you realize you don't even know how many points have been won since the game started, so you decided to calculate this number. Given the current score, your goal is to find the number of points won in the current game.
If you are not familiar with tennis rules, here's a short description of its scoring system. Score calling is unique in tennis: each point has a corresponding call that is different from its point value. The table of points won and corresponding calls is given below.
+----------------------+--------------------+
| Number of points won | Corresponding call |
+----------------------+--------------------+
|          0           |      "love"        |
+----------------------+--------------------+
|          1           |       "15"         |
+----------------------+--------------------+
|          2           |       "30"         |
+----------------------+--------------------+
|          3           |       "40"         |
+----------------------+--------------------+

There's an additional rule to remember: when players are tied by one or two points, the score is described as "15-all" and "30-all", respectively.
It's guaranteed that no more than 5 points have been won so far, and the game is not over yet. It is also guaranteed that at least one point has been won.
Input/Output
[input] string score
A string in the format <p1>-<p2> representing a valid score, where <p1> is the first player's score, and <p2> is the second player's score.
[output] an integer
The number of points won so far.
Example
For score = "15-40", the output should be 4.
The first player won 1 point, and the second 3, so 1 + 3 = 4 points have been won.
For score = "30-all", the output should be 4.
The players have won 2 points each.
========================================
URL: https://www.codewars.com/kata/590942d4efde93886900185a
–ó–∞–¥–∞—á–∞:
Task
Your friend has invited you to watch a tennis match at a local sports club. Since tennis isn't your favorite sport, you get bored right at the start of the first game and start looking for something to keep yourself entertained. Noticing the scoreboard, you realize you don't even know how many points have been won since the game started, so you decided to calculate this number. Given the current score, your goal is to find the number of points won in the current game.
If you are not familiar with tennis rules, here's a short description of its scoring system. Score calling is unique in tennis: each point has a corresponding call that is different from its point value. The table of points won and corresponding calls is given below.
+----------------------+--------------------+
| Number of points won | Corresponding call |
+----------------------+--------------------+
|          0           |      "love"        |
+----------------------+--------------------+
|          1           |       "15"         |
+----------------------+--------------------+
|          2           |       "30"         |
+----------------------+--------------------+
|          3           |       "40"         |
+----------------------+--------------------+

There's an additional rule to remember: when players are tied by one or two points, the score is described as "15-all" and "30-all", respectively.
It's guaranteed that no more than 5 points have been won so far, and the game is not over yet. It is also guaranteed that at least one point has been won.
Input/Output
[input] string score
A string in the format <p1>-<p2> representing a valid score, where <p1> is the first player's score, and <p2> is the second player's score.
[output] an integer
The number of points won so far.
Example
For score = "15-40", the output should be 4.
The first player won 1 point, and the second 3, so 1 + 3 = 4 points have been won.
For score = "30-all", the output should be 4.
The players have won 2 points each.
========================================
URL: https://www.codewars.com/kata/5902f1839b8e720287000028
–ó–∞–¥–∞—á–∞:
Frank just bought a new calculator.
But, this is no normal calculator. 
This is a 'Sticky Calculator.
Whenever you add add, subtract, multiply or divide two numbers the two numbers first stick together: 
For instance: 
50 + 12 becomes 5012

and then the operation is carried out as usual: 
(5012) + 12 = 5024

Task
It is your job to create a function which takes 3 parameters:
stickyCalc(operation, val1, val2)

which works just like Frank's sticky calculator
Some Examples
stickyCalc('+', 50, 12)     // Output: (5012 + 12) = 5024
stickyCalc('-', 7, 5)       // Output: (75 - 5) = 70
stickyCalc('*', 13, 20)     // Output: (1320 * 20 ) = 26400
stickyCalc('/', 10, 10)     // Output: (1010 / 10) = 101

Note

The calculator only works for positive integers only.
The calculator rounds any non-integer before operating.
The calculator rounds any output to nearest integer.

For example: 
stickyCalc('/', 12.1, 6.8), 18);   

12.1 and 6.8 are rounded to 12 and 7 respectively & they 'stick together' to make 127. 
Although 127 / 7 = 18.1428 ; 18 is outputted instead.
========================================
URL: https://www.codewars.com/kata/5906a218dfeb0dbb52000005
–ó–∞–¥–∞—á–∞:
Frank just bought a new calculator.
But, this is no normal calculator. 
This is a 'Sticky Calculator.
Whenever you add add, subtract, multiply or divide two numbers the two numbers first stick together: 
For instance: 
50 + 12 becomes 5012

and then the operation is carried out as usual: 
(5012) + 12 = 5024

Task
It is your job to create a function which takes 3 parameters:
stickyCalc(operation, val1, val2)

which works just like Frank's sticky calculator
Some Examples
stickyCalc('+', 50, 12)     // Output: (5012 + 12) = 5024
stickyCalc('-', 7, 5)       // Output: (75 - 5) = 70
stickyCalc('*', 13, 20)     // Output: (1320 * 20 ) = 26400
stickyCalc('/', 10, 10)     // Output: (1010 / 10) = 101

Note

The calculator only works for positive integers only.
The calculator rounds any non-integer before operating.
The calculator rounds any output to nearest integer.

For example: 
stickyCalc('/', 12.1, 6.8), 18);   

12.1 and 6.8 are rounded to 12 and 7 respectively & they 'stick together' to make 127. 
Although 127 / 7 = 18.1428 ; 18 is outputted instead.
========================================
URL: https://www.codewars.com/kata/590818ddffa0da26ad00009b
–ó–∞–¥–∞—á–∞:
Frank just bought a new calculator.
But, this is no normal calculator. 
This is a 'Sticky Calculator.
Whenever you add add, subtract, multiply or divide two numbers the two numbers first stick together: 
For instance: 
50 + 12 becomes 5012

and then the operation is carried out as usual: 
(5012) + 12 = 5024

Task
It is your job to create a function which takes 3 parameters:
stickyCalc(operation, val1, val2)

which works just like Frank's sticky calculator
Some Examples
stickyCalc('+', 50, 12)     // Output: (5012 + 12) = 5024
stickyCalc('-', 7, 5)       // Output: (75 - 5) = 70
stickyCalc('*', 13, 20)     // Output: (1320 * 20 ) = 26400
stickyCalc('/', 10, 10)     // Output: (1010 / 10) = 101

Note

The calculator only works for positive integers only.
The calculator rounds any non-integer before operating.
The calculator rounds any output to nearest integer.

For example: 
stickyCalc('/', 12.1, 6.8), 18);   

12.1 and 6.8 are rounded to 12 and 7 respectively & they 'stick together' to make 127. 
Although 127 / 7 = 18.1428 ; 18 is outputted instead.
========================================
URL: https://www.codewars.com/kata/5902ea9b378a92a990000016
–ó–∞–¥–∞—á–∞:
Frank just bought a new calculator.
But, this is no normal calculator. 
This is a 'Sticky Calculator.
Whenever you add add, subtract, multiply or divide two numbers the two numbers first stick together: 
For instance: 
50 + 12 becomes 5012

and then the operation is carried out as usual: 
(5012) + 12 = 5024

Task
It is your job to create a function which takes 3 parameters:
stickyCalc(operation, val1, val2)

which works just like Frank's sticky calculator
Some Examples
stickyCalc('+', 50, 12)     // Output: (5012 + 12) = 5024
stickyCalc('-', 7, 5)       // Output: (75 - 5) = 70
stickyCalc('*', 13, 20)     // Output: (1320 * 20 ) = 26400
stickyCalc('/', 10, 10)     // Output: (1010 / 10) = 101

Note

The calculator only works for positive integers only.
The calculator rounds any non-integer before operating.
The calculator rounds any output to nearest integer.

For example: 
stickyCalc('/', 12.1, 6.8), 18);   

12.1 and 6.8 are rounded to 12 and 7 respectively & they 'stick together' to make 127. 
Although 127 / 7 = 18.1428 ; 18 is outputted instead.
========================================
URL: https://www.codewars.com/kata/5900750cb7c6172207000054
–ó–∞–¥–∞—á–∞:
Frank just bought a new calculator.
But, this is no normal calculator. 
This is a 'Sticky Calculator.
Whenever you add add, subtract, multiply or divide two numbers the two numbers first stick together: 
For instance: 
50 + 12 becomes 5012

and then the operation is carried out as usual: 
(5012) + 12 = 5024

Task
It is your job to create a function which takes 3 parameters:
stickyCalc(operation, val1, val2)

which works just like Frank's sticky calculator
Some Examples
stickyCalc('+', 50, 12)     // Output: (5012 + 12) = 5024
stickyCalc('-', 7, 5)       // Output: (75 - 5) = 70
stickyCalc('*', 13, 20)     // Output: (1320 * 20 ) = 26400
stickyCalc('/', 10, 10)     // Output: (1010 / 10) = 101

Note

The calculator only works for positive integers only.
The calculator rounds any non-integer before operating.
The calculator rounds any output to nearest integer.

For example: 
stickyCalc('/', 12.1, 6.8), 18);   

12.1 and 6.8 are rounded to 12 and 7 respectively & they 'stick together' to make 127. 
Although 127 / 7 = 18.1428 ; 18 is outputted instead.
========================================
URL: https://www.codewars.com/kata/59000d6c13b00151720000d5
–ó–∞–¥–∞—á–∞:
Task
 You are given three integers l, d and x. Your task is:
‚Ä¢ determine the minimal integer n 
    such that l ‚â§ n ‚â§ d, and the sum of its digits equals x.
‚Ä¢ determine the maximal integer m 
    such that l ‚â§ m ‚â§ d, and the sum of its digits equals x.

It is guaranteed that such numbers always exist.
Input/Output

[input] integer l

[input] integer d


 1 ‚â§ l ‚â§ d ‚â§ 10000.

[input] integer x

 1 ‚â§ x ‚â§ 36

[output] an integer array

  Array of two elements, where the first element is n, and the second one is m.
Example
 For l = 500, d = 505, x = 10, the output should be [505, 505].
 For l = 100, d = 200, x = 10, the output should be [109, 190].
========================================
URL: https://www.codewars.com/kata/58fd52b59a9f65c398000096
–ó–∞–¥–∞—á–∞:
Task
 You are given three integers l, d and x. Your task is:
‚Ä¢ determine the minimal integer n 
    such that l ‚â§ n ‚â§ d, and the sum of its digits equals x.
‚Ä¢ determine the maximal integer m 
    such that l ‚â§ m ‚â§ d, and the sum of its digits equals x.

It is guaranteed that such numbers always exist.
Input/Output

[input] integer l

[input] integer d


 1 ‚â§ l ‚â§ d ‚â§ 10000.

[input] integer x

 1 ‚â§ x ‚â§ 36

[output] an integer array

  Array of two elements, where the first element is n, and the second one is m.
Example
 For l = 500, d = 505, x = 10, the output should be [505, 505].
 For l = 100, d = 200, x = 10, the output should be [109, 190].
========================================
URL: https://www.codewars.com/kata/58fd9f6213b00172ce0000c9
–ó–∞–¥–∞—á–∞:
Task
 You are given three integers l, d and x. Your task is:
‚Ä¢ determine the minimal integer n 
    such that l ‚â§ n ‚â§ d, and the sum of its digits equals x.
‚Ä¢ determine the maximal integer m 
    such that l ‚â§ m ‚â§ d, and the sum of its digits equals x.

It is guaranteed that such numbers always exist.
Input/Output

[input] integer l

[input] integer d


 1 ‚â§ l ‚â§ d ‚â§ 10000.

[input] integer x

 1 ‚â§ x ‚â§ 36

[output] an integer array

  Array of two elements, where the first element is n, and the second one is m.
Example
 For l = 500, d = 505, x = 10, the output should be [505, 505].
 For l = 100, d = 200, x = 10, the output should be [109, 190].
========================================
URL: https://www.codewars.com/kata/58fd96a59a9f65c2e900008d
–ó–∞–¥–∞—á–∞:
Task
 You are given three integers l, d and x. Your task is:
‚Ä¢ determine the minimal integer n 
    such that l ‚â§ n ‚â§ d, and the sum of its digits equals x.
‚Ä¢ determine the maximal integer m 
    such that l ‚â§ m ‚â§ d, and the sum of its digits equals x.

It is guaranteed that such numbers always exist.
Input/Output

[input] integer l

[input] integer d


 1 ‚â§ l ‚â§ d ‚â§ 10000.

[input] integer x

 1 ‚â§ x ‚â§ 36

[output] an integer array

  Array of two elements, where the first element is n, and the second one is m.
Example
 For l = 500, d = 505, x = 10, the output should be [505, 505].
 For l = 100, d = 200, x = 10, the output should be [109, 190].
========================================
URL: https://www.codewars.com/kata/58fd91af13b0012e8e000010
–ó–∞–¥–∞—á–∞:
Task
 You are given three integers l, d and x. Your task is:
‚Ä¢ determine the minimal integer n 
    such that l ‚â§ n ‚â§ d, and the sum of its digits equals x.
‚Ä¢ determine the maximal integer m 
    such that l ‚â§ m ‚â§ d, and the sum of its digits equals x.

It is guaranteed that such numbers always exist.
Input/Output

[input] integer l

[input] integer d


 1 ‚â§ l ‚â§ d ‚â§ 10000.

[input] integer x

 1 ‚â§ x ‚â§ 36

[output] an integer array

  Array of two elements, where the first element is n, and the second one is m.
Example
 For l = 500, d = 505, x = 10, the output should be [505, 505].
 For l = 100, d = 200, x = 10, the output should be [109, 190].
========================================
URL: https://www.codewars.com/kata/58fa5e33a6d84c1324000207
–ó–∞–¥–∞—á–∞:
In logic, an implication (or material conditional) states that

If p is true, q should be true too.

We can express the result of any implication of two statements as a logical table:
  q T F
p
T   T F
F   T T

In this kata, we will take that further.
Given an array, assume that from first to last item in the array, each implies the next (for example, in an array of three items p, q, and r: (p -> q) -> r).  Return the boolean answer.If the array is empty, return None, null or a similar empty value.
There will be no more than 8 variables in the array, and the array will contain only boolean values.
========================================
URL: https://www.codewars.com/kata/58f671ee5522a9c33800009b
–ó–∞–¥–∞—á–∞:
In logic, an implication (or material conditional) states that

If p is true, q should be true too.

We can express the result of any implication of two statements as a logical table:
  q T F
p
T   T F
F   T T

In this kata, we will take that further.
Given an array, assume that from first to last item in the array, each implies the next (for example, in an array of three items p, q, and r: (p -> q) -> r).  Return the boolean answer.If the array is empty, return None, null or a similar empty value.
There will be no more than 8 variables in the array, and the array will contain only boolean values.
========================================
URL: https://www.codewars.com/kata/58f6f87a55d759439b000073
–ó–∞–¥–∞—á–∞:
In logic, an implication (or material conditional) states that

If p is true, q should be true too.

We can express the result of any implication of two statements as a logical table:
  q T F
p
T   T F
F   T T

In this kata, we will take that further.
Given an array, assume that from first to last item in the array, each implies the next (for example, in an array of three items p, q, and r: (p -> q) -> r).  Return the boolean answer.If the array is empty, return None, null or a similar empty value.
There will be no more than 8 variables in the array, and the array will contain only boolean values.
========================================
URL: https://www.codewars.com/kata/58fa273ca6d84c158e000052
–ó–∞–¥–∞—á–∞:
In logic, an implication (or material conditional) states that

If p is true, q should be true too.

We can express the result of any implication of two statements as a logical table:
  q T F
p
T   T F
F   T T

In this kata, we will take that further.
Given an array, assume that from first to last item in the array, each implies the next (for example, in an array of three items p, q, and r: (p -> q) -> r).  Return the boolean answer.If the array is empty, return None, null or a similar empty value.
There will be no more than 8 variables in the array, and the array will contain only boolean values.
========================================
URL: https://www.codewars.com/kata/58f8b35fda19c0c79400020f
–ó–∞–¥–∞—á–∞:
In logic, an implication (or material conditional) states that

If p is true, q should be true too.

We can express the result of any implication of two statements as a logical table:
  q T F
p
T   T F
F   T T

In this kata, we will take that further.
Given an array, assume that from first to last item in the array, each implies the next (for example, in an array of three items p, q, and r: (p -> q) -> r).  Return the boolean answer.If the array is empty, return None, null or a similar empty value.
There will be no more than 8 variables in the array, and the array will contain only boolean values.
========================================
URL: https://www.codewars.com/kata/58f6024e1e26ec376900004f
–ó–∞–¥–∞—á–∞:
Odd bits are getting ready for 
Bits Battles.
Therefore the n bits march from right to left along an 8 bits path. Once the most-significant bit reaches the left their march is done. Each step will be saved as an array of 8 integers.
Return an array of all the steps.
1 <= n <= 8
NOTE:
n != 0, because n represents the number of 1s.
Examples
This resembles a simple 8 LED chaser:
n = 3

00000111
00001110
00011100
00111000
01110000
11100000

n = 7

01111111
11111110
========================================
URL: https://www.codewars.com/kata/58f625e20290fb29c3000056
–ó–∞–¥–∞—á–∞:
Odd bits are getting ready for 
Bits Battles.
Therefore the n bits march from right to left along an 8 bits path. Once the most-significant bit reaches the left their march is done. Each step will be saved as an array of 8 integers.
Return an array of all the steps.
1 <= n <= 8
NOTE:
n != 0, because n represents the number of 1s.
Examples
This resembles a simple 8 LED chaser:
n = 3

00000111
00001110
00011100
00111000
01110000
11100000

n = 7

01111111
11111110
========================================
URL: https://www.codewars.com/kata/58ef87dc4db9b24c6c000092
–ó–∞–¥–∞—á–∞:
Odd bits are getting ready for 
Bits Battles.
Therefore the n bits march from right to left along an 8 bits path. Once the most-significant bit reaches the left their march is done. Each step will be saved as an array of 8 integers.
Return an array of all the steps.
1 <= n <= 8
NOTE:
n != 0, because n represents the number of 1s.
Examples
This resembles a simple 8 LED chaser:
n = 3

00000111
00001110
00011100
00111000
01110000
11100000

n = 7

01111111
11111110
========================================
URL: https://www.codewars.com/kata/58f0ba42e89aa6158400000e
–ó–∞–¥–∞—á–∞:
Odd bits are getting ready for 
Bits Battles.
Therefore the n bits march from right to left along an 8 bits path. Once the most-significant bit reaches the left their march is done. Each step will be saved as an array of 8 integers.
Return an array of all the steps.
1 <= n <= 8
NOTE:
n != 0, because n represents the number of 1s.
Examples
This resembles a simple 8 LED chaser:
n = 3

00000111
00001110
00011100
00111000
01110000
11100000

n = 7

01111111
11111110
========================================
URL: https://www.codewars.com/kata/58ee4db3e479611e6f000086
–ó–∞–¥–∞—á–∞:
Odd bits are getting ready for 
Bits Battles.
Therefore the n bits march from right to left along an 8 bits path. Once the most-significant bit reaches the left their march is done. Each step will be saved as an array of 8 integers.
Return an array of all the steps.
1 <= n <= 8
NOTE:
n != 0, because n represents the number of 1s.
Examples
This resembles a simple 8 LED chaser:
n = 3

00000111
00001110
00011100
00111000
01110000
11100000

n = 7

01111111
11111110
========================================
URL: https://www.codewars.com/kata/58e953ace87e856a97000046
–ó–∞–¥–∞—á–∞:
Hi guys, welcome to introduction to DocTesting.
The kata is composed of two parts; in part (1) we write three small functions, and in part (2) we write a few doc tests for those functions.
Lets talk about the functions first...
The reverse_list function takes a list and returns the reverse of it.
If given an empty list, simply return an empty list.

The second function...
The sum_list function takes a list as input and adds up all the values, 
returning an integer. If the list is empty, return 0.

The third function...
The head_of_list function simply returns the first item in the list.
If the list is empty return None.

Each of these functions can be easily written with a single line of code; there are some tests for correctness but no tests for effciency.
Once you have implemented all three of these functions you can move onto phase two, which is writing doc tests. If you haven't written doc tests before then I suggest you check out the following documentation: 
https://docs.python.org/3/library/doctest.html
To complete this kata all you have to do is write EXACTLY TWO doc tests for each of the three functions (any more/less than that and you will fail the tests).
Here is an example:
def double(y):
  """Function returns y * 2
  >>> double(2)
  4
  """
  return y * 2

In the example above we have a function called 'double' and a single doctest. When we run the doctest module Python will check if double(2) equals 4. If it does not, then the doctest module will flag up an error.
Please note that this is intended as a beginners introduction to docstrings, if you try to do something clever (such as writing doc tests to catch exceptions, or tinkering with the 'option flags'), you will probably fail a test or two. This is due to how the tests are written.  
Oh and one last thing, don't try and get too 'cheeky' and try something like:
"""
>>> True
True
"""

such a solution is (a) not in the spirit of things and (b) I got tests for that! :p
Good Luck!

1) In addition to the 'don't get too clever rule', please try to be precise when making your doctests; [1,2] may fail where [1, 2] may succeed. Likewise, ">>>function(x)" may fail where ">>> function(x)" is likely to suceed *(note the difference is single " " character)*. In short, if you fail a test the first thing to check is that you dont have any unecessary characters/spaces and/or odd formating.

2) As you shall see from the kata discussion testing for None is tricky and lots of people are struggling to get None tests working. So I'm going to quickly show you a way to test for not that will (should) pass the kata:
  
    def is_string(string):
          """
          returns the string if the string is Not empty, otherwise returns None
          >>> is_string("") is None
          True
          """
          return string if string else None

3) If you happen to be struggling to actually complete the three functions in the first place then I would recomend you google *"Python Indexing", "Pythons sum function" and "if/else statements in Python"*.
========================================
URL: https://www.codewars.com/kata/58e93b4706db4d24ee000096
–ó–∞–¥–∞—á–∞:
Hi guys, welcome to introduction to DocTesting.
The kata is composed of two parts; in part (1) we write three small functions, and in part (2) we write a few doc tests for those functions.
Lets talk about the functions first...
The reverse_list function takes a list and returns the reverse of it.
If given an empty list, simply return an empty list.

The second function...
The sum_list function takes a list as input and adds up all the values, 
returning an integer. If the list is empty, return 0.

The third function...
The head_of_list function simply returns the first item in the list.
If the list is empty return None.

Each of these functions can be easily written with a single line of code; there are some tests for correctness but no tests for effciency.
Once you have implemented all three of these functions you can move onto phase two, which is writing doc tests. If you haven't written doc tests before then I suggest you check out the following documentation: 
https://docs.python.org/3/library/doctest.html
To complete this kata all you have to do is write EXACTLY TWO doc tests for each of the three functions (any more/less than that and you will fail the tests).
Here is an example:
def double(y):
  """Function returns y * 2
  >>> double(2)
  4
  """
  return y * 2

In the example above we have a function called 'double' and a single doctest. When we run the doctest module Python will check if double(2) equals 4. If it does not, then the doctest module will flag up an error.
Please note that this is intended as a beginners introduction to docstrings, if you try to do something clever (such as writing doc tests to catch exceptions, or tinkering with the 'option flags'), you will probably fail a test or two. This is due to how the tests are written.  
Oh and one last thing, don't try and get too 'cheeky' and try something like:
"""
>>> True
True
"""

such a solution is (a) not in the spirit of things and (b) I got tests for that! :p
Good Luck!

1) In addition to the 'don't get too clever rule', please try to be precise when making your doctests; [1,2] may fail where [1, 2] may succeed. Likewise, ">>>function(x)" may fail where ">>> function(x)" is likely to suceed *(note the difference is single " " character)*. In short, if you fail a test the first thing to check is that you dont have any unecessary characters/spaces and/or odd formating.

2) As you shall see from the kata discussion testing for None is tricky and lots of people are struggling to get None tests working. So I'm going to quickly show you a way to test for not that will (should) pass the kata:
  
    def is_string(string):
          """
          returns the string if the string is Not empty, otherwise returns None
          >>> is_string("") is None
          True
          """
          return string if string else None

3) If you happen to be struggling to actually complete the three functions in the first place then I would recomend you google *"Python Indexing", "Pythons sum function" and "if/else statements in Python"*.
========================================
URL: https://www.codewars.com/kata/58e440d8acfd3edfb2000aee
–ó–∞–¥–∞—á–∞:
Hi guys, welcome to introduction to DocTesting.
The kata is composed of two parts; in part (1) we write three small functions, and in part (2) we write a few doc tests for those functions.
Lets talk about the functions first...
The reverse_list function takes a list and returns the reverse of it.
If given an empty list, simply return an empty list.

The second function...
The sum_list function takes a list as input and adds up all the values, 
returning an integer. If the list is empty, return 0.

The third function...
The head_of_list function simply returns the first item in the list.
If the list is empty return None.

Each of these functions can be easily written with a single line of code; there are some tests for correctness but no tests for effciency.
Once you have implemented all three of these functions you can move onto phase two, which is writing doc tests. If you haven't written doc tests before then I suggest you check out the following documentation: 
https://docs.python.org/3/library/doctest.html
To complete this kata all you have to do is write EXACTLY TWO doc tests for each of the three functions (any more/less than that and you will fail the tests).
Here is an example:
def double(y):
  """Function returns y * 2
  >>> double(2)
  4
  """
  return y * 2

In the example above we have a function called 'double' and a single doctest. When we run the doctest module Python will check if double(2) equals 4. If it does not, then the doctest module will flag up an error.
Please note that this is intended as a beginners introduction to docstrings, if you try to do something clever (such as writing doc tests to catch exceptions, or tinkering with the 'option flags'), you will probably fail a test or two. This is due to how the tests are written.  
Oh and one last thing, don't try and get too 'cheeky' and try something like:
"""
>>> True
True
"""

such a solution is (a) not in the spirit of things and (b) I got tests for that! :p
Good Luck!

1) In addition to the 'don't get too clever rule', please try to be precise when making your doctests; [1,2] may fail where [1, 2] may succeed. Likewise, ">>>function(x)" may fail where ">>> function(x)" is likely to suceed *(note the difference is single " " character)*. In short, if you fail a test the first thing to check is that you dont have any unecessary characters/spaces and/or odd formating.

2) As you shall see from the kata discussion testing for None is tricky and lots of people are struggling to get None tests working. So I'm going to quickly show you a way to test for not that will (should) pass the kata:
  
    def is_string(string):
          """
          returns the string if the string is Not empty, otherwise returns None
          >>> is_string("") is None
          True
          """
          return string if string else None

3) If you happen to be struggling to actually complete the three functions in the first place then I would recomend you google *"Python Indexing", "Pythons sum function" and "if/else statements in Python"*.
========================================
URL: https://www.codewars.com/kata/58e8cad9fd89ea0c6c000258
–ó–∞–¥–∞—á–∞:
Hi guys, welcome to introduction to DocTesting.
The kata is composed of two parts; in part (1) we write three small functions, and in part (2) we write a few doc tests for those functions.
Lets talk about the functions first...
The reverse_list function takes a list and returns the reverse of it.
If given an empty list, simply return an empty list.

The second function...
The sum_list function takes a list as input and adds up all the values, 
returning an integer. If the list is empty, return 0.

The third function...
The head_of_list function simply returns the first item in the list.
If the list is empty return None.

Each of these functions can be easily written with a single line of code; there are some tests for correctness but no tests for effciency.
Once you have implemented all three of these functions you can move onto phase two, which is writing doc tests. If you haven't written doc tests before then I suggest you check out the following documentation: 
https://docs.python.org/3/library/doctest.html
To complete this kata all you have to do is write EXACTLY TWO doc tests for each of the three functions (any more/less than that and you will fail the tests).
Here is an example:
def double(y):
  """Function returns y * 2
  >>> double(2)
  4
  """
  return y * 2

In the example above we have a function called 'double' and a single doctest. When we run the doctest module Python will check if double(2) equals 4. If it does not, then the doctest module will flag up an error.
Please note that this is intended as a beginners introduction to docstrings, if you try to do something clever (such as writing doc tests to catch exceptions, or tinkering with the 'option flags'), you will probably fail a test or two. This is due to how the tests are written.  
Oh and one last thing, don't try and get too 'cheeky' and try something like:
"""
>>> True
True
"""

such a solution is (a) not in the spirit of things and (b) I got tests for that! :p
Good Luck!

1) In addition to the 'don't get too clever rule', please try to be precise when making your doctests; [1,2] may fail where [1, 2] may succeed. Likewise, ">>>function(x)" may fail where ">>> function(x)" is likely to suceed *(note the difference is single " " character)*. In short, if you fail a test the first thing to check is that you dont have any unecessary characters/spaces and/or odd formating.

2) As you shall see from the kata discussion testing for None is tricky and lots of people are struggling to get None tests working. So I'm going to quickly show you a way to test for not that will (should) pass the kata:
  
    def is_string(string):
          """
          returns the string if the string is Not empty, otherwise returns None
          >>> is_string("") is None
          True
          """
          return string if string else None

3) If you happen to be struggling to actually complete the three functions in the first place then I would recomend you google *"Python Indexing", "Pythons sum function" and "if/else statements in Python"*.
========================================
URL: https://www.codewars.com/kata/58e4033b5600a17be1000103
–ó–∞–¥–∞—á–∞:
Hi guys, welcome to introduction to DocTesting.
The kata is composed of two parts; in part (1) we write three small functions, and in part (2) we write a few doc tests for those functions.
Lets talk about the functions first...
The reverse_list function takes a list and returns the reverse of it.
If given an empty list, simply return an empty list.

The second function...
The sum_list function takes a list as input and adds up all the values, 
returning an integer. If the list is empty, return 0.

The third function...
The head_of_list function simply returns the first item in the list.
If the list is empty return None.

Each of these functions can be easily written with a single line of code; there are some tests for correctness but no tests for effciency.
Once you have implemented all three of these functions you can move onto phase two, which is writing doc tests. If you haven't written doc tests before then I suggest you check out the following documentation: 
https://docs.python.org/3/library/doctest.html
To complete this kata all you have to do is write EXACTLY TWO doc tests for each of the three functions (any more/less than that and you will fail the tests).
Here is an example:
def double(y):
  """Function returns y * 2
  >>> double(2)
  4
  """
  return y * 2

In the example above we have a function called 'double' and a single doctest. When we run the doctest module Python will check if double(2) equals 4. If it does not, then the doctest module will flag up an error.
Please note that this is intended as a beginners introduction to docstrings, if you try to do something clever (such as writing doc tests to catch exceptions, or tinkering with the 'option flags'), you will probably fail a test or two. This is due to how the tests are written.  
Oh and one last thing, don't try and get too 'cheeky' and try something like:
"""
>>> True
True
"""

such a solution is (a) not in the spirit of things and (b) I got tests for that! :p
Good Luck!

1) In addition to the 'don't get too clever rule', please try to be precise when making your doctests; [1,2] may fail where [1, 2] may succeed. Likewise, ">>>function(x)" may fail where ">>> function(x)" is likely to suceed *(note the difference is single " " character)*. In short, if you fail a test the first thing to check is that you dont have any unecessary characters/spaces and/or odd formating.

2) As you shall see from the kata discussion testing for None is tricky and lots of people are struggling to get None tests working. So I'm going to quickly show you a way to test for not that will (should) pass the kata:
  
    def is_string(string):
          """
          returns the string if the string is Not empty, otherwise returns None
          >>> is_string("") is None
          True
          """
          return string if string else None

3) If you happen to be struggling to actually complete the three functions in the first place then I would recomend you google *"Python Indexing", "Pythons sum function" and "if/else statements in Python"*.
========================================
URL: https://www.codewars.com/kata/58e3ea29a33b52c1dc0000c0
–ó–∞–¥–∞—á–∞:
Every Friday and Saturday night, farmer counts sheep coming back to his farm (sheep returned on Friday stay and don't leave).
Sheep return in groups both of the days -> You will be given two arrays with these numbers (one for Friday and one for Saturday night). Array entries are integers, equal zero or higher - in case a given array is empty, farmer did not count the sheep or got sick (we treat this as no sheep returned that night).
Farmer knows how many sheep he has in total (third parameter). You need to calculate the amount of sheep lost (not returned to the farm) after final sheep count on Saturday.
Example 1: Input: [1, 2], [3, 4], 15 --> Output: 5
Example 2: Input: [3, 1, 2], [4, 5], 21 --> Output: 6
Example 3: Input: [0], [4, 15], 31 --> Output: 12
Example 4: Input: [], [4], 15 --> Output: 11
Good luck! :-)
========================================
URL: https://www.codewars.com/kata/58e3031ce265671f6a000542
–ó–∞–¥–∞—á–∞:
Every Friday and Saturday night, farmer counts sheep coming back to his farm (sheep returned on Friday stay and don't leave).
Sheep return in groups both of the days -> You will be given two arrays with these numbers (one for Friday and one for Saturday night). Array entries are integers, equal zero or higher - in case a given array is empty, farmer did not count the sheep or got sick (we treat this as no sheep returned that night).
Farmer knows how many sheep he has in total (third parameter). You need to calculate the amount of sheep lost (not returned to the farm) after final sheep count on Saturday.
Example 1: Input: [1, 2], [3, 4], 15 --> Output: 5
Example 2: Input: [3, 1, 2], [4, 5], 21 --> Output: 6
Example 3: Input: [0], [4, 15], 31 --> Output: 12
Example 4: Input: [], [4], 15 --> Output: 11
Good luck! :-)
========================================
URL: https://www.codewars.com/kata/58e230e5e24dde0996000070
–ó–∞–¥–∞—á–∞:
Every Friday and Saturday night, farmer counts sheep coming back to his farm (sheep returned on Friday stay and don't leave).
Sheep return in groups both of the days -> You will be given two arrays with these numbers (one for Friday and one for Saturday night). Array entries are integers, equal zero or higher - in case a given array is empty, farmer did not count the sheep or got sick (we treat this as no sheep returned that night).
Farmer knows how many sheep he has in total (third parameter). You need to calculate the amount of sheep lost (not returned to the farm) after final sheep count on Saturday.
Example 1: Input: [1, 2], [3, 4], 15 --> Output: 5
Example 2: Input: [3, 1, 2], [4, 5], 21 --> Output: 6
Example 3: Input: [0], [4, 15], 31 --> Output: 12
Example 4: Input: [], [4], 15 --> Output: 11
Good luck! :-)
========================================
URL: https://www.codewars.com/kata/58e0f0bf92d04ccf0a000010
–ó–∞–¥–∞—á–∞:
Every Friday and Saturday night, farmer counts sheep coming back to his farm (sheep returned on Friday stay and don't leave).
Sheep return in groups both of the days -> You will be given two arrays with these numbers (one for Friday and one for Saturday night). Array entries are integers, equal zero or higher - in case a given array is empty, farmer did not count the sheep or got sick (we treat this as no sheep returned that night).
Farmer knows how many sheep he has in total (third parameter). You need to calculate the amount of sheep lost (not returned to the farm) after final sheep count on Saturday.
Example 1: Input: [1, 2], [3, 4], 15 --> Output: 5
Example 2: Input: [3, 1, 2], [4, 5], 21 --> Output: 6
Example 3: Input: [0], [4, 15], 31 --> Output: 12
Example 4: Input: [], [4], 15 --> Output: 11
Good luck! :-)
========================================
URL: https://www.codewars.com/kata/58e3e62f20617b6d7700120a
–ó–∞–¥–∞—á–∞:
Every Friday and Saturday night, farmer counts sheep coming back to his farm (sheep returned on Friday stay and don't leave).
Sheep return in groups both of the days -> You will be given two arrays with these numbers (one for Friday and one for Saturday night). Array entries are integers, equal zero or higher - in case a given array is empty, farmer did not count the sheep or got sick (we treat this as no sheep returned that night).
Farmer knows how many sheep he has in total (third parameter). You need to calculate the amount of sheep lost (not returned to the farm) after final sheep count on Saturday.
Example 1: Input: [1, 2], [3, 4], 15 --> Output: 5
Example 2: Input: [3, 1, 2], [4, 5], 21 --> Output: 6
Example 3: Input: [0], [4, 15], 31 --> Output: 12
Example 4: Input: [], [4], 15 --> Output: 11
Good luck! :-)
========================================
URL: https://www.codewars.com/kata/58e0cb3634a3027180000040
–ó–∞–¥–∞—á–∞:
This series of katas will introduce you to basics of doing geometry with computers.
Point objects have x, y,  and z attributes. For Haskell there are Point data types described with record syntax with fields x, y, and z.
Write a function calculating distance between Point a and Point b.
Tests round answers to 6 decimal places. Tests in Haskell will not round.
========================================
URL: https://www.codewars.com/kata/58de08d376f875dbb40000f1
–ó–∞–¥–∞—á–∞:
This series of katas will introduce you to basics of doing geometry with computers.
Point objects have x, y,  and z attributes. For Haskell there are Point data types described with record syntax with fields x, y, and z.
Write a function calculating distance between Point a and Point b.
Tests round answers to 6 decimal places. Tests in Haskell will not round.
========================================
URL: https://www.codewars.com/kata/58ddffda929dfc2cae0000a5
–ó–∞–¥–∞—á–∞:
This series of katas will introduce you to basics of doing geometry with computers.
Point objects have x, y,  and z attributes. For Haskell there are Point data types described with record syntax with fields x, y, and z.
Write a function calculating distance between Point a and Point b.
Tests round answers to 6 decimal places. Tests in Haskell will not round.
========================================
URL: https://www.codewars.com/kata/58e0bd6a79716b7fcf0013b1
–ó–∞–¥–∞—á–∞:
This series of katas will introduce you to basics of doing geometry with computers.
Point objects have x, y,  and z attributes. For Haskell there are Point data types described with record syntax with fields x, y, and z.
Write a function calculating distance between Point a and Point b.
Tests round answers to 6 decimal places. Tests in Haskell will not round.
========================================
URL: https://www.codewars.com/kata/58dceee2c9613aacb40000b9
–ó–∞–¥–∞—á–∞:
This series of katas will introduce you to basics of doing geometry with computers.
Point objects have x, y,  and z attributes. For Haskell there are Point data types described with record syntax with fields x, y, and z.
Write a function calculating distance between Point a and Point b.
Tests round answers to 6 decimal places. Tests in Haskell will not round.
========================================
URL: https://www.codewars.com/kata/58daa7617332e59593000006
–ó–∞–¥–∞—á–∞:
Story
Bear the Freelancer charges clients on the hour, but he adjusts his rate depending on how close friends he is with his clients. For close friends, he charges $25 per hour, for his other friends he charges $50, for his acquaintances his hourly rate is $100, reaching $125 for all his other clients.
Input
You‚Äôll receive a list of lists, representing all the jobs Bear the Freelancer carried out for the month. Each array within the outer list is comprised of the number of hours worked, and the proximity to the client as a string, the possible values being 'Close Friend', 'Friend', 'Acquaintance', or any other string for the rest of his clients. The recognition of those three strings ('Close Friend', 'Friend', and 'Acquaintance') should be case insensitive.
Example
[[10, 'Close Friend'], [3, 'Acquaintance'], [7, 'Lead from web'], [6, 'Friend'], [2, 'From advertisements']]

In this example, he'll be charging 10 hours at $25, 3 hours at $100, 7 hours at $125, 6 hours at $50, and 2 hours at $125, for a total of $1975.
Expected Output
The total amount of dollars Bear the Freelancer has invoiced for his work. For an empty array, return 0.
Example
1975
========================================
URL: https://www.codewars.com/kata/58d3487a643a3f6aa20000ff
–ó–∞–¥–∞—á–∞:
Story
Bear the Freelancer charges clients on the hour, but he adjusts his rate depending on how close friends he is with his clients. For close friends, he charges $25 per hour, for his other friends he charges $50, for his acquaintances his hourly rate is $100, reaching $125 for all his other clients.
Input
You‚Äôll receive a list of lists, representing all the jobs Bear the Freelancer carried out for the month. Each array within the outer list is comprised of the number of hours worked, and the proximity to the client as a string, the possible values being 'Close Friend', 'Friend', 'Acquaintance', or any other string for the rest of his clients. The recognition of those three strings ('Close Friend', 'Friend', and 'Acquaintance') should be case insensitive.
Example
[[10, 'Close Friend'], [3, 'Acquaintance'], [7, 'Lead from web'], [6, 'Friend'], [2, 'From advertisements']]

In this example, he'll be charging 10 hours at $25, 3 hours at $100, 7 hours at $125, 6 hours at $50, and 2 hours at $125, for a total of $1975.
Expected Output
The total amount of dollars Bear the Freelancer has invoiced for his work. For an empty array, return 0.
Example
1975
========================================
URL: https://www.codewars.com/kata/58da7ae9b340a2440500009c
–ó–∞–¥–∞—á–∞:
Story
Bear the Freelancer charges clients on the hour, but he adjusts his rate depending on how close friends he is with his clients. For close friends, he charges $25 per hour, for his other friends he charges $50, for his acquaintances his hourly rate is $100, reaching $125 for all his other clients.
Input
You‚Äôll receive a list of lists, representing all the jobs Bear the Freelancer carried out for the month. Each array within the outer list is comprised of the number of hours worked, and the proximity to the client as a string, the possible values being 'Close Friend', 'Friend', 'Acquaintance', or any other string for the rest of his clients. The recognition of those three strings ('Close Friend', 'Friend', and 'Acquaintance') should be case insensitive.
Example
[[10, 'Close Friend'], [3, 'Acquaintance'], [7, 'Lead from web'], [6, 'Friend'], [2, 'From advertisements']]

In this example, he'll be charging 10 hours at $25, 3 hours at $100, 7 hours at $125, 6 hours at $50, and 2 hours at $125, for a total of $1975.
Expected Output
The total amount of dollars Bear the Freelancer has invoiced for his work. For an empty array, return 0.
Example
1975
========================================
URL: https://www.codewars.com/kata/58d5e6c114286c8594000027
–ó–∞–¥–∞—á–∞:
Story
Bear the Freelancer charges clients on the hour, but he adjusts his rate depending on how close friends he is with his clients. For close friends, he charges $25 per hour, for his other friends he charges $50, for his acquaintances his hourly rate is $100, reaching $125 for all his other clients.
Input
You‚Äôll receive a list of lists, representing all the jobs Bear the Freelancer carried out for the month. Each array within the outer list is comprised of the number of hours worked, and the proximity to the client as a string, the possible values being 'Close Friend', 'Friend', 'Acquaintance', or any other string for the rest of his clients. The recognition of those three strings ('Close Friend', 'Friend', and 'Acquaintance') should be case insensitive.
Example
[[10, 'Close Friend'], [3, 'Acquaintance'], [7, 'Lead from web'], [6, 'Friend'], [2, 'From advertisements']]

In this example, he'll be charging 10 hours at $25, 3 hours at $100, 7 hours at $125, 6 hours at $50, and 2 hours at $125, for a total of $1975.
Expected Output
The total amount of dollars Bear the Freelancer has invoiced for his work. For an empty array, return 0.
Example
1975
========================================
URL: https://www.codewars.com/kata/58d5b39b1c0402c5f7002e0d
–ó–∞–¥–∞—á–∞:
Story
Bear the Freelancer charges clients on the hour, but he adjusts his rate depending on how close friends he is with his clients. For close friends, he charges $25 per hour, for his other friends he charges $50, for his acquaintances his hourly rate is $100, reaching $125 for all his other clients.
Input
You‚Äôll receive a list of lists, representing all the jobs Bear the Freelancer carried out for the month. Each array within the outer list is comprised of the number of hours worked, and the proximity to the client as a string, the possible values being 'Close Friend', 'Friend', 'Acquaintance', or any other string for the rest of his clients. The recognition of those three strings ('Close Friend', 'Friend', and 'Acquaintance') should be case insensitive.
Example
[[10, 'Close Friend'], [3, 'Acquaintance'], [7, 'Lead from web'], [6, 'Friend'], [2, 'From advertisements']]

In this example, he'll be charging 10 hours at $25, 3 hours at $100, 7 hours at $125, 6 hours at $50, and 2 hours at $125, for a total of $1975.
Expected Output
The total amount of dollars Bear the Freelancer has invoiced for his work. For an empty array, return 0.
Example
1975
========================================
URL: https://www.codewars.com/kata/58cf479f87c2e967250000e4
–ó–∞–¥–∞—á–∞:
In this exercise, you will create a function that takes an integer, i. With it you must do the following:

Find all of its multiples up to and including 100,

Then take the digit sum of each multiple (eg. 45 -> 4 + 5 = 9),

And finally, get the total sum of each new digit sum.


Note: If the digit sum of a number is more than 9 (eg. 99 -> 9 + 9 = 18) then you do NOT have to break it down further until it reaches one digit.
Example (if i is 25):
Multiples of 25 up to 100 --> [25, 50, 75, 100]
Digit sum of each multiple --> [7, 5, 12, 1]
Sum of each new digit sum --> 25
If you can, try writing it in readable code.
Edit (3/17/2017): Added random tests
========================================
URL: https://www.codewars.com/kata/58cbc48930bcf09b7a000117
–ó–∞–¥–∞—á–∞:
In this exercise, you will create a function that takes an integer, i. With it you must do the following:

Find all of its multiples up to and including 100,

Then take the digit sum of each multiple (eg. 45 -> 4 + 5 = 9),

And finally, get the total sum of each new digit sum.


Note: If the digit sum of a number is more than 9 (eg. 99 -> 9 + 9 = 18) then you do NOT have to break it down further until it reaches one digit.
Example (if i is 25):
Multiples of 25 up to 100 --> [25, 50, 75, 100]
Digit sum of each multiple --> [7, 5, 12, 1]
Sum of each new digit sum --> 25
If you can, try writing it in readable code.
Edit (3/17/2017): Added random tests
========================================
URL: https://www.codewars.com/kata/58ce8725c835848ad6000007
–ó–∞–¥–∞—á–∞:
In this exercise, you will create a function that takes an integer, i. With it you must do the following:

Find all of its multiples up to and including 100,

Then take the digit sum of each multiple (eg. 45 -> 4 + 5 = 9),

And finally, get the total sum of each new digit sum.


Note: If the digit sum of a number is more than 9 (eg. 99 -> 9 + 9 = 18) then you do NOT have to break it down further until it reaches one digit.
Example (if i is 25):
Multiples of 25 up to 100 --> [25, 50, 75, 100]
Digit sum of each multiple --> [7, 5, 12, 1]
Sum of each new digit sum --> 25
If you can, try writing it in readable code.
Edit (3/17/2017): Added random tests
========================================
URL: https://www.codewars.com/kata/58c9322bedb4235468000019
–ó–∞–¥–∞—á–∞:
In this exercise, you will create a function that takes an integer, i. With it you must do the following:

Find all of its multiples up to and including 100,

Then take the digit sum of each multiple (eg. 45 -> 4 + 5 = 9),

And finally, get the total sum of each new digit sum.


Note: If the digit sum of a number is more than 9 (eg. 99 -> 9 + 9 = 18) then you do NOT have to break it down further until it reaches one digit.
Example (if i is 25):
Multiples of 25 up to 100 --> [25, 50, 75, 100]
Digit sum of each multiple --> [7, 5, 12, 1]
Sum of each new digit sum --> 25
If you can, try writing it in readable code.
Edit (3/17/2017): Added random tests
========================================
URL: https://www.codewars.com/kata/58ca77b9c0d640ecd2000b1e
–ó–∞–¥–∞—á–∞:
In this exercise, you will create a function that takes an integer, i. With it you must do the following:

Find all of its multiples up to and including 100,

Then take the digit sum of each multiple (eg. 45 -> 4 + 5 = 9),

And finally, get the total sum of each new digit sum.


Note: If the digit sum of a number is more than 9 (eg. 99 -> 9 + 9 = 18) then you do NOT have to break it down further until it reaches one digit.
Example (if i is 25):
Multiples of 25 up to 100 --> [25, 50, 75, 100]
Digit sum of each multiple --> [7, 5, 12, 1]
Sum of each new digit sum --> 25
If you can, try writing it in readable code.
Edit (3/17/2017): Added random tests
========================================
URL: https://www.codewars.com/kata/58c8a6daa7f31a623200016a
–ó–∞–¥–∞—á–∞:
Task
 You are given a moment in time and space. What you must do is break it down into time and space, to determine if that moment is from the past, present or future.
 Time is the sum of characters that increase time (i.e. numbers in range ['1'..'9'].
 Space in the number of characters which do not increase time (i.e. all characters but those that increase time).
 The moment of time is determined as follows:
 If time is greater than space, then the moment is from the future. If time is less than space, then the moment is from the past. Otherwise, it is the present moment.
 You should return an array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
Examples
 For moment = "01:00 pm", the output should be [true, false, false].
 time equals 1, and space equals 7, so the moment is from the past.
 For moment = "12:02 pm", the output should be [false, true, false].
 time equals 5, and space equals 5, which means that it's a present moment.
 For moment = "12:30 pm", the output should be [false, false, true].
 time equals 6, space equals 5, so the moment is from the future.
Input/Output

[input] string moment

  The moment of time and space that the input time came from.

[output] a boolean array

  Array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
========================================
URL: https://www.codewars.com/kata/58c8a41bedb423240a000007
–ó–∞–¥–∞—á–∞:
Task
 You are given a moment in time and space. What you must do is break it down into time and space, to determine if that moment is from the past, present or future.
 Time is the sum of characters that increase time (i.e. numbers in range ['1'..'9'].
 Space in the number of characters which do not increase time (i.e. all characters but those that increase time).
 The moment of time is determined as follows:
 If time is greater than space, then the moment is from the future. If time is less than space, then the moment is from the past. Otherwise, it is the present moment.
 You should return an array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
Examples
 For moment = "01:00 pm", the output should be [true, false, false].
 time equals 1, and space equals 7, so the moment is from the past.
 For moment = "12:02 pm", the output should be [false, true, false].
 time equals 5, and space equals 5, which means that it's a present moment.
 For moment = "12:30 pm", the output should be [false, false, true].
 time equals 6, space equals 5, so the moment is from the future.
Input/Output

[input] string moment

  The moment of time and space that the input time came from.

[output] a boolean array

  Array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
========================================
URL: https://www.codewars.com/kata/58c21c4ff130b7cab400009e
–ó–∞–¥–∞—á–∞:
Task
 You are given a moment in time and space. What you must do is break it down into time and space, to determine if that moment is from the past, present or future.
 Time is the sum of characters that increase time (i.e. numbers in range ['1'..'9'].
 Space in the number of characters which do not increase time (i.e. all characters but those that increase time).
 The moment of time is determined as follows:
 If time is greater than space, then the moment is from the future. If time is less than space, then the moment is from the past. Otherwise, it is the present moment.
 You should return an array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
Examples
 For moment = "01:00 pm", the output should be [true, false, false].
 time equals 1, and space equals 7, so the moment is from the past.
 For moment = "12:02 pm", the output should be [false, true, false].
 time equals 5, and space equals 5, which means that it's a present moment.
 For moment = "12:30 pm", the output should be [false, false, true].
 time equals 6, space equals 5, so the moment is from the future.
Input/Output

[input] string moment

  The moment of time and space that the input time came from.

[output] a boolean array

  Array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
========================================
URL: https://www.codewars.com/kata/58c2158ec7df54a39d00015c
–ó–∞–¥–∞—á–∞:
Task
 You are given a moment in time and space. What you must do is break it down into time and space, to determine if that moment is from the past, present or future.
 Time is the sum of characters that increase time (i.e. numbers in range ['1'..'9'].
 Space in the number of characters which do not increase time (i.e. all characters but those that increase time).
 The moment of time is determined as follows:
 If time is greater than space, then the moment is from the future. If time is less than space, then the moment is from the past. Otherwise, it is the present moment.
 You should return an array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
Examples
 For moment = "01:00 pm", the output should be [true, false, false].
 time equals 1, and space equals 7, so the moment is from the past.
 For moment = "12:02 pm", the output should be [false, true, false].
 time equals 5, and space equals 5, which means that it's a present moment.
 For moment = "12:30 pm", the output should be [false, false, true].
 time equals 6, space equals 5, so the moment is from the future.
Input/Output

[input] string moment

  The moment of time and space that the input time came from.

[output] a boolean array

  Array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
========================================
URL: https://www.codewars.com/kata/58c218efd8d3cad11c0000ef
–ó–∞–¥–∞—á–∞:
Task
 You are given a moment in time and space. What you must do is break it down into time and space, to determine if that moment is from the past, present or future.
 Time is the sum of characters that increase time (i.e. numbers in range ['1'..'9'].
 Space in the number of characters which do not increase time (i.e. all characters but those that increase time).
 The moment of time is determined as follows:
 If time is greater than space, then the moment is from the future. If time is less than space, then the moment is from the past. Otherwise, it is the present moment.
 You should return an array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
Examples
 For moment = "01:00 pm", the output should be [true, false, false].
 time equals 1, and space equals 7, so the moment is from the past.
 For moment = "12:02 pm", the output should be [false, true, false].
 time equals 5, and space equals 5, which means that it's a present moment.
 For moment = "12:30 pm", the output should be [false, false, true].
 time equals 6, space equals 5, so the moment is from the future.
Input/Output

[input] string moment

  The moment of time and space that the input time came from.

[output] a boolean array

  Array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.
========================================
URL: https://www.codewars.com/kata/58bfa1ea43fadb41840000b4
–ó–∞–¥–∞—á–∞:
Task
 Let's say that "g" is happy in the given string, if there is another "g" immediately to the right or to the left of it.
 Find out if all "g"s in the given string are happy.
Example
 For str = "gg0gg3gg0gg", the output should be true.
 For str = "gog", the output should be false.
Input/Output

[input] string str

  A random string of lower case letters, numbers and spaces.

[output] a boolean value

 true if all "g"s are happy, false otherwise.
========================================
URL: https://www.codewars.com/kata/58bcd27b7288983803000002
–ó–∞–¥–∞—á–∞:
Task
 Let's say that "g" is happy in the given string, if there is another "g" immediately to the right or to the left of it.
 Find out if all "g"s in the given string are happy.
Example
 For str = "gg0gg3gg0gg", the output should be true.
 For str = "gog", the output should be false.
Input/Output

[input] string str

  A random string of lower case letters, numbers and spaces.

[output] a boolean value

 true if all "g"s are happy, false otherwise.
========================================
URL: https://www.codewars.com/kata/58bf72b02d1c7c18d9000127
–ó–∞–¥–∞—á–∞:
Task
 Let's say that "g" is happy in the given string, if there is another "g" immediately to the right or to the left of it.
 Find out if all "g"s in the given string are happy.
Example
 For str = "gg0gg3gg0gg", the output should be true.
 For str = "gog", the output should be false.
Input/Output

[input] string str

  A random string of lower case letters, numbers and spaces.

[output] a boolean value

 true if all "g"s are happy, false otherwise.
========================================
URL: https://www.codewars.com/kata/58bf97cde4a5edfd4f00008d
–ó–∞–¥–∞—á–∞:
Task
 Let's say that "g" is happy in the given string, if there is another "g" immediately to the right or to the left of it.
 Find out if all "g"s in the given string are happy.
Example
 For str = "gg0gg3gg0gg", the output should be true.
 For str = "gog", the output should be false.
Input/Output

[input] string str

  A random string of lower case letters, numbers and spaces.

[output] a boolean value

 true if all "g"s are happy, false otherwise.
========================================
URL: https://www.codewars.com/kata/58bcdc65f6d3b11fce000045
–ó–∞–¥–∞—á–∞:
Task
 Let's say that "g" is happy in the given string, if there is another "g" immediately to the right or to the left of it.
 Find out if all "g"s in the given string are happy.
Example
 For str = "gg0gg3gg0gg", the output should be true.
 For str = "gog", the output should be false.
Input/Output

[input] string str

  A random string of lower case letters, numbers and spaces.

[output] a boolean value

 true if all "g"s are happy, false otherwise.
========================================
URL: https://www.codewars.com/kata/58bccdf56f25ff6b6d00002f
–ó–∞–¥–∞—á–∞:
Task
 Given a string str, reverse it and omit all non-alphabetic characters.
Example
 For str = "krishan", the output should be "nahsirk".
 For str = "ultr53o?n", the output should be "nortlu".
Input/Output

[input] string str

  A string consists of lowercase latin letters, digits and symbols.

[output] a string
========================================
URL: https://www.codewars.com/kata/58b972cae826b960a300003e
–ó–∞–¥–∞—á–∞:
Task
 Given a string str, reverse it and omit all non-alphabetic characters.
Example
 For str = "krishan", the output should be "nahsirk".
 For str = "ultr53o?n", the output should be "nortlu".
Input/Output

[input] string str

  A string consists of lowercase latin letters, digits and symbols.

[output] a string
========================================
URL: https://www.codewars.com/kata/58b8db810f40ea7788000126
–ó–∞–¥–∞—á–∞:
Task
 Given a string str, reverse it and omit all non-alphabetic characters.
Example
 For str = "krishan", the output should be "nahsirk".
 For str = "ultr53o?n", the output should be "nortlu".
Input/Output

[input] string str

  A string consists of lowercase latin letters, digits and symbols.

[output] a string
========================================
URL: https://www.codewars.com/kata/58b8c94b7df3f116eb00005b
–ó–∞–¥–∞—á–∞:
Task
 Given a string str, reverse it and omit all non-alphabetic characters.
Example
 For str = "krishan", the output should be "nahsirk".
 For str = "ultr53o?n", the output should be "nortlu".
Input/Output

[input] string str

  A string consists of lowercase latin letters, digits and symbols.

[output] a string
========================================
URL: https://www.codewars.com/kata/58b8cc7e8e7121740700002d
–ó–∞–¥–∞—á–∞:
Task
 Given a string str, reverse it and omit all non-alphabetic characters.
Example
 For str = "krishan", the output should be "nahsirk".
 For str = "ultr53o?n", the output should be "nortlu".
Input/Output

[input] string str

  A string consists of lowercase latin letters, digits and symbols.

[output] a string
========================================
URL: https://www.codewars.com/kata/58b6c403a38abaaf6c00006b
–ó–∞–¥–∞—á–∞:
Task
Given some sticks by an array V of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.
Example
 For V = [2, 3, 7, 4], the result should be 1.
 There is only (2, 3, 4) can form a triangle.
 For V = [5, 6, 7, 8], the result should be 4.
 (5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8) 
Input/Output

[input] integer array V

 stick lengths
 3 <= V.length <= 100
 0 < V[i] <=100

[output] an integer

 number of ways we can choose 3 sticks to form a triangle.
========================================
URL: https://www.codewars.com/kata/58b635903e78b34958000056
–ó–∞–¥–∞—á–∞:
Task
Given some sticks by an array V of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.
Example
 For V = [2, 3, 7, 4], the result should be 1.
 There is only (2, 3, 4) can form a triangle.
 For V = [5, 6, 7, 8], the result should be 4.
 (5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8) 
Input/Output

[input] integer array V

 stick lengths
 3 <= V.length <= 100
 0 < V[i] <=100

[output] an integer

 number of ways we can choose 3 sticks to form a triangle.
========================================
URL: https://www.codewars.com/kata/58b42c98f4cdd62f45000c6e
–ó–∞–¥–∞—á–∞:
Task
Given some sticks by an array V of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.
Example
 For V = [2, 3, 7, 4], the result should be 1.
 There is only (2, 3, 4) can form a triangle.
 For V = [5, 6, 7, 8], the result should be 4.
 (5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8) 
Input/Output

[input] integer array V

 stick lengths
 3 <= V.length <= 100
 0 < V[i] <=100

[output] an integer

 number of ways we can choose 3 sticks to form a triangle.
========================================
URL: https://www.codewars.com/kata/58aed2cafab8faca1d000e20
–ó–∞–¥–∞—á–∞:
Task
Given some sticks by an array V of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.
Example
 For V = [2, 3, 7, 4], the result should be 1.
 There is only (2, 3, 4) can form a triangle.
 For V = [5, 6, 7, 8], the result should be 4.
 (5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8) 
Input/Output

[input] integer array V

 stick lengths
 3 <= V.length <= 100
 0 < V[i] <=100

[output] an integer

 number of ways we can choose 3 sticks to form a triangle.
========================================
URL: https://www.codewars.com/kata/58ad29bc4b852b14a4000050
–ó–∞–¥–∞—á–∞:
Task
Given some sticks by an array V of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.
Example
 For V = [2, 3, 7, 4], the result should be 1.
 There is only (2, 3, 4) can form a triangle.
 For V = [5, 6, 7, 8], the result should be 4.
 (5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8) 
Input/Output

[input] integer array V

 stick lengths
 3 <= V.length <= 100
 0 < V[i] <=100

[output] an integer

 number of ways we can choose 3 sticks to form a triangle.
========================================
URL: https://www.codewars.com/kata/58ad09d6154165a1c80000d1
–ó–∞–¥–∞—á–∞:
Task
After a long night (work, play, study) you find yourself sleeping on a bench in a park. As you wake up and try to figure out what happened you start counting trees.
You notice there are different tree sizes but there's always one size which is unbalanced. For example there are 2 size 2, 2 size 1 and 1 size 3. (then the size 3 is unbalanced)
Given an array representing different tree sizes. Which one is the unbalanced size.
Notes
There can be any number of sizes but one is always unbalanced
The unbalanced size is always one less than the other sizes
The array is not ordered (nor the trees)

Examples
For trees = [1,1,2,2,3], the result should be 3.
For trees = [2,2,2,56,56,56,8,8], the result should be 8.
For trees = [34,76,12,99,64,99,76,12,34], the result should be 64.
Input/Output

[input] integer array trees
Array representing different tree sizes

[output] an integer
The size of the missing tree.
========================================
URL: https://www.codewars.com/kata/58ac59d21c9e1d7dc5000150
–ó–∞–¥–∞—á–∞:
Task
After a long night (work, play, study) you find yourself sleeping on a bench in a park. As you wake up and try to figure out what happened you start counting trees.
You notice there are different tree sizes but there's always one size which is unbalanced. For example there are 2 size 2, 2 size 1 and 1 size 3. (then the size 3 is unbalanced)
Given an array representing different tree sizes. Which one is the unbalanced size.
Notes
There can be any number of sizes but one is always unbalanced
The unbalanced size is always one less than the other sizes
The array is not ordered (nor the trees)

Examples
For trees = [1,1,2,2,3], the result should be 3.
For trees = [2,2,2,56,56,56,8,8], the result should be 8.
For trees = [34,76,12,99,64,99,76,12,34], the result should be 64.
Input/Output

[input] integer array trees
Array representing different tree sizes

[output] an integer
The size of the missing tree.
========================================
URL: https://www.codewars.com/kata/58acfe4ae0201e1708000075
–ó–∞–¥–∞—á–∞:
Task
After a long night (work, play, study) you find yourself sleeping on a bench in a park. As you wake up and try to figure out what happened you start counting trees.
You notice there are different tree sizes but there's always one size which is unbalanced. For example there are 2 size 2, 2 size 1 and 1 size 3. (then the size 3 is unbalanced)
Given an array representing different tree sizes. Which one is the unbalanced size.
Notes
There can be any number of sizes but one is always unbalanced
The unbalanced size is always one less than the other sizes
The array is not ordered (nor the trees)

Examples
For trees = [1,1,2,2,3], the result should be 3.
For trees = [2,2,2,56,56,56,8,8], the result should be 8.
For trees = [34,76,12,99,64,99,76,12,34], the result should be 64.
Input/Output

[input] integer array trees
Array representing different tree sizes

[output] an integer
The size of the missing tree.
========================================
URL: https://www.codewars.com/kata/58aa9662c55ffbdceb000101
–ó–∞–¥–∞—á–∞:
Task
After a long night (work, play, study) you find yourself sleeping on a bench in a park. As you wake up and try to figure out what happened you start counting trees.
You notice there are different tree sizes but there's always one size which is unbalanced. For example there are 2 size 2, 2 size 1 and 1 size 3. (then the size 3 is unbalanced)
Given an array representing different tree sizes. Which one is the unbalanced size.
Notes
There can be any number of sizes but one is always unbalanced
The unbalanced size is always one less than the other sizes
The array is not ordered (nor the trees)

Examples
For trees = [1,1,2,2,3], the result should be 3.
For trees = [2,2,2,56,56,56,8,8], the result should be 8.
For trees = [34,76,12,99,64,99,76,12,34], the result should be 64.
Input/Output

[input] integer array trees
Array representing different tree sizes

[output] an integer
The size of the missing tree.
========================================
URL: https://www.codewars.com/kata/58aa8698ae929e1c830001c7
–ó–∞–¥–∞—á–∞:
Task
After a long night (work, play, study) you find yourself sleeping on a bench in a park. As you wake up and try to figure out what happened you start counting trees.
You notice there are different tree sizes but there's always one size which is unbalanced. For example there are 2 size 2, 2 size 1 and 1 size 3. (then the size 3 is unbalanced)
Given an array representing different tree sizes. Which one is the unbalanced size.
Notes
There can be any number of sizes but one is always unbalanced
The unbalanced size is always one less than the other sizes
The array is not ordered (nor the trees)

Examples
For trees = [1,1,2,2,3], the result should be 3.
For trees = [2,2,2,56,56,56,8,8], the result should be 8.
For trees = [34,76,12,99,64,99,76,12,34], the result should be 64.
Input/Output

[input] integer array trees
Array representing different tree sizes

[output] an integer
The size of the missing tree.
========================================
URL: https://www.codewars.com/kata/58aa68605aab54a26c0001a6
–ó–∞–¥–∞—á–∞:
Task
 You are given a sequence of positive ints where every element appears three times, except one that appears only once (let's call it x) and one that appears only twice (let's call it y).
 Your task is to find x * x * y.
Example
 For arr=[1, 1, 1, 2, 2, 3], the result should be 18
 3 x 3 x 2 = 18
 For arr=[6, 5, 4, 100, 6, 5, 4, 100, 6, 5, 4, 200], the result should be 4000000
 200 x 200 x 100 = 4000000
Input/Output

[input] integer array arr

  an array contains positive integers.

[output] an integer

 The value of x * x * y
========================================
URL: https://www.codewars.com/kata/58aa7f18821a769a7d000190
–ó–∞–¥–∞—á–∞:
Task
 You are given a sequence of positive ints where every element appears three times, except one that appears only once (let's call it x) and one that appears only twice (let's call it y).
 Your task is to find x * x * y.
Example
 For arr=[1, 1, 1, 2, 2, 3], the result should be 18
 3 x 3 x 2 = 18
 For arr=[6, 5, 4, 100, 6, 5, 4, 100, 6, 5, 4, 200], the result should be 4000000
 200 x 200 x 100 = 4000000
Input/Output

[input] integer array arr

  an array contains positive integers.

[output] an integer

 The value of x * x * y
========================================
URL: https://www.codewars.com/kata/58a6841442fd72aeb4000080
–ó–∞–¥–∞—á–∞:
Task
 You are given a sequence of positive ints where every element appears three times, except one that appears only once (let's call it x) and one that appears only twice (let's call it y).
 Your task is to find x * x * y.
Example
 For arr=[1, 1, 1, 2, 2, 3], the result should be 18
 3 x 3 x 2 = 18
 For arr=[6, 5, 4, 100, 6, 5, 4, 100, 6, 5, 4, 200], the result should be 4000000
 200 x 200 x 100 = 4000000
Input/Output

[input] integer array arr

  an array contains positive integers.

[output] an integer

 The value of x * x * y
========================================
URL: https://www.codewars.com/kata/58a6742c14b042a042000038
–ó–∞–¥–∞—á–∞:
Task
 You are given a sequence of positive ints where every element appears three times, except one that appears only once (let's call it x) and one that appears only twice (let's call it y).
 Your task is to find x * x * y.
Example
 For arr=[1, 1, 1, 2, 2, 3], the result should be 18
 3 x 3 x 2 = 18
 For arr=[6, 5, 4, 100, 6, 5, 4, 100, 6, 5, 4, 200], the result should be 4000000
 200 x 200 x 100 = 4000000
Input/Output

[input] integer array arr

  an array contains positive integers.

[output] an integer

 The value of x * x * y
========================================
URL: https://www.codewars.com/kata/58a66c208b88b2de660000c3
–ó–∞–¥–∞—á–∞:
Task
 You are given a sequence of positive ints where every element appears three times, except one that appears only once (let's call it x) and one that appears only twice (let's call it y).
 Your task is to find x * x * y.
Example
 For arr=[1, 1, 1, 2, 2, 3], the result should be 18
 3 x 3 x 2 = 18
 For arr=[6, 5, 4, 100, 6, 5, 4, 100, 6, 5, 4, 200], the result should be 4000000
 200 x 200 x 100 = 4000000
Input/Output

[input] integer array arr

  an array contains positive integers.

[output] an integer

 The value of x * x * y
========================================
URL: https://www.codewars.com/kata/58a651ff27f95429f80000d0
–ó–∞–¥–∞—á–∞:
Every day we can send from the server a certain limit of e-mails.
Task:
Write a function that will return the integer number of e-mails sent in the percentage of the limit.
Example:
limit       - 1000;
emails sent - 101;
return      - 10%; // because integer from 10,1 = 10

Arguments:

sent: number of e-mails sent today (integer)
limit: number of e-mails you can send today (integer)

When:

the argument sent = 0, then return the message: "No e-mails sent";
the argument sent >= limit, then return the message: "Daily limit is reached";
the argument limit is empty, then default limit = 1000 emails;

Good luck!
========================================
URL: https://www.codewars.com/kata/58a5aeb893b79949eb0000f1
–ó–∞–¥–∞—á–∞:
Every day we can send from the server a certain limit of e-mails.
Task:
Write a function that will return the integer number of e-mails sent in the percentage of the limit.
Example:
limit       - 1000;
emails sent - 101;
return      - 10%; // because integer from 10,1 = 10

Arguments:

sent: number of e-mails sent today (integer)
limit: number of e-mails you can send today (integer)

When:

the argument sent = 0, then return the message: "No e-mails sent";
the argument sent >= limit, then return the message: "Daily limit is reached";
the argument limit is empty, then default limit = 1000 emails;

Good luck!
========================================
URL: https://www.codewars.com/kata/58a3c1f12f949e21b300005c
–ó–∞–¥–∞—á–∞:
Every day we can send from the server a certain limit of e-mails.
Task:
Write a function that will return the integer number of e-mails sent in the percentage of the limit.
Example:
limit       - 1000;
emails sent - 101;
return      - 10%; // because integer from 10,1 = 10

Arguments:

sent: number of e-mails sent today (integer)
limit: number of e-mails you can send today (integer)

When:

the argument sent = 0, then return the message: "No e-mails sent";
the argument sent >= limit, then return the message: "Daily limit is reached";
the argument limit is empty, then default limit = 1000 emails;

Good luck!
========================================
URL: https://www.codewars.com/kata/58a369fa5b3daf464200006c
–ó–∞–¥–∞—á–∞:
Every day we can send from the server a certain limit of e-mails.
Task:
Write a function that will return the integer number of e-mails sent in the percentage of the limit.
Example:
limit       - 1000;
emails sent - 101;
return      - 10%; // because integer from 10,1 = 10

Arguments:

sent: number of e-mails sent today (integer)
limit: number of e-mails you can send today (integer)

When:

the argument sent = 0, then return the message: "No e-mails sent";
the argument sent >= limit, then return the message: "Daily limit is reached";
the argument limit is empty, then default limit = 1000 emails;

Good luck!
========================================
URL: https://www.codewars.com/kata/58a3f57ecebc06bfcb00009c
–ó–∞–¥–∞—á–∞:
Every day we can send from the server a certain limit of e-mails.
Task:
Write a function that will return the integer number of e-mails sent in the percentage of the limit.
Example:
limit       - 1000;
emails sent - 101;
return      - 10%; // because integer from 10,1 = 10

Arguments:

sent: number of e-mails sent today (integer)
limit: number of e-mails you can send today (integer)

When:

the argument sent = 0, then return the message: "No e-mails sent";
the argument sent >= limit, then return the message: "Daily limit is reached";
the argument limit is empty, then default limit = 1000 emails;

Good luck!
========================================
URL: https://www.codewars.com/kata/58a30be22d5b6ca8d9000012
–ó–∞–¥–∞—á–∞:
Task
 Initially a number 1 is written on a board. It is possible to do the following operations with it:
 multiply the number by 3; increase the number by 5.
Your task is to determine that using this two operations step by step, is it possible to obtain number n?
Example
 For n = 1, the result should be true.
 1 = 1
 For n = 2, the result should be false.
 For n = 3, the result should be true.
 1 x 3 = 3
 For n = 4, the result should be false.
 For n = 5, the result should be false.
 For n = 6, the result should be true.
 1 + 5 = 6
 For n = 18, the result should be true.
 1 + 5 = 6  --> 6 x 3 = 18
 For n = 32, the result should be true.
 1 x 3 x 3 x 3 = 27  --> 27 + 5 = 32
 For n = 100, the result should be false.
 For n = 101, the result should be true.
 1 + 5 + 5 + 5 ... +5 = 101
Input / Output

[input] integer n

  positive integer, n ‚â§ 100000

[output] a boolean value

 true if N can be obtained using given operations, false otherwise.
========================================
URL: https://www.codewars.com/kata/589d1e88e8afb7a85e00004e
–ó–∞–¥–∞—á–∞:
Task
 Initially a number 1 is written on a board. It is possible to do the following operations with it:
 multiply the number by 3; increase the number by 5.
Your task is to determine that using this two operations step by step, is it possible to obtain number n?
Example
 For n = 1, the result should be true.
 1 = 1
 For n = 2, the result should be false.
 For n = 3, the result should be true.
 1 x 3 = 3
 For n = 4, the result should be false.
 For n = 5, the result should be false.
 For n = 6, the result should be true.
 1 + 5 = 6
 For n = 18, the result should be true.
 1 + 5 = 6  --> 6 x 3 = 18
 For n = 32, the result should be true.
 1 x 3 x 3 x 3 = 27  --> 27 + 5 = 32
 For n = 100, the result should be false.
 For n = 101, the result should be true.
 1 + 5 + 5 + 5 ... +5 = 101
Input / Output

[input] integer n

  positive integer, n ‚â§ 100000

[output] a boolean value

 true if N can be obtained using given operations, false otherwise.
========================================
URL: https://www.codewars.com/kata/589ebcb9926baae92e000001
–ó–∞–¥–∞—á–∞:
Task
 Initially a number 1 is written on a board. It is possible to do the following operations with it:
 multiply the number by 3; increase the number by 5.
Your task is to determine that using this two operations step by step, is it possible to obtain number n?
Example
 For n = 1, the result should be true.
 1 = 1
 For n = 2, the result should be false.
 For n = 3, the result should be true.
 1 x 3 = 3
 For n = 4, the result should be false.
 For n = 5, the result should be false.
 For n = 6, the result should be true.
 1 + 5 = 6
 For n = 18, the result should be true.
 1 + 5 = 6  --> 6 x 3 = 18
 For n = 32, the result should be true.
 1 x 3 x 3 x 3 = 27  --> 27 + 5 = 32
 For n = 100, the result should be false.
 For n = 101, the result should be true.
 1 + 5 + 5 + 5 ... +5 = 101
Input / Output

[input] integer n

  positive integer, n ‚â§ 100000

[output] a boolean value

 true if N can be obtained using given operations, false otherwise.
========================================
URL: https://www.codewars.com/kata/589d237fdfdef0239a00002e
–ó–∞–¥–∞—á–∞:
Task
 Initially a number 1 is written on a board. It is possible to do the following operations with it:
 multiply the number by 3; increase the number by 5.
Your task is to determine that using this two operations step by step, is it possible to obtain number n?
Example
 For n = 1, the result should be true.
 1 = 1
 For n = 2, the result should be false.
 For n = 3, the result should be true.
 1 x 3 = 3
 For n = 4, the result should be false.
 For n = 5, the result should be false.
 For n = 6, the result should be true.
 1 + 5 = 6
 For n = 18, the result should be true.
 1 + 5 = 6  --> 6 x 3 = 18
 For n = 32, the result should be true.
 1 x 3 x 3 x 3 = 27  --> 27 + 5 = 32
 For n = 100, the result should be false.
 For n = 101, the result should be true.
 1 + 5 + 5 + 5 ... +5 = 101
Input / Output

[input] integer n

  positive integer, n ‚â§ 100000

[output] a boolean value

 true if N can be obtained using given operations, false otherwise.
========================================
URL: https://www.codewars.com/kata/58a08e622e7fb654a300000e
–ó–∞–¥–∞—á–∞:
Task
 Initially a number 1 is written on a board. It is possible to do the following operations with it:
 multiply the number by 3; increase the number by 5.
Your task is to determine that using this two operations step by step, is it possible to obtain number n?
Example
 For n = 1, the result should be true.
 1 = 1
 For n = 2, the result should be false.
 For n = 3, the result should be true.
 1 x 3 = 3
 For n = 4, the result should be false.
 For n = 5, the result should be false.
 For n = 6, the result should be true.
 1 + 5 = 6
 For n = 18, the result should be true.
 1 + 5 = 6  --> 6 x 3 = 18
 For n = 32, the result should be true.
 1 x 3 x 3 x 3 = 27  --> 27 + 5 = 32
 For n = 100, the result should be false.
 For n = 101, the result should be true.
 1 + 5 + 5 + 5 ... +5 = 101
Input / Output

[input] integer n

  positive integer, n ‚â§ 100000

[output] a boolean value

 true if N can be obtained using given operations, false otherwise.
========================================
URL: https://www.codewars.com/kata/589b1c15081bcbfe6700017a
–ó–∞–¥–∞—á–∞:
Task
 Imagine n horizontal lines and m vertical lines.
 Some of these lines intersect, creating rectangles.
 How many rectangles are there?
Examples
 For n=2, m=2, the result should be 1.
 there is only one 1x1 rectangle.
 For n=2, m=3, the result should be 3.
 there are two 1x1 rectangles and one 1x2 rectangle. So 2 + 1 = 3.
 For n=3, m=3, the result should be 9.
 there are four 1x1 rectangles, two 1x2 rectangles, two 2x1 rectangles and one 2x2 rectangle. So 4 + 2 + 2 + 1 = 9.
Input & Output

[input] integer n
 Number of horizontal lines.
 Constraints: 0 <= n <= 100

[input] integer m
 Number of vertical lines.
 Constraints: 0 <= m <= 100

[output] an integer
 Number of rectangles.
========================================
URL: https://www.codewars.com/kata/589a8d9b729e7abd9a0000ed
–ó–∞–¥–∞—á–∞:
Task
 Imagine n horizontal lines and m vertical lines.
 Some of these lines intersect, creating rectangles.
 How many rectangles are there?
Examples
 For n=2, m=2, the result should be 1.
 there is only one 1x1 rectangle.
 For n=2, m=3, the result should be 3.
 there are two 1x1 rectangles and one 1x2 rectangle. So 2 + 1 = 3.
 For n=3, m=3, the result should be 9.
 there are four 1x1 rectangles, two 1x2 rectangles, two 2x1 rectangles and one 2x2 rectangle. So 4 + 2 + 2 + 1 = 9.
Input & Output

[input] integer n
 Number of horizontal lines.
 Constraints: 0 <= n <= 100

[input] integer m
 Number of vertical lines.
 Constraints: 0 <= m <= 100

[output] an integer
 Number of rectangles.
========================================
URL: https://www.codewars.com/kata/589ac16a0cccbff11d000115
–ó–∞–¥–∞—á–∞:
Task
 Imagine n horizontal lines and m vertical lines.
 Some of these lines intersect, creating rectangles.
 How many rectangles are there?
Examples
 For n=2, m=2, the result should be 1.
 there is only one 1x1 rectangle.
 For n=2, m=3, the result should be 3.
 there are two 1x1 rectangles and one 1x2 rectangle. So 2 + 1 = 3.
 For n=3, m=3, the result should be 9.
 there are four 1x1 rectangles, two 1x2 rectangles, two 2x1 rectangles and one 2x2 rectangle. So 4 + 2 + 2 + 1 = 9.
Input & Output

[input] integer n
 Number of horizontal lines.
 Constraints: 0 <= n <= 100

[input] integer m
 Number of vertical lines.
 Constraints: 0 <= m <= 100

[output] an integer
 Number of rectangles.
========================================
URL: https://www.codewars.com/kata/589a9792ea93aae1bf00001c
–ó–∞–¥–∞—á–∞:
Task
 Imagine n horizontal lines and m vertical lines.
 Some of these lines intersect, creating rectangles.
 How many rectangles are there?
Examples
 For n=2, m=2, the result should be 1.
 there is only one 1x1 rectangle.
 For n=2, m=3, the result should be 3.
 there are two 1x1 rectangles and one 1x2 rectangle. So 2 + 1 = 3.
 For n=3, m=3, the result should be 9.
 there are four 1x1 rectangles, two 1x2 rectangles, two 2x1 rectangles and one 2x2 rectangle. So 4 + 2 + 2 + 1 = 9.
Input & Output

[input] integer n
 Number of horizontal lines.
 Constraints: 0 <= n <= 100

[input] integer m
 Number of vertical lines.
 Constraints: 0 <= m <= 100

[output] an integer
 Number of rectangles.
========================================
URL: https://www.codewars.com/kata/589b137753a9a4ab5700009a
–ó–∞–¥–∞—á–∞:
Task
 Imagine n horizontal lines and m vertical lines.
 Some of these lines intersect, creating rectangles.
 How many rectangles are there?
Examples
 For n=2, m=2, the result should be 1.
 there is only one 1x1 rectangle.
 For n=2, m=3, the result should be 3.
 there are two 1x1 rectangles and one 1x2 rectangle. So 2 + 1 = 3.
 For n=3, m=3, the result should be 9.
 there are four 1x1 rectangles, two 1x2 rectangles, two 2x1 rectangles and one 2x2 rectangle. So 4 + 2 + 2 + 1 = 9.
Input & Output

[input] integer n
 Number of horizontal lines.
 Constraints: 0 <= n <= 100

[input] integer m
 Number of vertical lines.
 Constraints: 0 <= m <= 100

[output] an integer
 Number of rectangles.
========================================
URL: https://www.codewars.com/kata/5899e054aa1498da6b0000cc
–ó–∞–¥–∞—á–∞:
This kata honors a recurring troupe of many online games.The origin of this tradition can be traced to the classic Black Isle pc game Baldur's Gate. The very first quest requires you to kill 10 rats. One rather humble start for what later becomes a epic adventure. Honor awaits!
Its intended to be a easy but entertaining exercise on classes and conditions.
You must instantiate and interact with a World() object. On this kata the following methods are available:  
talk(target, what): Interact with npcs. The only valid npc on this kata has the name "npc".pickup(what): Pickup a thing to throw. Default is "rock".throw(target): If you are holding a thing, throw it at a target. The throw may miss. Will return True if hit, False if missed.  
Ex.:world.talk("npc", "hello")world.pickup("rock")world.throw("rat") 
Talking to the "npc" will give you further instructions on what to do. The talk replies will be in the Output panel. Be careful when using while loops because if the script timeouts you wont see any output.  
Your function should return the world object instance after all tasks are completed.The tests will call the done() method on the returned object. This method will check the internal flags of the object to see if you completed the quest line.Replacing or changing the World class and instance (other than calling the documented methods) is not allowed. The full tests include a few type checks.
========================================
URL: https://www.codewars.com/kata/58999425006ee3f97c00011f
–ó–∞–¥–∞—á–∞:
This kata honors a recurring troupe of many online games.The origin of this tradition can be traced to the classic Black Isle pc game Baldur's Gate. The very first quest requires you to kill 10 rats. One rather humble start for what later becomes a epic adventure. Honor awaits!
Its intended to be a easy but entertaining exercise on classes and conditions.
You must instantiate and interact with a World() object. On this kata the following methods are available:  
talk(target, what): Interact with npcs. The only valid npc on this kata has the name "npc".pickup(what): Pickup a thing to throw. Default is "rock".throw(target): If you are holding a thing, throw it at a target. The throw may miss. Will return True if hit, False if missed.  
Ex.:world.talk("npc", "hello")world.pickup("rock")world.throw("rat") 
Talking to the "npc" will give you further instructions on what to do. The talk replies will be in the Output panel. Be careful when using while loops because if the script timeouts you wont see any output.  
Your function should return the world object instance after all tasks are completed.The tests will call the done() method on the returned object. This method will check the internal flags of the object to see if you completed the quest line.Replacing or changing the World class and instance (other than calling the documented methods) is not allowed. The full tests include a few type checks.
========================================
URL: https://www.codewars.com/kata/58989a079c70093f3e00008d
–ó–∞–¥–∞—á–∞:
This kata honors a recurring troupe of many online games.The origin of this tradition can be traced to the classic Black Isle pc game Baldur's Gate. The very first quest requires you to kill 10 rats. One rather humble start for what later becomes a epic adventure. Honor awaits!
Its intended to be a easy but entertaining exercise on classes and conditions.
You must instantiate and interact with a World() object. On this kata the following methods are available:  
talk(target, what): Interact with npcs. The only valid npc on this kata has the name "npc".pickup(what): Pickup a thing to throw. Default is "rock".throw(target): If you are holding a thing, throw it at a target. The throw may miss. Will return True if hit, False if missed.  
Ex.:world.talk("npc", "hello")world.pickup("rock")world.throw("rat") 
Talking to the "npc" will give you further instructions on what to do. The talk replies will be in the Output panel. Be careful when using while loops because if the script timeouts you wont see any output.  
Your function should return the world object instance after all tasks are completed.The tests will call the done() method on the returned object. This method will check the internal flags of the object to see if you completed the quest line.Replacing or changing the World class and instance (other than calling the documented methods) is not allowed. The full tests include a few type checks.
========================================
URL: https://www.codewars.com/kata/5899aa695401a83a5c0000c4
–ó–∞–¥–∞—á–∞:
This kata honors a recurring troupe of many online games.The origin of this tradition can be traced to the classic Black Isle pc game Baldur's Gate. The very first quest requires you to kill 10 rats. One rather humble start for what later becomes a epic adventure. Honor awaits!
Its intended to be a easy but entertaining exercise on classes and conditions.
You must instantiate and interact with a World() object. On this kata the following methods are available:  
talk(target, what): Interact with npcs. The only valid npc on this kata has the name "npc".pickup(what): Pickup a thing to throw. Default is "rock".throw(target): If you are holding a thing, throw it at a target. The throw may miss. Will return True if hit, False if missed.  
Ex.:world.talk("npc", "hello")world.pickup("rock")world.throw("rat") 
Talking to the "npc" will give you further instructions on what to do. The talk replies will be in the Output panel. Be careful when using while loops because if the script timeouts you wont see any output.  
Your function should return the world object instance after all tasks are completed.The tests will call the done() method on the returned object. This method will check the internal flags of the object to see if you completed the quest line.Replacing or changing the World class and instance (other than calling the documented methods) is not allowed. The full tests include a few type checks.
========================================
URL: https://www.codewars.com/kata/58985ffa8b43145ac900015a
–ó–∞–¥–∞—á–∞:
This kata honors a recurring troupe of many online games.The origin of this tradition can be traced to the classic Black Isle pc game Baldur's Gate. The very first quest requires you to kill 10 rats. One rather humble start for what later becomes a epic adventure. Honor awaits!
Its intended to be a easy but entertaining exercise on classes and conditions.
You must instantiate and interact with a World() object. On this kata the following methods are available:  
talk(target, what): Interact with npcs. The only valid npc on this kata has the name "npc".pickup(what): Pickup a thing to throw. Default is "rock".throw(target): If you are holding a thing, throw it at a target. The throw may miss. Will return True if hit, False if missed.  
Ex.:world.talk("npc", "hello")world.pickup("rock")world.throw("rat") 
Talking to the "npc" will give you further instructions on what to do. The talk replies will be in the Output panel. Be careful when using while loops because if the script timeouts you wont see any output.  
Your function should return the world object instance after all tasks are completed.The tests will call the done() method on the returned object. This method will check the internal flags of the object to see if you completed the quest line.Replacing or changing the World class and instance (other than calling the documented methods) is not allowed. The full tests include a few type checks.
========================================
URL: https://www.codewars.com/kata/5896616336c4bad1c50000d7
–ó–∞–¥–∞—á–∞:
Perimeter sequence
The first three stages of a sequence are shown.

The blocksize is a by a and a ‚â• 1.
What is the perimeter of the nth shape in the sequence (n ‚â• 1) ?
========================================
URL: https://www.codewars.com/kata/589577f0d1b93ae32a000001
–ó–∞–¥–∞—á–∞:
Perimeter sequence
The first three stages of a sequence are shown.

The blocksize is a by a and a ‚â• 1.
What is the perimeter of the nth shape in the sequence (n ‚â• 1) ?
========================================
URL: https://www.codewars.com/kata/589573e3f0902e8919000109
–ó–∞–¥–∞—á–∞:
Perimeter sequence
The first three stages of a sequence are shown.

The blocksize is a by a and a ‚â• 1.
What is the perimeter of the nth shape in the sequence (n ‚â• 1) ?
========================================
URL: https://www.codewars.com/kata/589519d1f0902e01af000054
–ó–∞–¥–∞—á–∞:
Perimeter sequence
The first three stages of a sequence are shown.

The blocksize is a by a and a ‚â• 1.
What is the perimeter of the nth shape in the sequence (n ‚â• 1) ?
========================================
URL: https://www.codewars.com/kata/58956f5ff780edf4a70000a2
–ó–∞–¥–∞—á–∞:
Perimeter sequence
The first three stages of a sequence are shown.

The blocksize is a by a and a ‚â• 1.
What is the perimeter of the nth shape in the sequence (n ‚â• 1) ?
========================================
URL: https://www.codewars.com/kata/589478160c0f8a40870000bc
–ó–∞–¥–∞—á–∞:
Task
 You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.
Example
 For arr = [1, 1, 1], the output should be 3.
Input/Output

[input] integer array arr
 Constraints:
 3 ‚â§ inputArray.length ‚â§ 100,
 -10000 ‚â§ inputArray[i] ‚â§ 10000.

[output] an integer
 The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.
 It's guaranteed that for the given test cases the answer always fits signed 32-bit integer type.
========================================
URL: https://www.codewars.com/kata/589422431a88082ea600002a
–ó–∞–¥–∞—á–∞:
Task
 You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.
Example
 For arr = [1, 1, 1], the output should be 3.
Input/Output

[input] integer array arr
 Constraints:
 3 ‚â§ inputArray.length ‚â§ 100,
 -10000 ‚â§ inputArray[i] ‚â§ 10000.

[output] an integer
 The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.
 It's guaranteed that for the given test cases the answer always fits signed 32-bit integer type.
========================================
URL: https://www.codewars.com/kata/58941fec8afa3618c9000184
–ó–∞–¥–∞—á–∞:
Task
 You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.
Example
 For arr = [1, 1, 1], the output should be 3.
Input/Output

[input] integer array arr
 Constraints:
 3 ‚â§ inputArray.length ‚â§ 100,
 -10000 ‚â§ inputArray[i] ‚â§ 10000.

[output] an integer
 The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.
 It's guaranteed that for the given test cases the answer always fits signed 32-bit integer type.
========================================
URL: https://www.codewars.com/kata/5893f43b779ce54da4000124
–ó–∞–¥–∞—á–∞:
Task
 You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.
Example
 For arr = [1, 1, 1], the output should be 3.
Input/Output

[input] integer array arr
 Constraints:
 3 ‚â§ inputArray.length ‚â§ 100,
 -10000 ‚â§ inputArray[i] ‚â§ 10000.

[output] an integer
 The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.
 It's guaranteed that for the given test cases the answer always fits signed 32-bit integer type.
========================================
URL: https://www.codewars.com/kata/5894017082b9fb62c50000df
–ó–∞–¥–∞—á–∞:
Task
 You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.
Example
 For arr = [1, 1, 1], the output should be 3.
Input/Output

[input] integer array arr
 Constraints:
 3 ‚â§ inputArray.length ‚â§ 100,
 -10000 ‚â§ inputArray[i] ‚â§ 10000.

[output] an integer
 The minimal number of moves needed to obtain a strictly increasing sequence from inputArray.
 It's guaranteed that for the given test cases the answer always fits signed 32-bit integer type.
========================================
URL: https://www.codewars.com/kata/5893e0c41a88085c330000a0
–ó–∞–¥–∞—á–∞:
Zalgo text is text that leaks into our plane of existence from a corrupted dimension of Unicode. For example:

HÃÑÕ¨ÃóÃ™ÕáÕìÃôÕéÃ£aÕöÃØÃ¶ÕâÃñÃ•vÕÜÕ©ÃÉÕÜÕÉÃêÕ•eÃéÃüÕéÕñÕïÕç ÕäÃΩÃçÕØÃåÕäÃ∞ÕöÃ©ÃüÕïÃ∞aÃÑÃøÕ©ÃÉÃñÃ™ÕâÕÖÕçÃ•Õô ÕëÃøÕßÃ¨Ã•ÕégÕ´ÃÄÃêÃìÃêÃ∞Ã≥Ã∫ÕîÃ¶ÕârÕêÕãÕØÕ≠Õ≠Õ≠ÕÜÃùÃ´Ã±ÃòÃ∞eÕåÕ≠ÕôÕïÃñÃóÕôÃ∞aÕÑÃåÕëÕ™ÕäÕìÕöÃùÕìtÕ•Ã≠ Õ£Ã±dÃÉÕêÃáÕéÕîÕéÕáÃ´Ã™ÃòaÃÄÃàÕãÕ™ÕïÃÆyÕÆÃºÃ≥Ã±!ÃîÕÆÃΩÃìÃ≥Ã•Ã∞Ã≠Õá


Complete the function that converts a string of Zalgo text into a string interpretable by our mortal eyes. For example, the string above would be converted into:
Have a great day!

The converted string should only feature ASCII characters.

Some hints if you're stuck...
========================================
URL: https://www.codewars.com/kata/5892595f190ca40ad0000095
–ó–∞–¥–∞—á–∞:
Zalgo text is text that leaks into our plane of existence from a corrupted dimension of Unicode. For example:

HÃÑÕ¨ÃóÃ™ÕáÕìÃôÕéÃ£aÕöÃØÃ¶ÕâÃñÃ•vÕÜÕ©ÃÉÕÜÕÉÃêÕ•eÃéÃüÕéÕñÕïÕç ÕäÃΩÃçÕØÃåÕäÃ∞ÕöÃ©ÃüÕïÃ∞aÃÑÃøÕ©ÃÉÃñÃ™ÕâÕÖÕçÃ•Õô ÕëÃøÕßÃ¨Ã•ÕégÕ´ÃÄÃêÃìÃêÃ∞Ã≥Ã∫ÕîÃ¶ÕârÕêÕãÕØÕ≠Õ≠Õ≠ÕÜÃùÃ´Ã±ÃòÃ∞eÕåÕ≠ÕôÕïÃñÃóÕôÃ∞aÕÑÃåÕëÕ™ÕäÕìÕöÃùÕìtÕ•Ã≠ Õ£Ã±dÃÉÕêÃáÕéÕîÕéÕáÃ´Ã™ÃòaÃÄÃàÕãÕ™ÕïÃÆyÕÆÃºÃ≥Ã±!ÃîÕÆÃΩÃìÃ≥Ã•Ã∞Ã≠Õá


Complete the function that converts a string of Zalgo text into a string interpretable by our mortal eyes. For example, the string above would be converted into:
Have a great day!

The converted string should only feature ASCII characters.

Some hints if you're stuck...
========================================
URL: https://www.codewars.com/kata/58902f676f4873338700011f
–ó–∞–¥–∞—á–∞:
Zalgo text is text that leaks into our plane of existence from a corrupted dimension of Unicode. For example:

HÃÑÕ¨ÃóÃ™ÕáÕìÃôÕéÃ£aÕöÃØÃ¶ÕâÃñÃ•vÕÜÕ©ÃÉÕÜÕÉÃêÕ•eÃéÃüÕéÕñÕïÕç ÕäÃΩÃçÕØÃåÕäÃ∞ÕöÃ©ÃüÕïÃ∞aÃÑÃøÕ©ÃÉÃñÃ™ÕâÕÖÕçÃ•Õô ÕëÃøÕßÃ¨Ã•ÕégÕ´ÃÄÃêÃìÃêÃ∞Ã≥Ã∫ÕîÃ¶ÕârÕêÕãÕØÕ≠Õ≠Õ≠ÕÜÃùÃ´Ã±ÃòÃ∞eÕåÕ≠ÕôÕïÃñÃóÕôÃ∞aÕÑÃåÕëÕ™ÕäÕìÕöÃùÕìtÕ•Ã≠ Õ£Ã±dÃÉÕêÃáÕéÕîÕéÕáÃ´Ã™ÃòaÃÄÃàÕãÕ™ÕïÃÆyÕÆÃºÃ≥Ã±!ÃîÕÆÃΩÃìÃ≥Ã•Ã∞Ã≠Õá


Complete the function that converts a string of Zalgo text into a string interpretable by our mortal eyes. For example, the string above would be converted into:
Have a great day!

The converted string should only feature ASCII characters.

Some hints if you're stuck...
========================================
URL: https://www.codewars.com/kata/5890579a34a7d44f3b00009e
–ó–∞–¥–∞—á–∞:
Zalgo text is text that leaks into our plane of existence from a corrupted dimension of Unicode. For example:

HÃÑÕ¨ÃóÃ™ÕáÕìÃôÕéÃ£aÕöÃØÃ¶ÕâÃñÃ•vÕÜÕ©ÃÉÕÜÕÉÃêÕ•eÃéÃüÕéÕñÕïÕç ÕäÃΩÃçÕØÃåÕäÃ∞ÕöÃ©ÃüÕïÃ∞aÃÑÃøÕ©ÃÉÃñÃ™ÕâÕÖÕçÃ•Õô ÕëÃøÕßÃ¨Ã•ÕégÕ´ÃÄÃêÃìÃêÃ∞Ã≥Ã∫ÕîÃ¶ÕârÕêÕãÕØÕ≠Õ≠Õ≠ÕÜÃùÃ´Ã±ÃòÃ∞eÕåÕ≠ÕôÕïÃñÃóÕôÃ∞aÕÑÃåÕëÕ™ÕäÕìÕöÃùÕìtÕ•Ã≠ Õ£Ã±dÃÉÕêÃáÕéÕîÕéÕáÃ´Ã™ÃòaÃÄÃàÕãÕ™ÕïÃÆyÕÆÃºÃ≥Ã±!ÃîÕÆÃΩÃìÃ≥Ã•Ã∞Ã≠Õá


Complete the function that converts a string of Zalgo text into a string interpretable by our mortal eyes. For example, the string above would be converted into:
Have a great day!

The converted string should only feature ASCII characters.

Some hints if you're stuck...
========================================
URL: https://www.codewars.com/kata/588fe9eaadbbfb44b70001fc
–ó–∞–¥–∞—á–∞:
Zalgo text is text that leaks into our plane of existence from a corrupted dimension of Unicode. For example:

HÃÑÕ¨ÃóÃ™ÕáÕìÃôÕéÃ£aÕöÃØÃ¶ÕâÃñÃ•vÕÜÕ©ÃÉÕÜÕÉÃêÕ•eÃéÃüÕéÕñÕïÕç ÕäÃΩÃçÕØÃåÕäÃ∞ÕöÃ©ÃüÕïÃ∞aÃÑÃøÕ©ÃÉÃñÃ™ÕâÕÖÕçÃ•Õô ÕëÃøÕßÃ¨Ã•ÕégÕ´ÃÄÃêÃìÃêÃ∞Ã≥Ã∫ÕîÃ¶ÕârÕêÕãÕØÕ≠Õ≠Õ≠ÕÜÃùÃ´Ã±ÃòÃ∞eÕåÕ≠ÕôÕïÃñÃóÕôÃ∞aÕÑÃåÕëÕ™ÕäÕìÕöÃùÕìtÕ•Ã≠ Õ£Ã±dÃÉÕêÃáÕéÕîÕéÕáÃ´Ã™ÃòaÃÄÃàÕãÕ™ÕïÃÆyÕÆÃºÃ≥Ã±!ÃîÕÆÃΩÃìÃ≥Ã•Ã∞Ã≠Õá


Complete the function that converts a string of Zalgo text into a string interpretable by our mortal eyes. For example, the string above would be converted into:
Have a great day!

The converted string should only feature ASCII characters.

Some hints if you're stuck...
========================================
URL: https://www.codewars.com/kata/588e68aed4cff457d300002e
–ó–∞–¥–∞—á–∞:
You were given a string of integer temperature values. Create a function close_to_zero(t) and return the closest value to 0 or 0 if the string is empty. If two numbers are equally close to zero, return the positive integer.
========================================
URL: https://www.codewars.com/kata/588f5a38ec641b411200005b
–ó–∞–¥–∞—á–∞:
You were given a string of integer temperature values. Create a function close_to_zero(t) and return the closest value to 0 or 0 if the string is empty. If two numbers are equally close to zero, return the positive integer.
========================================
URL: https://www.codewars.com/kata/588e27b7d1140d31cb000060
–ó–∞–¥–∞—á–∞:
You were given a string of integer temperature values. Create a function close_to_zero(t) and return the closest value to 0 or 0 if the string is empty. If two numbers are equally close to zero, return the positive integer.
========================================
URL: https://www.codewars.com/kata/588e10c5f051b147ff00004b
–ó–∞–¥–∞—á–∞:
You were given a string of integer temperature values. Create a function close_to_zero(t) and return the closest value to 0 or 0 if the string is empty. If two numbers are equally close to zero, return the positive integer.
========================================
URL: https://www.codewars.com/kata/588e2a1ad1140d31cb00008c
–ó–∞–¥–∞—á–∞:
You were given a string of integer temperature values. Create a function close_to_zero(t) and return the closest value to 0 or 0 if the string is empty. If two numbers are equally close to zero, return the positive integer.
========================================
URL: https://www.codewars.com/kata/588e0f11b7b4a5b373000041
–ó–∞–¥–∞—á–∞:
Task
 You are implementing a command-line version of the Paint app. Since the command line doesn't support colors, you are using different characters to represent pixels. Your current goal is to support rectangle x1 y1 x2 y2 operation, which draws a rectangle that has an upper left corner at (x1, y1) and a lower right corner at (x2, y2). Here the x-axis points from left to right, and the y-axis points from top to bottom.
 Given the initial canvas state and the array that represents the coordinates of the two corners, return the canvas state after the operation is applied. For the details about how rectangles are painted, see the example.
Example
 For
canvas = [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]
and rectangle = [1, 1, 4, 3]```
the output should be

[['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
   ['a', '', '-', '-', '', 'a', 'a', 'a'],
   ['a', '|', 'a', 'a', '|', 'a', 'a', 'a'],
   ['b', '', '-', '-', '', 'b', 'b', 'b'],
   ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]```
Note that rectangle sides are depicted as -s and |s, asterisks (*) stand for its corners and all of the other "pixels" remain the same. Color in the example is used only for illustration.
Input/Output

[input] 2D string array canvas
A non-empty rectangular matrix of characters.
Constraints: 2 ‚â§ canvas.length ‚â§ 10, 2 ‚â§ canvas[0].length ‚â§ 10.

[input] integer array rectangle
Array of four integers - [x1, y1, x2, y2].
Constraints: 0 ‚â§ x1 < x2 < canvas[i].length, 0 ‚â§ y1 < y2 < canvas.length.

[output] 2D string array
========================================
URL: https://www.codewars.com/kata/588a7d45019c42be61000009
–ó–∞–¥–∞—á–∞:
Task
 You are implementing a command-line version of the Paint app. Since the command line doesn't support colors, you are using different characters to represent pixels. Your current goal is to support rectangle x1 y1 x2 y2 operation, which draws a rectangle that has an upper left corner at (x1, y1) and a lower right corner at (x2, y2). Here the x-axis points from left to right, and the y-axis points from top to bottom.
 Given the initial canvas state and the array that represents the coordinates of the two corners, return the canvas state after the operation is applied. For the details about how rectangles are painted, see the example.
Example
 For
canvas = [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]
and rectangle = [1, 1, 4, 3]```
the output should be

[['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
   ['a', '', '-', '-', '', 'a', 'a', 'a'],
   ['a', '|', 'a', 'a', '|', 'a', 'a', 'a'],
   ['b', '', '-', '-', '', 'b', 'b', 'b'],
   ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]```
Note that rectangle sides are depicted as -s and |s, asterisks (*) stand for its corners and all of the other "pixels" remain the same. Color in the example is used only for illustration.
Input/Output

[input] 2D string array canvas
A non-empty rectangular matrix of characters.
Constraints: 2 ‚â§ canvas.length ‚â§ 10, 2 ‚â§ canvas[0].length ‚â§ 10.

[input] integer array rectangle
Array of four integers - [x1, y1, x2, y2].
Constraints: 0 ‚â§ x1 < x2 < canvas[i].length, 0 ‚â§ y1 < y2 < canvas.length.

[output] 2D string array
========================================
URL: https://www.codewars.com/kata/5889ae4f7af7f99a9a000019
–ó–∞–¥–∞—á–∞:
Task
 You are implementing a command-line version of the Paint app. Since the command line doesn't support colors, you are using different characters to represent pixels. Your current goal is to support rectangle x1 y1 x2 y2 operation, which draws a rectangle that has an upper left corner at (x1, y1) and a lower right corner at (x2, y2). Here the x-axis points from left to right, and the y-axis points from top to bottom.
 Given the initial canvas state and the array that represents the coordinates of the two corners, return the canvas state after the operation is applied. For the details about how rectangles are painted, see the example.
Example
 For
canvas = [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]
and rectangle = [1, 1, 4, 3]```
the output should be

[['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
   ['a', '', '-', '-', '', 'a', 'a', 'a'],
   ['a', '|', 'a', 'a', '|', 'a', 'a', 'a'],
   ['b', '', '-', '-', '', 'b', 'b', 'b'],
   ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]```
Note that rectangle sides are depicted as -s and |s, asterisks (*) stand for its corners and all of the other "pixels" remain the same. Color in the example is used only for illustration.
Input/Output

[input] 2D string array canvas
A non-empty rectangular matrix of characters.
Constraints: 2 ‚â§ canvas.length ‚â§ 10, 2 ‚â§ canvas[0].length ‚â§ 10.

[input] integer array rectangle
Array of four integers - [x1, y1, x2, y2].
Constraints: 0 ‚â§ x1 < x2 < canvas[i].length, 0 ‚â§ y1 < y2 < canvas.length.

[output] 2D string array
========================================
URL: https://www.codewars.com/kata/588dd9c3dc49de0bd400016d
–ó–∞–¥–∞—á–∞:
Task
 You are implementing a command-line version of the Paint app. Since the command line doesn't support colors, you are using different characters to represent pixels. Your current goal is to support rectangle x1 y1 x2 y2 operation, which draws a rectangle that has an upper left corner at (x1, y1) and a lower right corner at (x2, y2). Here the x-axis points from left to right, and the y-axis points from top to bottom.
 Given the initial canvas state and the array that represents the coordinates of the two corners, return the canvas state after the operation is applied. For the details about how rectangles are painted, see the example.
Example
 For
canvas = [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]
and rectangle = [1, 1, 4, 3]```
the output should be

[['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
   ['a', '', '-', '-', '', 'a', 'a', 'a'],
   ['a', '|', 'a', 'a', '|', 'a', 'a', 'a'],
   ['b', '', '-', '-', '', 'b', 'b', 'b'],
   ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]```
Note that rectangle sides are depicted as -s and |s, asterisks (*) stand for its corners and all of the other "pixels" remain the same. Color in the example is used only for illustration.
Input/Output

[input] 2D string array canvas
A non-empty rectangular matrix of characters.
Constraints: 2 ‚â§ canvas.length ‚â§ 10, 2 ‚â§ canvas[0].length ‚â§ 10.

[input] integer array rectangle
Array of four integers - [x1, y1, x2, y2].
Constraints: 0 ‚â§ x1 < x2 < canvas[i].length, 0 ‚â§ y1 < y2 < canvas.length.

[output] 2D string array
========================================
URL: https://www.codewars.com/kata/588a3c3ef0fbc9c8e1000095
–ó–∞–¥–∞—á–∞:
Task
 You are implementing a command-line version of the Paint app. Since the command line doesn't support colors, you are using different characters to represent pixels. Your current goal is to support rectangle x1 y1 x2 y2 operation, which draws a rectangle that has an upper left corner at (x1, y1) and a lower right corner at (x2, y2). Here the x-axis points from left to right, and the y-axis points from top to bottom.
 Given the initial canvas state and the array that represents the coordinates of the two corners, return the canvas state after the operation is applied. For the details about how rectangles are painted, see the example.
Example
 For
canvas = [['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b'],
            ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]
and rectangle = [1, 1, 4, 3]```
the output should be

[['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'],
   ['a', '', '-', '-', '', 'a', 'a', 'a'],
   ['a', '|', 'a', 'a', '|', 'a', 'a', 'a'],
   ['b', '', '-', '-', '', 'b', 'b', 'b'],
   ['b', 'b', 'b', 'b', 'b', 'b', 'b', 'b']]```
Note that rectangle sides are depicted as -s and |s, asterisks (*) stand for its corners and all of the other "pixels" remain the same. Color in the example is used only for illustration.
Input/Output

[input] 2D string array canvas
A non-empty rectangular matrix of characters.
Constraints: 2 ‚â§ canvas.length ‚â§ 10, 2 ‚â§ canvas[0].length ‚â§ 10.

[input] integer array rectangle
Array of four integers - [x1, y1, x2, y2].
Constraints: 0 ‚â§ x1 < x2 < canvas[i].length, 0 ‚â§ y1 < y2 < canvas.length.

[output] 2D string array
========================================
URL: https://www.codewars.com/kata/5889ab4928c08c08da00009b
–ó–∞–¥–∞—á–∞:
Task
You are given a function that should insert an asterisk (*) between every pair of even digits in the given input, and return it as a string. If the input is a sequence, concat the elements first as a string. 
Input
The input can be an integer, a string of digits or a sequence containing integers only. 
Output
Return a string. 
Examples
5312708     -->  "531270*8"
"0000"      -->  "0*0*0*0"
[1, 4, 64]  -->  "14*6*4"

Have fun!
========================================
URL: https://www.codewars.com/kata/58899594b832f80348000122
–ó–∞–¥–∞—á–∞:
Task
You are given a function that should insert an asterisk (*) between every pair of even digits in the given input, and return it as a string. If the input is a sequence, concat the elements first as a string. 
Input
The input can be an integer, a string of digits or a sequence containing integers only. 
Output
Return a string. 
Examples
5312708     -->  "531270*8"
"0000"      -->  "0*0*0*0"
[1, 4, 64]  -->  "14*6*4"

Have fun!
========================================
URL: https://www.codewars.com/kata/5889a6b653ad4a22710000d0
–ó–∞–¥–∞—á–∞:
Task
You are given a function that should insert an asterisk (*) between every pair of even digits in the given input, and return it as a string. If the input is a sequence, concat the elements first as a string. 
Input
The input can be an integer, a string of digits or a sequence containing integers only. 
Output
Return a string. 
Examples
5312708     -->  "531270*8"
"0000"      -->  "0*0*0*0"
[1, 4, 64]  -->  "14*6*4"

Have fun!
========================================
URL: https://www.codewars.com/kata/5888cba35194f7f5a800008b
–ó–∞–¥–∞—á–∞:
Task
You are given a function that should insert an asterisk (*) between every pair of even digits in the given input, and return it as a string. If the input is a sequence, concat the elements first as a string. 
Input
The input can be an integer, a string of digits or a sequence containing integers only. 
Output
Return a string. 
Examples
5312708     -->  "531270*8"
"0000"      -->  "0*0*0*0"
[1, 4, 64]  -->  "14*6*4"

Have fun!
========================================
URL: https://www.codewars.com/kata/5889177bf148eddd150002cc
–ó–∞–¥–∞—á–∞:
Task
You are given a function that should insert an asterisk (*) between every pair of even digits in the given input, and return it as a string. If the input is a sequence, concat the elements first as a string. 
Input
The input can be an integer, a string of digits or a sequence containing integers only. 
Output
Return a string. 
Examples
5312708     -->  "531270*8"
"0000"      -->  "0*0*0*0"
[1, 4, 64]  -->  "14*6*4"

Have fun!
========================================
URL: https://www.codewars.com/kata/5888a57cbf87c25c840000c6
–ó–∞–¥–∞—á–∞:
Task
 Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - A for 0, B for 1, and so on.
 The teacher assigned you the following numeral system exercise: given a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number.
Example
 For number = 'G', the output should be ["A + G", "B + F", "C + E", "D + D"]
 Translating this into the decimal numeral system we get: number = 6, so it is ["0 + 6", "1 + 5", "2 + 4", "3 + 3"].
Input/Output

[input] string(char in C#) number
A character representing a correct one-digit number in the new numeral system.
Constraints: 'A' ‚â§ number ‚â§ 'Z'.

[output] a string array
An array of strings in the format "letter1 + letter2", where "letter1" and "letter2" are correct one-digit numbers in the new numeral system. The strings should be sorted by "letter1".
Note that "letter1 + letter2" and "letter2 + letter1" are equal pairs and we don't consider them to be different.
========================================
URL: https://www.codewars.com/kata/588854201361435f5e0000bd
–ó–∞–¥–∞—á–∞:
Task
 Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - A for 0, B for 1, and so on.
 The teacher assigned you the following numeral system exercise: given a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number.
Example
 For number = 'G', the output should be ["A + G", "B + F", "C + E", "D + D"]
 Translating this into the decimal numeral system we get: number = 6, so it is ["0 + 6", "1 + 5", "2 + 4", "3 + 3"].
Input/Output

[input] string(char in C#) number
A character representing a correct one-digit number in the new numeral system.
Constraints: 'A' ‚â§ number ‚â§ 'Z'.

[output] a string array
An array of strings in the format "letter1 + letter2", where "letter1" and "letter2" are correct one-digit numbers in the new numeral system. The strings should be sorted by "letter1".
Note that "letter1 + letter2" and "letter2 + letter1" are equal pairs and we don't consider them to be different.
========================================
URL: https://www.codewars.com/kata/588856a82ffea640c80000cc
–ó–∞–¥–∞—á–∞:
Task
 Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - A for 0, B for 1, and so on.
 The teacher assigned you the following numeral system exercise: given a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number.
Example
 For number = 'G', the output should be ["A + G", "B + F", "C + E", "D + D"]
 Translating this into the decimal numeral system we get: number = 6, so it is ["0 + 6", "1 + 5", "2 + 4", "3 + 3"].
Input/Output

[input] string(char in C#) number
A character representing a correct one-digit number in the new numeral system.
Constraints: 'A' ‚â§ number ‚â§ 'Z'.

[output] a string array
An array of strings in the format "letter1 + letter2", where "letter1" and "letter2" are correct one-digit numbers in the new numeral system. The strings should be sorted by "letter1".
Note that "letter1 + letter2" and "letter2 + letter1" are equal pairs and we don't consider them to be different.
========================================
URL: https://www.codewars.com/kata/5888514674b58e929a000036
–ó–∞–¥–∞—á–∞:
Task
 Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - A for 0, B for 1, and so on.
 The teacher assigned you the following numeral system exercise: given a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number.
Example
 For number = 'G', the output should be ["A + G", "B + F", "C + E", "D + D"]
 Translating this into the decimal numeral system we get: number = 6, so it is ["0 + 6", "1 + 5", "2 + 4", "3 + 3"].
Input/Output

[input] string(char in C#) number
A character representing a correct one-digit number in the new numeral system.
Constraints: 'A' ‚â§ number ‚â§ 'Z'.

[output] a string array
An array of strings in the format "letter1 + letter2", where "letter1" and "letter2" are correct one-digit numbers in the new numeral system. The strings should be sorted by "letter1".
Note that "letter1 + letter2" and "letter2 + letter1" are equal pairs and we don't consider them to be different.
========================================
URL: https://www.codewars.com/kata/5888445107a0d57711000032
–ó–∞–¥–∞—á–∞:
Task
 Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - A for 0, B for 1, and so on.
 The teacher assigned you the following numeral system exercise: given a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number.
Example
 For number = 'G', the output should be ["A + G", "B + F", "C + E", "D + D"]
 Translating this into the decimal numeral system we get: number = 6, so it is ["0 + 6", "1 + 5", "2 + 4", "3 + 3"].
Input/Output

[input] string(char in C#) number
A character representing a correct one-digit number in the new numeral system.
Constraints: 'A' ‚â§ number ‚â§ 'Z'.

[output] a string array
An array of strings in the format "letter1 + letter2", where "letter1" and "letter2" are correct one-digit numbers in the new numeral system. The strings should be sorted by "letter1".
Note that "letter1 + letter2" and "letter2 + letter1" are equal pairs and we don't consider them to be different.
========================================
URL: https://www.codewars.com/kata/588820169ab1e053240000e0
–ó–∞–¥–∞—á–∞:
Task
 There are some people and cats in a house. You are given the number of legs they have all together. Your task is to return an array containing every possible number of people that could be in the house sorted in ascending order. It's guaranteed that each person has 2 legs and each cat has 4 legs.
Example
 For legs = 6, the output should be [1, 3].
 There could be either 1 cat and 1 person (4 + 2 = 6) or 3 people (2 * 3 = 6).
 For legs = 2, the output should be [1].
 There can be only 1 person.
Input/Output

[input] integer legs
 The total number of legs in the house.
 Constraints: 2 ‚â§ legs ‚â§ 100.

[output] an integer array
  Every possible number of people that can be in the house.
========================================
URL: https://www.codewars.com/kata/588817db5fb13af14a000020
–ó–∞–¥–∞—á–∞:
Task
 There are some people and cats in a house. You are given the number of legs they have all together. Your task is to return an array containing every possible number of people that could be in the house sorted in ascending order. It's guaranteed that each person has 2 legs and each cat has 4 legs.
Example
 For legs = 6, the output should be [1, 3].
 There could be either 1 cat and 1 person (4 + 2 = 6) or 3 people (2 * 3 = 6).
 For legs = 2, the output should be [1].
 There can be only 1 person.
Input/Output

[input] integer legs
 The total number of legs in the house.
 Constraints: 2 ‚â§ legs ‚â§ 100.

[output] an integer array
  Every possible number of people that can be in the house.
========================================
URL: https://www.codewars.com/kata/58881b859ab1e053240000cc
–ó–∞–¥–∞—á–∞:
Task
 There are some people and cats in a house. You are given the number of legs they have all together. Your task is to return an array containing every possible number of people that could be in the house sorted in ascending order. It's guaranteed that each person has 2 legs and each cat has 4 legs.
Example
 For legs = 6, the output should be [1, 3].
 There could be either 1 cat and 1 person (4 + 2 = 6) or 3 people (2 * 3 = 6).
 For legs = 2, the output should be [1].
 There can be only 1 person.
Input/Output

[input] integer legs
 The total number of legs in the house.
 Constraints: 2 ‚â§ legs ‚â§ 100.

[output] an integer array
  Every possible number of people that can be in the house.
========================================
URL: https://www.codewars.com/kata/588810c99fb63e49e1000606
–ó–∞–¥–∞—á–∞:
Task
 There are some people and cats in a house. You are given the number of legs they have all together. Your task is to return an array containing every possible number of people that could be in the house sorted in ascending order. It's guaranteed that each person has 2 legs and each cat has 4 legs.
Example
 For legs = 6, the output should be [1, 3].
 There could be either 1 cat and 1 person (4 + 2 = 6) or 3 people (2 * 3 = 6).
 For legs = 2, the output should be [1].
 There can be only 1 person.
Input/Output

[input] integer legs
 The total number of legs in the house.
 Constraints: 2 ‚â§ legs ‚â§ 100.

[output] an integer array
  Every possible number of people that can be in the house.
========================================
URL: https://www.codewars.com/kata/5888145122fe8620950000f0
–ó–∞–¥–∞—á–∞:
Task
 There are some people and cats in a house. You are given the number of legs they have all together. Your task is to return an array containing every possible number of people that could be in the house sorted in ascending order. It's guaranteed that each person has 2 legs and each cat has 4 legs.
Example
 For legs = 6, the output should be [1, 3].
 There could be either 1 cat and 1 person (4 + 2 = 6) or 3 people (2 * 3 = 6).
 For legs = 2, the output should be [1].
 There can be only 1 person.
Input/Output

[input] integer legs
 The total number of legs in the house.
 Constraints: 2 ‚â§ legs ‚â§ 100.

[output] an integer array
  Every possible number of people that can be in the house.
========================================
URL: https://www.codewars.com/kata/58880c6e79a0a3e459000004
–ó–∞–¥–∞—á–∞:
Task
 You are given two strings s and t of the same length, consisting of uppercase English letters. Your task is to find the minimum number of "replacement operations" needed to get some anagram of the string t from the string s. A replacement operation is performed by picking exactly one character from the string s and replacing it by some other character.
 About anagram: –ê string x is an anagram of a string y if one can get y by rearranging the letters of x. For example, the strings "MITE" and "TIME" are anagrams, so are "BABA" and "AABB", but "ABBAC" and "CAABA" are not.
Example
 For s = "AABAA" and t = "BBAAA", the output should be 1;
 For s = "OVGHK" and t = "RPGUC", the output should be 4.
Input/Output

[input] string s
 Constraints: 5 ‚â§ s.length ‚â§ 35.

[input] string t
 Constraints: t.length = s.length.

[output] an integer
 The minimum number of replacement operations needed to get an anagram of the string t from the string s.
========================================
URL: https://www.codewars.com/kata/588805ca44c7e8c3a100013c
–ó–∞–¥–∞—á–∞:
Task
 You are given two strings s and t of the same length, consisting of uppercase English letters. Your task is to find the minimum number of "replacement operations" needed to get some anagram of the string t from the string s. A replacement operation is performed by picking exactly one character from the string s and replacing it by some other character.
 About anagram: –ê string x is an anagram of a string y if one can get y by rearranging the letters of x. For example, the strings "MITE" and "TIME" are anagrams, so are "BABA" and "AABB", but "ABBAC" and "CAABA" are not.
Example
 For s = "AABAA" and t = "BBAAA", the output should be 1;
 For s = "OVGHK" and t = "RPGUC", the output should be 4.
Input/Output

[input] string s
 Constraints: 5 ‚â§ s.length ‚â§ 35.

[input] string t
 Constraints: t.length = s.length.

[output] an integer
 The minimum number of replacement operations needed to get an anagram of the string t from the string s.
========================================
URL: https://www.codewars.com/kata/5887a6fe0cfe64850800161c
–ó–∞–¥–∞—á–∞:
Task
 You are given two strings s and t of the same length, consisting of uppercase English letters. Your task is to find the minimum number of "replacement operations" needed to get some anagram of the string t from the string s. A replacement operation is performed by picking exactly one character from the string s and replacing it by some other character.
 About anagram: –ê string x is an anagram of a string y if one can get y by rearranging the letters of x. For example, the strings "MITE" and "TIME" are anagrams, so are "BABA" and "AABB", but "ABBAC" and "CAABA" are not.
Example
 For s = "AABAA" and t = "BBAAA", the output should be 1;
 For s = "OVGHK" and t = "RPGUC", the output should be 4.
Input/Output

[input] string s
 Constraints: 5 ‚â§ s.length ‚â§ 35.

[input] string t
 Constraints: t.length = s.length.

[output] an integer
 The minimum number of replacement operations needed to get an anagram of the string t from the string s.
========================================
URL: https://www.codewars.com/kata/588711735ea0b4649e000001
–ó–∞–¥–∞—á–∞:
Task
 You are given two strings s and t of the same length, consisting of uppercase English letters. Your task is to find the minimum number of "replacement operations" needed to get some anagram of the string t from the string s. A replacement operation is performed by picking exactly one character from the string s and replacing it by some other character.
 About anagram: –ê string x is an anagram of a string y if one can get y by rearranging the letters of x. For example, the strings "MITE" and "TIME" are anagrams, so are "BABA" and "AABB", but "ABBAC" and "CAABA" are not.
Example
 For s = "AABAA" and t = "BBAAA", the output should be 1;
 For s = "OVGHK" and t = "RPGUC", the output should be 4.
Input/Output

[input] string s
 Constraints: 5 ‚â§ s.length ‚â§ 35.

[input] string t
 Constraints: t.length = s.length.

[output] an integer
 The minimum number of replacement operations needed to get an anagram of the string t from the string s.
========================================
URL: https://www.codewars.com/kata/58870402c81516bbdb000088
–ó–∞–¥–∞—á–∞:
Task
 Let's call two integers A and B friends if each integer from the array divisors is either a divisor of both A and B or neither A nor B. If two integers are friends, they are said to be in the same clan. How many clans are the integers from 1 to k, inclusive, broken into?
Example
 For divisors = [2, 3] and k = 6, the output should be 4
 The numbers 1 and 5 are friends and form a clan, 2 and 4 are friends and form a clan, and 3 and 6 do not have friends and each is a clan by itself. So the numbers 1 through 6 are broken into 4 clans.
Input/Output

[input] integer array divisors
 A non-empty array of positive integers.
 Constraints: 2 ‚â§ divisors.length < 10, 1 ‚â§ divisors[i] ‚â§ 10.

[input] integer k
 A positive integer.
 Constraints: 5 ‚â§ k ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/5886d35d4703f125a6000008
–ó–∞–¥–∞—á–∞:
Task
 Let's call two integers A and B friends if each integer from the array divisors is either a divisor of both A and B or neither A nor B. If two integers are friends, they are said to be in the same clan. How many clans are the integers from 1 to k, inclusive, broken into?
Example
 For divisors = [2, 3] and k = 6, the output should be 4
 The numbers 1 and 5 are friends and form a clan, 2 and 4 are friends and form a clan, and 3 and 6 do not have friends and each is a clan by itself. So the numbers 1 through 6 are broken into 4 clans.
Input/Output

[input] integer array divisors
 A non-empty array of positive integers.
 Constraints: 2 ‚â§ divisors.length < 10, 1 ‚â§ divisors[i] ‚â§ 10.

[input] integer k
 A positive integer.
 Constraints: 5 ‚â§ k ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/5886f3713a111b620f0000dc
–ó–∞–¥–∞—á–∞:
Task
 Let's call two integers A and B friends if each integer from the array divisors is either a divisor of both A and B or neither A nor B. If two integers are friends, they are said to be in the same clan. How many clans are the integers from 1 to k, inclusive, broken into?
Example
 For divisors = [2, 3] and k = 6, the output should be 4
 The numbers 1 and 5 are friends and form a clan, 2 and 4 are friends and form a clan, and 3 and 6 do not have friends and each is a clan by itself. So the numbers 1 through 6 are broken into 4 clans.
Input/Output

[input] integer array divisors
 A non-empty array of positive integers.
 Constraints: 2 ‚â§ divisors.length < 10, 1 ‚â§ divisors[i] ‚â§ 10.

[input] integer k
 A positive integer.
 Constraints: 5 ‚â§ k ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/5886da134703f125a6000033
–ó–∞–¥–∞—á–∞:
Task
 Let's call two integers A and B friends if each integer from the array divisors is either a divisor of both A and B or neither A nor B. If two integers are friends, they are said to be in the same clan. How many clans are the integers from 1 to k, inclusive, broken into?
Example
 For divisors = [2, 3] and k = 6, the output should be 4
 The numbers 1 and 5 are friends and form a clan, 2 and 4 are friends and form a clan, and 3 and 6 do not have friends and each is a clan by itself. So the numbers 1 through 6 are broken into 4 clans.
Input/Output

[input] integer array divisors
 A non-empty array of positive integers.
 Constraints: 2 ‚â§ divisors.length < 10, 1 ‚â§ divisors[i] ‚â§ 10.

[input] integer k
 A positive integer.
 Constraints: 5 ‚â§ k ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/5886cab0a95e17e61600009d
–ó–∞–¥–∞—á–∞:
Task
 Let's call two integers A and B friends if each integer from the array divisors is either a divisor of both A and B or neither A nor B. If two integers are friends, they are said to be in the same clan. How many clans are the integers from 1 to k, inclusive, broken into?
Example
 For divisors = [2, 3] and k = 6, the output should be 4
 The numbers 1 and 5 are friends and form a clan, 2 and 4 are friends and form a clan, and 3 and 6 do not have friends and each is a clan by itself. So the numbers 1 through 6 are broken into 4 clans.
Input/Output

[input] integer array divisors
 A non-empty array of positive integers.
 Constraints: 2 ‚â§ divisors.length < 10, 1 ‚â§ divisors[i] ‚â§ 10.

[input] integer k
 A positive integer.
 Constraints: 5 ‚â§ k ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/5886c6b2f3b6ae33dd0000be
–ó–∞–¥–∞—á–∞:
Task
 We want to turn the given integer into a number that has only one non-zero digit using a tail rounding approach. This means that at each step we take the last non 0 digit of the number and round it to 0 or to 10. If it's less than 5 we round it to 0 if it's larger than or equal to 5 we round it to 10 (rounding to 10 means increasing the next significant digit by 1). The process stops immediately once there is only one non-zero digit left.
Example
 For value = 15, the output should be 20
 For value = 1234, the output should be 1000.
 1234 -> 1230 -> 1200 -> 1000.
 For value = 1445, the output should be 2000.
 1445 -> 1450 -> 1500 -> 2000.
Input/Output

[input] integer value
A positive integer.
Constraints: 1 ‚â§ value ‚â§ 108

[output] an integer
The rounded number.
========================================
URL: https://www.codewars.com/kata/58856a06760b85c4e6000055
–ó–∞–¥–∞—á–∞:
Task
 We want to turn the given integer into a number that has only one non-zero digit using a tail rounding approach. This means that at each step we take the last non 0 digit of the number and round it to 0 or to 10. If it's less than 5 we round it to 0 if it's larger than or equal to 5 we round it to 10 (rounding to 10 means increasing the next significant digit by 1). The process stops immediately once there is only one non-zero digit left.
Example
 For value = 15, the output should be 20
 For value = 1234, the output should be 1000.
 1234 -> 1230 -> 1200 -> 1000.
 For value = 1445, the output should be 2000.
 1445 -> 1450 -> 1500 -> 2000.
Input/Output

[input] integer value
A positive integer.
Constraints: 1 ‚â§ value ‚â§ 108

[output] an integer
The rounded number.
========================================
URL: https://www.codewars.com/kata/5885b5d2b632089dc30000cc
–ó–∞–¥–∞—á–∞:
Task
 We want to turn the given integer into a number that has only one non-zero digit using a tail rounding approach. This means that at each step we take the last non 0 digit of the number and round it to 0 or to 10. If it's less than 5 we round it to 0 if it's larger than or equal to 5 we round it to 10 (rounding to 10 means increasing the next significant digit by 1). The process stops immediately once there is only one non-zero digit left.
Example
 For value = 15, the output should be 20
 For value = 1234, the output should be 1000.
 1234 -> 1230 -> 1200 -> 1000.
 For value = 1445, the output should be 2000.
 1445 -> 1450 -> 1500 -> 2000.
Input/Output

[input] integer value
A positive integer.
Constraints: 1 ‚â§ value ‚â§ 108

[output] an integer
The rounded number.
========================================
URL: https://www.codewars.com/kata/58846d50f54f021d90000012
–ó–∞–¥–∞—á–∞:
Task
 We want to turn the given integer into a number that has only one non-zero digit using a tail rounding approach. This means that at each step we take the last non 0 digit of the number and round it to 0 or to 10. If it's less than 5 we round it to 0 if it's larger than or equal to 5 we round it to 10 (rounding to 10 means increasing the next significant digit by 1). The process stops immediately once there is only one non-zero digit left.
Example
 For value = 15, the output should be 20
 For value = 1234, the output should be 1000.
 1234 -> 1230 -> 1200 -> 1000.
 For value = 1445, the output should be 2000.
 1445 -> 1450 -> 1500 -> 2000.
Input/Output

[input] integer value
A positive integer.
Constraints: 1 ‚â§ value ‚â§ 108

[output] an integer
The rounded number.
========================================
URL: https://www.codewars.com/kata/5884731139a9b4b7a8000002
–ó–∞–¥–∞—á–∞:
Task
 We want to turn the given integer into a number that has only one non-zero digit using a tail rounding approach. This means that at each step we take the last non 0 digit of the number and round it to 0 or to 10. If it's less than 5 we round it to 0 if it's larger than or equal to 5 we round it to 10 (rounding to 10 means increasing the next significant digit by 1). The process stops immediately once there is only one non-zero digit left.
Example
 For value = 15, the output should be 20
 For value = 1234, the output should be 1000.
 1234 -> 1230 -> 1200 -> 1000.
 For value = 1445, the output should be 2000.
 1445 -> 1450 -> 1500 -> 2000.
Input/Output

[input] integer value
A positive integer.
Constraints: 1 ‚â§ value ‚â§ 108

[output] an integer
The rounded number.
========================================
URL: https://www.codewars.com/kata/58846b46f4456a8919000025
–ó–∞–¥–∞—á–∞:
Task
 You are given two numbers a and b where 0 ‚â§ a ‚â§ b. Imagine you construct an array of all the integers from a to b inclusive. You need to count the number of 1s in the binary representations of all the numbers in the array.
Example
 For a = 2 and b = 7, the output should be 11
 Given a = 2 and b = 7 the array is: [2, 3, 4, 5, 6, 7]. Converting the numbers to binary, we get [10, 11, 100, 101, 110, 111], which contains 1 + 2 + 1 + 2 + 2 + 3 = 11 1s.
Input/Output

[input] integer a

 Constraints: 0 ‚â§ a ‚â§ b.

[input] integer b

 Constraints: a ‚â§ b ‚â§ 100.

[output] an integer
========================================
URL: https://www.codewars.com/kata/58845a92bd573378f4000035
–ó–∞–¥–∞—á–∞:
Task
 You are given two numbers a and b where 0 ‚â§ a ‚â§ b. Imagine you construct an array of all the integers from a to b inclusive. You need to count the number of 1s in the binary representations of all the numbers in the array.
Example
 For a = 2 and b = 7, the output should be 11
 Given a = 2 and b = 7 the array is: [2, 3, 4, 5, 6, 7]. Converting the numbers to binary, we get [10, 11, 100, 101, 110, 111], which contains 1 + 2 + 1 + 2 + 2 + 3 = 11 1s.
Input/Output

[input] integer a

 Constraints: 0 ‚â§ a ‚â§ b.

[input] integer b

 Constraints: a ‚â§ b ‚â§ 100.

[output] an integer
========================================
URL: https://www.codewars.com/kata/5884615cbd573356ab000050
–ó–∞–¥–∞—á–∞:
Task
 You are given two numbers a and b where 0 ‚â§ a ‚â§ b. Imagine you construct an array of all the integers from a to b inclusive. You need to count the number of 1s in the binary representations of all the numbers in the array.
Example
 For a = 2 and b = 7, the output should be 11
 Given a = 2 and b = 7 the array is: [2, 3, 4, 5, 6, 7]. Converting the numbers to binary, we get [10, 11, 100, 101, 110, 111], which contains 1 + 2 + 1 + 2 + 2 + 3 = 11 1s.
Input/Output

[input] integer a

 Constraints: 0 ‚â§ a ‚â§ b.

[input] integer b

 Constraints: a ‚â§ b ‚â§ 100.

[output] an integer
========================================
URL: https://www.codewars.com/kata/588463cae61257e44600006d
–ó–∞–¥–∞—á–∞:
Task
 You are given two numbers a and b where 0 ‚â§ a ‚â§ b. Imagine you construct an array of all the integers from a to b inclusive. You need to count the number of 1s in the binary representations of all the numbers in the array.
Example
 For a = 2 and b = 7, the output should be 11
 Given a = 2 and b = 7 the array is: [2, 3, 4, 5, 6, 7]. Converting the numbers to binary, we get [10, 11, 100, 101, 110, 111], which contains 1 + 2 + 1 + 2 + 2 + 3 = 11 1s.
Input/Output

[input] integer a

 Constraints: 0 ‚â§ a ‚â§ b.

[input] integer b

 Constraints: a ‚â§ b ‚â§ 100.

[output] an integer
========================================
URL: https://www.codewars.com/kata/58845748bd5733f1b300001f
–ó–∞–¥–∞—á–∞:
Task
 You are given two numbers a and b where 0 ‚â§ a ‚â§ b. Imagine you construct an array of all the integers from a to b inclusive. You need to count the number of 1s in the binary representations of all the numbers in the array.
Example
 For a = 2 and b = 7, the output should be 11
 Given a = 2 and b = 7 the array is: [2, 3, 4, 5, 6, 7]. Converting the numbers to binary, we get [10, 11, 100, 101, 110, 111], which contains 1 + 2 + 1 + 2 + 2 + 3 = 11 1s.
Input/Output

[input] integer a

 Constraints: 0 ‚â§ a ‚â§ b.

[input] integer b

 Constraints: a ‚â§ b ‚â§ 100.

[output] an integer
========================================
URL: https://www.codewars.com/kata/588453ea56daa4af920000ca
–ó–∞–¥–∞—á–∞:
Task
 You found two items in a treasure chest! The first item weighs weight1 and is worth value1, and the second item weighs weight2 and is worth value2. What is the total maximum value of the items you can take with you, assuming that your max weight capacity is maxW/max_w and you can't come back for the items later?
Example
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 8, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 10 (or equivalent for PHP)
 You can only carry the first item.
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 16 (or equivalent for PHP)
 You're strong enough to take both of the items with you.
 For value1 = 10, weight1 = 10, value2 = 6, weight2 = 10 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 0 (or equivalent for PHP)
 Unfortunately, you're not strong enough to take any one :(
Input/Output

[input] integer value1

 Constraints: 2 ‚â§ value1 ‚â§ 50.

[input] integer weight1

 Constraints: 2 ‚â§ weight1 ‚â§ 30.

[input] integer value2

 Constraints: 2 ‚â§ value2 ‚â§ 50.

[input] integer weight2

 Constraints: 2 ‚â§ weight2 ‚â§ 30.

[input] integer maxW/max_w

 Constraints: 1 ‚â§ maxW ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/58844f1a76933b1cd0000023
–ó–∞–¥–∞—á–∞:
Task
 You found two items in a treasure chest! The first item weighs weight1 and is worth value1, and the second item weighs weight2 and is worth value2. What is the total maximum value of the items you can take with you, assuming that your max weight capacity is maxW/max_w and you can't come back for the items later?
Example
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 8, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 10 (or equivalent for PHP)
 You can only carry the first item.
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 16 (or equivalent for PHP)
 You're strong enough to take both of the items with you.
 For value1 = 10, weight1 = 10, value2 = 6, weight2 = 10 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 0 (or equivalent for PHP)
 Unfortunately, you're not strong enough to take any one :(
Input/Output

[input] integer value1

 Constraints: 2 ‚â§ value1 ‚â§ 50.

[input] integer weight1

 Constraints: 2 ‚â§ weight1 ‚â§ 30.

[input] integer value2

 Constraints: 2 ‚â§ value2 ‚â§ 50.

[input] integer weight2

 Constraints: 2 ‚â§ weight2 ‚â§ 30.

[input] integer maxW/max_w

 Constraints: 1 ‚â§ maxW ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/588431bb76933b84520000d3
–ó–∞–¥–∞—á–∞:
Task
 You found two items in a treasure chest! The first item weighs weight1 and is worth value1, and the second item weighs weight2 and is worth value2. What is the total maximum value of the items you can take with you, assuming that your max weight capacity is maxW/max_w and you can't come back for the items later?
Example
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 8, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 10 (or equivalent for PHP)
 You can only carry the first item.
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 16 (or equivalent for PHP)
 You're strong enough to take both of the items with you.
 For value1 = 10, weight1 = 10, value2 = 6, weight2 = 10 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 0 (or equivalent for PHP)
 Unfortunately, you're not strong enough to take any one :(
Input/Output

[input] integer value1

 Constraints: 2 ‚â§ value1 ‚â§ 50.

[input] integer weight1

 Constraints: 2 ‚â§ weight1 ‚â§ 30.

[input] integer value2

 Constraints: 2 ‚â§ value2 ‚â§ 50.

[input] integer weight2

 Constraints: 2 ‚â§ weight2 ‚â§ 30.

[input] integer maxW/max_w

 Constraints: 1 ‚â§ maxW ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/58844a13aa037ff143000072
–ó–∞–¥–∞—á–∞:
Task
 You found two items in a treasure chest! The first item weighs weight1 and is worth value1, and the second item weighs weight2 and is worth value2. What is the total maximum value of the items you can take with you, assuming that your max weight capacity is maxW/max_w and you can't come back for the items later?
Example
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 8, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 10 (or equivalent for PHP)
 You can only carry the first item.
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 16 (or equivalent for PHP)
 You're strong enough to take both of the items with you.
 For value1 = 10, weight1 = 10, value2 = 6, weight2 = 10 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 0 (or equivalent for PHP)
 Unfortunately, you're not strong enough to take any one :(
Input/Output

[input] integer value1

 Constraints: 2 ‚â§ value1 ‚â§ 50.

[input] integer weight1

 Constraints: 2 ‚â§ weight1 ‚â§ 30.

[input] integer value2

 Constraints: 2 ‚â§ value2 ‚â§ 50.

[input] integer weight2

 Constraints: 2 ‚â§ weight2 ‚â§ 30.

[input] integer maxW/max_w

 Constraints: 1 ‚â§ maxW ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/58842a2b4e8efb92b7000080
–ó–∞–¥–∞—á–∞:
Task
 You found two items in a treasure chest! The first item weighs weight1 and is worth value1, and the second item weighs weight2 and is worth value2. What is the total maximum value of the items you can take with you, assuming that your max weight capacity is maxW/max_w and you can't come back for the items later?
Example
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 8, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 10 (or equivalent for PHP)
 You can only carry the first item.
 For value1 = 10, weight1 = 5, value2 = 6, weight2 = 4 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 16 (or equivalent for PHP)
 You're strong enough to take both of the items with you.
 For value1 = 10, weight1 = 10, value2 = 6, weight2 = 10 and maxW = 9, the output should be
 knapsackLight(value1, weight1, value2, weight2, maxW) === 0 (or equivalent for PHP)
 Unfortunately, you're not strong enough to take any one :(
Input/Output

[input] integer value1

 Constraints: 2 ‚â§ value1 ‚â§ 50.

[input] integer weight1

 Constraints: 2 ‚â§ weight1 ‚â§ 30.

[input] integer value2

 Constraints: 2 ‚â§ value2 ‚â§ 50.

[input] integer weight2

 Constraints: 2 ‚â§ weight2 ‚â§ 30.

[input] integer maxW/max_w

 Constraints: 1 ‚â§ maxW ‚â§ 50.

[output] an integer
========================================
URL: https://www.codewars.com/kata/5881460c780e0dd207000084
–ó–∞–¥–∞—á–∞:
This kata is part of the collection Mary's Puzzle Books.
Mary brought home a "spot the differences" book. The book is full of a bunch of problems, and each problem consists of two strings that are similar. However, in each string there are a few characters that are different. An example puzzle from her book is:
String 1: "abcdefg"
String 2: "abcqetg"

Notice how the "d" from String 1 has become a "q" in String 2, and "f" from String 1 has become a "t" in String 2.
It's your job to help Mary solve the puzzles. Write a program spot_diff/Spot that will compare the two strings and return a list with the positions where the two strings differ. In the example above, your program should return [3, 5] because String 1 is different from String 2 at positions 3 and 5.
NOTES:
‚Ä¢ If both strings are the same, return []
‚Ä¢ Both strings will always be the same length
‚Ä¢ Capitalization and punctuation matter
========================================
URL: https://www.codewars.com/kata/588425ee4e8efb583d000088
–ó–∞–¥–∞—á–∞:
This kata is part of the collection Mary's Puzzle Books.
Mary brought home a "spot the differences" book. The book is full of a bunch of problems, and each problem consists of two strings that are similar. However, in each string there are a few characters that are different. An example puzzle from her book is:
String 1: "abcdefg"
String 2: "abcqetg"

Notice how the "d" from String 1 has become a "q" in String 2, and "f" from String 1 has become a "t" in String 2.
It's your job to help Mary solve the puzzles. Write a program spot_diff/Spot that will compare the two strings and return a list with the positions where the two strings differ. In the example above, your program should return [3, 5] because String 1 is different from String 2 at positions 3 and 5.
NOTES:
‚Ä¢ If both strings are the same, return []
‚Ä¢ Both strings will always be the same length
‚Ä¢ Capitalization and punctuation matter
========================================
URL: https://www.codewars.com/kata/58841cb52a077503c4000015
–ó–∞–¥–∞—á–∞:
This kata is part of the collection Mary's Puzzle Books.
Mary brought home a "spot the differences" book. The book is full of a bunch of problems, and each problem consists of two strings that are similar. However, in each string there are a few characters that are different. An example puzzle from her book is:
String 1: "abcdefg"
String 2: "abcqetg"

Notice how the "d" from String 1 has become a "q" in String 2, and "f" from String 1 has become a "t" in String 2.
It's your job to help Mary solve the puzzles. Write a program spot_diff/Spot that will compare the two strings and return a list with the positions where the two strings differ. In the example above, your program should return [3, 5] because String 1 is different from String 2 at positions 3 and 5.
NOTES:
‚Ä¢ If both strings are the same, return []
‚Ä¢ Both strings will always be the same length
‚Ä¢ Capitalization and punctuation matter
========================================
URL: https://www.codewars.com/kata/5882b052bdeafec15e0000e6
–ó–∞–¥–∞—á–∞:
This kata is part of the collection Mary's Puzzle Books.
Mary brought home a "spot the differences" book. The book is full of a bunch of problems, and each problem consists of two strings that are similar. However, in each string there are a few characters that are different. An example puzzle from her book is:
String 1: "abcdefg"
String 2: "abcqetg"

Notice how the "d" from String 1 has become a "q" in String 2, and "f" from String 1 has become a "t" in String 2.
It's your job to help Mary solve the puzzles. Write a program spot_diff/Spot that will compare the two strings and return a list with the positions where the two strings differ. In the example above, your program should return [3, 5] because String 1 is different from String 2 at positions 3 and 5.
NOTES:
‚Ä¢ If both strings are the same, return []
‚Ä¢ Both strings will always be the same length
‚Ä¢ Capitalization and punctuation matter
========================================
URL: https://www.codewars.com/kata/588422ba4e8efb583d00007d
–ó–∞–¥–∞—á–∞:
This kata is part of the collection Mary's Puzzle Books.
Mary brought home a "spot the differences" book. The book is full of a bunch of problems, and each problem consists of two strings that are similar. However, in each string there are a few characters that are different. An example puzzle from her book is:
String 1: "abcdefg"
String 2: "abcqetg"

Notice how the "d" from String 1 has become a "q" in String 2, and "f" from String 1 has become a "t" in String 2.
It's your job to help Mary solve the puzzles. Write a program spot_diff/Spot that will compare the two strings and return a list with the positions where the two strings differ. In the example above, your program should return [3, 5] because String 1 is different from String 2 at positions 3 and 5.
NOTES:
‚Ä¢ If both strings are the same, return []
‚Ä¢ Both strings will always be the same length
‚Ä¢ Capitalization and punctuation matter
========================================
URL: https://www.codewars.com/kata/58811e9cfd05cb5aed0000a4
–ó–∞–¥–∞—á–∞:
Write a function taking in a string like WOW this is REALLY          amazing and returning Wow this is really amazing. String should be capitalized and properly spaced. Using re and string is not allowed.
Examples:
filter_words('HELLO CAN YOU HEAR ME') #=> Hello can you hear me
filter_words('now THIS is REALLY interesting') #=> Now this is really interesting
filter_words('THAT was EXTRAORDINARY!') #=> That was extraordinary!

filter_words('HELLO CAN YOU HEAR ME') #=> Hello can you hear me
filter_words('now THIS is REALLY interesting') #=> Now this is really interesting
filter_words('THAT was EXTRAORDINARY!') #=> That was extraordinary!
========================================
URL: https://www.codewars.com/kata/587c37897f7dc251a0000001
–ó–∞–¥–∞—á–∞:
Write a function taking in a string like WOW this is REALLY          amazing and returning Wow this is really amazing. String should be capitalized and properly spaced. Using re and string is not allowed.
Examples:
filter_words('HELLO CAN YOU HEAR ME') #=> Hello can you hear me
filter_words('now THIS is REALLY interesting') #=> Now this is really interesting
filter_words('THAT was EXTRAORDINARY!') #=> That was extraordinary!

filter_words('HELLO CAN YOU HEAR ME') #=> Hello can you hear me
filter_words('now THIS is REALLY interesting') #=> Now this is really interesting
filter_words('THAT was EXTRAORDINARY!') #=> That was extraordinary!
========================================
URL: https://www.codewars.com/kata/587b6a5e8726476f9b0000e7
–ó–∞–¥–∞—á–∞:
Write a function taking in a string like WOW this is REALLY          amazing and returning Wow this is really amazing. String should be capitalized and properly spaced. Using re and string is not allowed.
Examples:
filter_words('HELLO CAN YOU HEAR ME') #=> Hello can you hear me
filter_words('now THIS is REALLY interesting') #=> Now this is really interesting
filter_words('THAT was EXTRAORDINARY!') #=> That was extraordinary!

filter_words('HELLO CAN YOU HEAR ME') #=> Hello can you hear me
filter_words('now THIS is REALLY interesting') #=> Now this is really interesting
filter_words('THAT was EXTRAORDINARY!') #=> That was extraordinary!
========================================
URL: https://www.codewars.com/kata/587f1e1f39d444cee6000ad4
–ó–∞–¥–∞—á–∞:
Write a function taking in a string like WOW this is REALLY          amazing and returning Wow this is really amazing. String should be capitalized and properly spaced. Using re and string is not allowed.
Examples:
filter_words('HELLO CAN YOU HEAR ME') #=> Hello can you hear me
filter_words('now THIS is REALLY interesting') #=> Now this is really interesting
filter_words('THAT was EXTRAORDINARY!') #=> That was extraordinary!

filter_words('HELLO CAN YOU HEAR ME') #=> Hello can you hear me
filter_words('now THIS is REALLY interesting') #=> Now this is really interesting
filter_words('THAT was EXTRAORDINARY!') #=> That was extraordinary!
========================================
URL: https://www.codewars.com/kata/587854330594a6fb7e000057
–ó–∞–¥–∞—á–∞:
The "Russian Peasant Method" is an old algorithm used by Russian peasants (and before them ancient Egyptians) to perform multiplication.  Consider that X and Y are two numbers.  X can be any number but Y must be a positive integer. To multiply X and Y:

Let the product = 0
If Y is odd, then the product = product + X
X = X + X
Y = integer part of Y / 2 
if Y is nonzero, repeat from step 2; otherwise the algorithm terminates and returns the product.

For example:
Let X = 10
Let Y = 5
X: 10 20 40 80
Y: 5  2  1  0
product = 10 + 40 = 50
Note: usage of multiplication is of course forbidden...
========================================
URL: https://www.codewars.com/kata/5872637c2eefcb1216000081
–ó–∞–¥–∞—á–∞:
The "Russian Peasant Method" is an old algorithm used by Russian peasants (and before them ancient Egyptians) to perform multiplication.  Consider that X and Y are two numbers.  X can be any number but Y must be a positive integer. To multiply X and Y:

Let the product = 0
If Y is odd, then the product = product + X
X = X + X
Y = integer part of Y / 2 
if Y is nonzero, repeat from step 2; otherwise the algorithm terminates and returns the product.

For example:
Let X = 10
Let Y = 5
X: 10 20 40 80
Y: 5  2  1  0
product = 10 + 40 = 50
Note: usage of multiplication is of course forbidden...
========================================
URL: https://www.codewars.com/kata/5874657211d7d6176a00012f
–ó–∞–¥–∞—á–∞:
The "Russian Peasant Method" is an old algorithm used by Russian peasants (and before them ancient Egyptians) to perform multiplication.  Consider that X and Y are two numbers.  X can be any number but Y must be a positive integer. To multiply X and Y:

Let the product = 0
If Y is odd, then the product = product + X
X = X + X
Y = integer part of Y / 2 
if Y is nonzero, repeat from step 2; otherwise the algorithm terminates and returns the product.

For example:
Let X = 10
Let Y = 5
X: 10 20 40 80
Y: 5  2  1  0
product = 10 + 40 = 50
Note: usage of multiplication is of course forbidden...
========================================
URL: https://www.codewars.com/kata/5870ef72aa04283934000043
–ó–∞–¥–∞—á–∞:
The "Russian Peasant Method" is an old algorithm used by Russian peasants (and before them ancient Egyptians) to perform multiplication.  Consider that X and Y are two numbers.  X can be any number but Y must be a positive integer. To multiply X and Y:

Let the product = 0
If Y is odd, then the product = product + X
X = X + X
Y = integer part of Y / 2 
if Y is nonzero, repeat from step 2; otherwise the algorithm terminates and returns the product.

For example:
Let X = 10
Let Y = 5
X: 10 20 40 80
Y: 5  2  1  0
product = 10 + 40 = 50
Note: usage of multiplication is of course forbidden...
========================================
URL: https://www.codewars.com/kata/58712dfa5c538b6fc7000569
–ó–∞–¥–∞—á–∞:
The "Russian Peasant Method" is an old algorithm used by Russian peasants (and before them ancient Egyptians) to perform multiplication.  Consider that X and Y are two numbers.  X can be any number but Y must be a positive integer. To multiply X and Y:

Let the product = 0
If Y is odd, then the product = product + X
X = X + X
Y = integer part of Y / 2 
if Y is nonzero, repeat from step 2; otherwise the algorithm terminates and returns the product.

For example:
Let X = 10
Let Y = 5
X: 10 20 40 80
Y: 5  2  1  0
product = 10 + 40 = 50
Note: usage of multiplication is of course forbidden...
========================================
URL: https://www.codewars.com/kata/58702c0ca44cfc50dc000245
–ó–∞–¥–∞—á–∞:
You'll be given a string of characters as an input. Complete the function that returns a list of strings: 
(a) in the reverse order of the original string, and 
(b) with each successive string starting one character further in from the end of the original string.  
Assume the original string is at least 3 characters long.  Try to do this using slices and avoid converting the string to a list.
Examples
'123'   ==>  ['321', '21', '1']
'abcde' ==>  ['edcba', 'dcba', 'cba', 'ba', 'a']
========================================
URL: https://www.codewars.com/kata/586f6741c66d18c22800010a
–ó–∞–¥–∞—á–∞:
You'll be given a string of characters as an input. Complete the function that returns a list of strings: 
(a) in the reverse order of the original string, and 
(b) with each successive string starting one character further in from the end of the original string.  
Assume the original string is at least 3 characters long.  Try to do this using slices and avoid converting the string to a list.
Examples
'123'   ==>  ['321', '21', '1']
'abcde' ==>  ['edcba', 'dcba', 'cba', 'ba', 'a']
========================================
URL: https://www.codewars.com/kata/586ed2dbaa0428f791000885
–ó–∞–¥–∞—á–∞:
You'll be given a string of characters as an input. Complete the function that returns a list of strings: 
(a) in the reverse order of the original string, and 
(b) with each successive string starting one character further in from the end of the original string.  
Assume the original string is at least 3 characters long.  Try to do this using slices and avoid converting the string to a list.
Examples
'123'   ==>  ['321', '21', '1']
'abcde' ==>  ['edcba', 'dcba', 'cba', 'ba', 'a']
========================================
URL: https://www.codewars.com/kata/586f61bdfd53c6cce50004ee
–ó–∞–¥–∞—á–∞:
You'll be given a string of characters as an input. Complete the function that returns a list of strings: 
(a) in the reverse order of the original string, and 
(b) with each successive string starting one character further in from the end of the original string.  
Assume the original string is at least 3 characters long.  Try to do this using slices and avoid converting the string to a list.
Examples
'123'   ==>  ['321', '21', '1']
'abcde' ==>  ['edcba', 'dcba', 'cba', 'ba', 'a']
========================================
URL: https://www.codewars.com/kata/586efc2dcf7be0f217000619
–ó–∞–¥–∞—á–∞:
You'll be given a string of characters as an input. Complete the function that returns a list of strings: 
(a) in the reverse order of the original string, and 
(b) with each successive string starting one character further in from the end of the original string.  
Assume the original string is at least 3 characters long.  Try to do this using slices and avoid converting the string to a list.
Examples
'123'   ==>  ['321', '21', '1']
'abcde' ==>  ['edcba', 'dcba', 'cba', 'ba', 'a']
========================================
URL: https://www.codewars.com/kata/586ec0b8d098206cce001141
–ó–∞–¥–∞—á–∞:
Complete the function that takes a sequence of numbers as single parameter. Your function must return the sum of the even values of this sequence.
Only numbers without decimals like 4 or 4.0 can be even. 
The input is a sequence of numbers: integers and/or floats. 
Examples
[4, 3, 1, 2, 5, 10, 6, 7, 9, 8]  -->  30   # because 4 + 2 + 10 + 6 + 8 = 30
[]                               -->  0
========================================
URL: https://www.codewars.com/kata/586e4c61aa0428f04e000069
–ó–∞–¥–∞—á–∞:
Complete the function that takes a sequence of numbers as single parameter. Your function must return the sum of the even values of this sequence.
Only numbers without decimals like 4 or 4.0 can be even. 
The input is a sequence of numbers: integers and/or floats. 
Examples
[4, 3, 1, 2, 5, 10, 6, 7, 9, 8]  -->  30   # because 4 + 2 + 10 + 6 + 8 = 30
[]                               -->  0
========================================
URL: https://www.codewars.com/kata/586d12f0aa042830910001d1
–ó–∞–¥–∞—á–∞:
Complete the function that takes a sequence of numbers as single parameter. Your function must return the sum of the even values of this sequence.
Only numbers without decimals like 4 or 4.0 can be even. 
The input is a sequence of numbers: integers and/or floats. 
Examples
[4, 3, 1, 2, 5, 10, 6, 7, 9, 8]  -->  30   # because 4 + 2 + 10 + 6 + 8 = 30
[]                               -->  0
========================================
URL: https://www.codewars.com/kata/586e1d458cb711f0a800033b
–ó–∞–¥–∞—á–∞:
Complete the function that takes a sequence of numbers as single parameter. Your function must return the sum of the even values of this sequence.
Only numbers without decimals like 4 or 4.0 can be even. 
The input is a sequence of numbers: integers and/or floats. 
Examples
[4, 3, 1, 2, 5, 10, 6, 7, 9, 8]  -->  30   # because 4 + 2 + 10 + 6 + 8 = 30
[]                               -->  0
========================================
URL: https://www.codewars.com/kata/586beb5ba44cfc44ed0006c3
–ó–∞–¥–∞—á–∞:
Complete the function that takes a sequence of numbers as single parameter. Your function must return the sum of the even values of this sequence.
Only numbers without decimals like 4 or 4.0 can be even. 
The input is a sequence of numbers: integers and/or floats. 
Examples
[4, 3, 1, 2, 5, 10, 6, 7, 9, 8]  -->  30   # because 4 + 2 + 10 + 6 + 8 = 30
[]                               -->  0
========================================
URL: https://www.codewars.com/kata/586bca7fa44cfc833e00005c
–ó–∞–¥–∞—á–∞:
Carpe Diem! Yolo! On Fleek? Crushing it.  You've got some awesome phrases that you want to hang up on your wall.  The problem is that you don't have any frames laying around.  So instead, you decide to write a program to create your frame.
Write a function called frame that will take two parameters as input: a phrase and optionally a character for the border of the frame.
frame("Yolo", '@');

Returns:
@@@@@@@@
@      @
@ Yolo @
@      @
@@@@@@@@

Notice that the framed phrase has a single space to the left and to the right.  Also, there is an empty line both above and below the phrase.
If a second parameter is not given, assume the frame should be decorated using the * character.
You can assume that all phrases are a single line (no new line characters), and that the second parameter to the function (the frame character) is always a single character.
If an empty string is passed in, return an emtpy frame.  For example:
frame("");

returns:
****
*  *
*  *
****
========================================
URL: https://www.codewars.com/kata/586909e4c66d18dd1800009b
–ó–∞–¥–∞—á–∞:
Carpe Diem! Yolo! On Fleek? Crushing it.  You've got some awesome phrases that you want to hang up on your wall.  The problem is that you don't have any frames laying around.  So instead, you decide to write a program to create your frame.
Write a function called frame that will take two parameters as input: a phrase and optionally a character for the border of the frame.
frame("Yolo", '@');

Returns:
@@@@@@@@
@      @
@ Yolo @
@      @
@@@@@@@@

Notice that the framed phrase has a single space to the left and to the right.  Also, there is an empty line both above and below the phrase.
If a second parameter is not given, assume the frame should be decorated using the * character.
You can assume that all phrases are a single line (no new line characters), and that the second parameter to the function (the frame character) is always a single character.
If an empty string is passed in, return an emtpy frame.  For example:
frame("");

returns:
****
*  *
*  *
****
========================================
URL: https://www.codewars.com/kata/5868812b15f0057e05000001
–ó–∞–¥–∞—á–∞:
Carpe Diem! Yolo! On Fleek? Crushing it.  You've got some awesome phrases that you want to hang up on your wall.  The problem is that you don't have any frames laying around.  So instead, you decide to write a program to create your frame.
Write a function called frame that will take two parameters as input: a phrase and optionally a character for the border of the frame.
frame("Yolo", '@');

Returns:
@@@@@@@@
@      @
@ Yolo @
@      @
@@@@@@@@

Notice that the framed phrase has a single space to the left and to the right.  Also, there is an empty line both above and below the phrase.
If a second parameter is not given, assume the frame should be decorated using the * character.
You can assume that all phrases are a single line (no new line characters), and that the second parameter to the function (the frame character) is always a single character.
If an empty string is passed in, return an emtpy frame.  For example:
frame("");

returns:
****
*  *
*  *
****
========================================
URL: https://www.codewars.com/kata/586a1af1c66d18ad81000134
–ó–∞–¥–∞—á–∞:
Carpe Diem! Yolo! On Fleek? Crushing it.  You've got some awesome phrases that you want to hang up on your wall.  The problem is that you don't have any frames laying around.  So instead, you decide to write a program to create your frame.
Write a function called frame that will take two parameters as input: a phrase and optionally a character for the border of the frame.
frame("Yolo", '@');

Returns:
@@@@@@@@
@      @
@ Yolo @
@      @
@@@@@@@@

Notice that the framed phrase has a single space to the left and to the right.  Also, there is an empty line both above and below the phrase.
If a second parameter is not given, assume the frame should be decorated using the * character.
You can assume that all phrases are a single line (no new line characters), and that the second parameter to the function (the frame character) is always a single character.
If an empty string is passed in, return an emtpy frame.  For example:
frame("");

returns:
****
*  *
*  *
****
========================================
URL: https://www.codewars.com/kata/5867d76b36959fa4a400034e
–ó–∞–¥–∞—á–∞:
Carpe Diem! Yolo! On Fleek? Crushing it.  You've got some awesome phrases that you want to hang up on your wall.  The problem is that you don't have any frames laying around.  So instead, you decide to write a program to create your frame.
Write a function called frame that will take two parameters as input: a phrase and optionally a character for the border of the frame.
frame("Yolo", '@');

Returns:
@@@@@@@@
@      @
@ Yolo @
@      @
@@@@@@@@

Notice that the framed phrase has a single space to the left and to the right.  Also, there is an empty line both above and below the phrase.
If a second parameter is not given, assume the frame should be decorated using the * character.
You can assume that all phrases are a single line (no new line characters), and that the second parameter to the function (the frame character) is always a single character.
If an empty string is passed in, return an emtpy frame.  For example:
frame("");

returns:
****
*  *
*  *
****
========================================
URL: https://www.codewars.com/kata/5866f10311ceec6ac10001e8
–ó–∞–¥–∞—á–∞:
This Kata is intended as a small challenge for my students
All Star Code Challenge #20
Create a function called addArrays() that combines two arrays of equal length, summing each element of the first with the corresponding element in the second, returning the "combined" summed array.Raise an error if input arguments are not of equal length.
addArrays([1,2],[4,5]); // => [5,7]
addArrays([1,2,3],[4,5]); // => Error

Note:Expect array input to either contain numbers or strings onlyThe function should also allow for concatenating string
addArrays(["a"],["b"]) // => ["ab"]
========================================
URL: https://www.codewars.com/kata/5866a58b9cbc02c4f8000cac
–ó–∞–¥–∞—á–∞:
This Kata is intended as a small challenge for my students
All Star Code Challenge #20
Create a function called addArrays() that combines two arrays of equal length, summing each element of the first with the corresponding element in the second, returning the "combined" summed array.Raise an error if input arguments are not of equal length.
addArrays([1,2],[4,5]); // => [5,7]
addArrays([1,2,3],[4,5]); // => Error

Note:Expect array input to either contain numbers or strings onlyThe function should also allow for concatenating string
addArrays(["a"],["b"]) // => ["ab"]
========================================
URL: https://www.codewars.com/kata/5865a75da5f19147370000c7
–ó–∞–¥–∞—á–∞:
This Kata is intended as a small challenge for my students
All Star Code Challenge #20
Create a function called addArrays() that combines two arrays of equal length, summing each element of the first with the corresponding element in the second, returning the "combined" summed array.Raise an error if input arguments are not of equal length.
addArrays([1,2],[4,5]); // => [5,7]
addArrays([1,2,3],[4,5]); // => Error

Note:Expect array input to either contain numbers or strings onlyThe function should also allow for concatenating string
addArrays(["a"],["b"]) // => ["ab"]
========================================
URL: https://www.codewars.com/kata/5866c6cf442e3f16f9000089
–ó–∞–¥–∞—á–∞:
This Kata is intended as a small challenge for my students
All Star Code Challenge #20
Create a function called addArrays() that combines two arrays of equal length, summing each element of the first with the corresponding element in the second, returning the "combined" summed array.Raise an error if input arguments are not of equal length.
addArrays([1,2],[4,5]); // => [5,7]
addArrays([1,2,3],[4,5]); // => Error

Note:Expect array input to either contain numbers or strings onlyThe function should also allow for concatenating string
addArrays(["a"],["b"]) // => ["ab"]
========================================
URL: https://www.codewars.com/kata/5865cff66b5699883f0001aa
–ó–∞–¥–∞—á–∞:
This Kata is intended as a small challenge for my students
All Star Code Challenge #20
Create a function called addArrays() that combines two arrays of equal length, summing each element of the first with the corresponding element in the second, returning the "combined" summed array.Raise an error if input arguments are not of equal length.
addArrays([1,2],[4,5]); // => [5,7]
addArrays([1,2,3],[4,5]); // => Error

Note:Expect array input to either contain numbers or strings onlyThe function should also allow for concatenating string
addArrays(["a"],["b"]) // => ["ab"]
========================================
URL: https://www.codewars.com/kata/5865a28fa5f191d35f0000f8
–ó–∞–¥–∞—á–∞:
As a member of the editorial board of the prestigous scientific Journal Proceedings of the National Academy of Sciences, you've decided to go back and review how well old articles you've published stand up to modern publication best practices. Specifically, you'd like to re-evaluate old findings in light of recent literature about "researcher degrees of freedom".
You want to categorize all the old articles into three groups: "Fine", "Needs review" and "Pants on fire".
In order to categorize them you've enlisted an army of unpaid grad students to review and give you two data points from each study: (1) the p-value behind the paper's primary conclusions, and (2) the number of recommended author requirements to limit researcher degrees of freedom the authors satisfied:
* Authors must decide the rule for terminating data collection before data collection begins and report this rule in the article.
* Authors must collect at least 20 observations per cell or else provide a compelling cost-of-data-collection justification. 
* Authors must list all variables collected in a study.
* Authors must report all experimental conditions, including failed manipulations.
* If observations are eliminated, authors must also report what the statistical results are if those observations are included.
* If an analysis includes a covariate, authors must report the statistical results of the analysis without the covariate.

Your army of tenure-hungry grad students will give you the p-value as a float between 1.0 and 0.0 exclusive, and the number of author requirements satisfied as an integer from 0 through 6 inclusive.
You've decided to write a function, categorize_study() to automatically categorize each study based on these two inputs using the completely scientifically legitimate "bs-factor". The bs-factor for a particular paper is calculated as follows:

bs-factor when the authors satisfy all six requirements is 1
bs-factor when the authors satisfy only five requirements is 2
bs-factor when the authors satisfy only four requirements is 4
bs-factor when the authors satisfy only three requirements is 8...

Your function should multiply the p-value by the bs-factor and use that product to return one of the following strings:

product is less than 0.05: "Fine"
product is 0.05 to 0.15: "Needs review"
product is 0.15 or higher: "Pants on fire"

You've also decided that all studies meeting none of the author requirements that would have been categorized as "Fine" should instead be categorized as "Needs review".
For example:
categorize_study(0.01, 3) should return "Needs review" because the p-value times the bs-factor is 0.08.
categorize_study(0.04, 6) should return "Fine" because the p-value times the bs-factor is only 0.04.
categorize_study(0.0001, 0) should return "Needs review" even though the p-value times the bs-factor is only 0.0064.
categorize_study(0.012, 0) should return "Pants on fire" because the p-value times the bs-factor is 0.768.
========================================
URL: https://www.codewars.com/kata/586566b773bd9cbe2b000013
–ó–∞–¥–∞—á–∞:
As a member of the editorial board of the prestigous scientific Journal Proceedings of the National Academy of Sciences, you've decided to go back and review how well old articles you've published stand up to modern publication best practices. Specifically, you'd like to re-evaluate old findings in light of recent literature about "researcher degrees of freedom".
You want to categorize all the old articles into three groups: "Fine", "Needs review" and "Pants on fire".
In order to categorize them you've enlisted an army of unpaid grad students to review and give you two data points from each study: (1) the p-value behind the paper's primary conclusions, and (2) the number of recommended author requirements to limit researcher degrees of freedom the authors satisfied:
* Authors must decide the rule for terminating data collection before data collection begins and report this rule in the article.
* Authors must collect at least 20 observations per cell or else provide a compelling cost-of-data-collection justification. 
* Authors must list all variables collected in a study.
* Authors must report all experimental conditions, including failed manipulations.
* If observations are eliminated, authors must also report what the statistical results are if those observations are included.
* If an analysis includes a covariate, authors must report the statistical results of the analysis without the covariate.

Your army of tenure-hungry grad students will give you the p-value as a float between 1.0 and 0.0 exclusive, and the number of author requirements satisfied as an integer from 0 through 6 inclusive.
You've decided to write a function, categorize_study() to automatically categorize each study based on these two inputs using the completely scientifically legitimate "bs-factor". The bs-factor for a particular paper is calculated as follows:

bs-factor when the authors satisfy all six requirements is 1
bs-factor when the authors satisfy only five requirements is 2
bs-factor when the authors satisfy only four requirements is 4
bs-factor when the authors satisfy only three requirements is 8...

Your function should multiply the p-value by the bs-factor and use that product to return one of the following strings:

product is less than 0.05: "Fine"
product is 0.05 to 0.15: "Needs review"
product is 0.15 or higher: "Pants on fire"

You've also decided that all studies meeting none of the author requirements that would have been categorized as "Fine" should instead be categorized as "Needs review".
For example:
categorize_study(0.01, 3) should return "Needs review" because the p-value times the bs-factor is 0.08.
categorize_study(0.04, 6) should return "Fine" because the p-value times the bs-factor is only 0.04.
categorize_study(0.0001, 0) should return "Needs review" even though the p-value times the bs-factor is only 0.0064.
categorize_study(0.012, 0) should return "Pants on fire" because the p-value times the bs-factor is 0.768.
========================================
URL: https://www.codewars.com/kata/58659b1261cbfc8bfc00020a
–ó–∞–¥–∞—á–∞:
As a member of the editorial board of the prestigous scientific Journal Proceedings of the National Academy of Sciences, you've decided to go back and review how well old articles you've published stand up to modern publication best practices. Specifically, you'd like to re-evaluate old findings in light of recent literature about "researcher degrees of freedom".
You want to categorize all the old articles into three groups: "Fine", "Needs review" and "Pants on fire".
In order to categorize them you've enlisted an army of unpaid grad students to review and give you two data points from each study: (1) the p-value behind the paper's primary conclusions, and (2) the number of recommended author requirements to limit researcher degrees of freedom the authors satisfied:
* Authors must decide the rule for terminating data collection before data collection begins and report this rule in the article.
* Authors must collect at least 20 observations per cell or else provide a compelling cost-of-data-collection justification. 
* Authors must list all variables collected in a study.
* Authors must report all experimental conditions, including failed manipulations.
* If observations are eliminated, authors must also report what the statistical results are if those observations are included.
* If an analysis includes a covariate, authors must report the statistical results of the analysis without the covariate.

Your army of tenure-hungry grad students will give you the p-value as a float between 1.0 and 0.0 exclusive, and the number of author requirements satisfied as an integer from 0 through 6 inclusive.
You've decided to write a function, categorize_study() to automatically categorize each study based on these two inputs using the completely scientifically legitimate "bs-factor". The bs-factor for a particular paper is calculated as follows:

bs-factor when the authors satisfy all six requirements is 1
bs-factor when the authors satisfy only five requirements is 2
bs-factor when the authors satisfy only four requirements is 4
bs-factor when the authors satisfy only three requirements is 8...

Your function should multiply the p-value by the bs-factor and use that product to return one of the following strings:

product is less than 0.05: "Fine"
product is 0.05 to 0.15: "Needs review"
product is 0.15 or higher: "Pants on fire"

You've also decided that all studies meeting none of the author requirements that would have been categorized as "Fine" should instead be categorized as "Needs review".
For example:
categorize_study(0.01, 3) should return "Needs review" because the p-value times the bs-factor is 0.08.
categorize_study(0.04, 6) should return "Fine" because the p-value times the bs-factor is only 0.04.
categorize_study(0.0001, 0) should return "Needs review" even though the p-value times the bs-factor is only 0.0064.
categorize_study(0.012, 0) should return "Pants on fire" because the p-value times the bs-factor is 0.768.
========================================
URL: https://www.codewars.com/kata/5864eb8039c5ab9cd400005c
–ó–∞–¥–∞—á–∞:
As a member of the editorial board of the prestigous scientific Journal Proceedings of the National Academy of Sciences, you've decided to go back and review how well old articles you've published stand up to modern publication best practices. Specifically, you'd like to re-evaluate old findings in light of recent literature about "researcher degrees of freedom".
You want to categorize all the old articles into three groups: "Fine", "Needs review" and "Pants on fire".
In order to categorize them you've enlisted an army of unpaid grad students to review and give you two data points from each study: (1) the p-value behind the paper's primary conclusions, and (2) the number of recommended author requirements to limit researcher degrees of freedom the authors satisfied:
* Authors must decide the rule for terminating data collection before data collection begins and report this rule in the article.
* Authors must collect at least 20 observations per cell or else provide a compelling cost-of-data-collection justification. 
* Authors must list all variables collected in a study.
* Authors must report all experimental conditions, including failed manipulations.
* If observations are eliminated, authors must also report what the statistical results are if those observations are included.
* If an analysis includes a covariate, authors must report the statistical results of the analysis without the covariate.

Your army of tenure-hungry grad students will give you the p-value as a float between 1.0 and 0.0 exclusive, and the number of author requirements satisfied as an integer from 0 through 6 inclusive.
You've decided to write a function, categorize_study() to automatically categorize each study based on these two inputs using the completely scientifically legitimate "bs-factor". The bs-factor for a particular paper is calculated as follows:

bs-factor when the authors satisfy all six requirements is 1
bs-factor when the authors satisfy only five requirements is 2
bs-factor when the authors satisfy only four requirements is 4
bs-factor when the authors satisfy only three requirements is 8...

Your function should multiply the p-value by the bs-factor and use that product to return one of the following strings:

product is less than 0.05: "Fine"
product is 0.05 to 0.15: "Needs review"
product is 0.15 or higher: "Pants on fire"

You've also decided that all studies meeting none of the author requirements that would have been categorized as "Fine" should instead be categorized as "Needs review".
For example:
categorize_study(0.01, 3) should return "Needs review" because the p-value times the bs-factor is 0.08.
categorize_study(0.04, 6) should return "Fine" because the p-value times the bs-factor is only 0.04.
categorize_study(0.0001, 0) should return "Needs review" even though the p-value times the bs-factor is only 0.0064.
categorize_study(0.012, 0) should return "Pants on fire" because the p-value times the bs-factor is 0.768.
========================================
URL: https://www.codewars.com/kata/5864af6739c5ab26e80000bf
–ó–∞–¥–∞—á–∞:
As a member of the editorial board of the prestigous scientific Journal Proceedings of the National Academy of Sciences, you've decided to go back and review how well old articles you've published stand up to modern publication best practices. Specifically, you'd like to re-evaluate old findings in light of recent literature about "researcher degrees of freedom".
You want to categorize all the old articles into three groups: "Fine", "Needs review" and "Pants on fire".
In order to categorize them you've enlisted an army of unpaid grad students to review and give you two data points from each study: (1) the p-value behind the paper's primary conclusions, and (2) the number of recommended author requirements to limit researcher degrees of freedom the authors satisfied:
* Authors must decide the rule for terminating data collection before data collection begins and report this rule in the article.
* Authors must collect at least 20 observations per cell or else provide a compelling cost-of-data-collection justification. 
* Authors must list all variables collected in a study.
* Authors must report all experimental conditions, including failed manipulations.
* If observations are eliminated, authors must also report what the statistical results are if those observations are included.
* If an analysis includes a covariate, authors must report the statistical results of the analysis without the covariate.

Your army of tenure-hungry grad students will give you the p-value as a float between 1.0 and 0.0 exclusive, and the number of author requirements satisfied as an integer from 0 through 6 inclusive.
You've decided to write a function, categorize_study() to automatically categorize each study based on these two inputs using the completely scientifically legitimate "bs-factor". The bs-factor for a particular paper is calculated as follows:

bs-factor when the authors satisfy all six requirements is 1
bs-factor when the authors satisfy only five requirements is 2
bs-factor when the authors satisfy only four requirements is 4
bs-factor when the authors satisfy only three requirements is 8...

Your function should multiply the p-value by the bs-factor and use that product to return one of the following strings:

product is less than 0.05: "Fine"
product is 0.05 to 0.15: "Needs review"
product is 0.15 or higher: "Pants on fire"

You've also decided that all studies meeting none of the author requirements that would have been categorized as "Fine" should instead be categorized as "Needs review".
For example:
categorize_study(0.01, 3) should return "Needs review" because the p-value times the bs-factor is 0.08.
categorize_study(0.04, 6) should return "Fine" because the p-value times the bs-factor is only 0.04.
categorize_study(0.0001, 0) should return "Needs review" even though the p-value times the bs-factor is only 0.0064.
categorize_study(0.012, 0) should return "Pants on fire" because the p-value times the bs-factor is 0.768.
========================================
URL: https://www.codewars.com/kata/58644e8ddf95f81a38001d8d
–ó–∞–¥–∞—á–∞:
Remember all those quadratic equations you had to solve by hand in highschool? Well, no more! You're going to solve all the quadratic equations you might ever[1] have to wrangle with in the future once and for all by coding up the quadratic formula to handle them automatically.
Write a function quadratic_formula() that takes three arguments, a, b, and c that represent the coefficients in a formula of the form ax^2 + bx + c = 0. Your function shoud return a list with two elements where each element is one of the two roots. If the formula produces a double root the result should be a list where both elements are that value.
For example, quadratic_formula(2, 16, 1) should return the list [-0.06299606299409444, -7.937003937005906].
The order of the roots is not important.
[1] Well, not ever ever. You don't need to worry about getting quadratic equations with complex roots where you need the square root of a negative number. All the test cases will be for equations with real roots.
========================================
URL: https://www.codewars.com/kata/586430a5b3a675296a000395
–ó–∞–¥–∞—á–∞:
Remember all those quadratic equations you had to solve by hand in highschool? Well, no more! You're going to solve all the quadratic equations you might ever[1] have to wrangle with in the future once and for all by coding up the quadratic formula to handle them automatically.
Write a function quadratic_formula() that takes three arguments, a, b, and c that represent the coefficients in a formula of the form ax^2 + bx + c = 0. Your function shoud return a list with two elements where each element is one of the two roots. If the formula produces a double root the result should be a list where both elements are that value.
For example, quadratic_formula(2, 16, 1) should return the list [-0.06299606299409444, -7.937003937005906].
The order of the roots is not important.
[1] Well, not ever ever. You don't need to worry about getting quadratic equations with complex roots where you need the square root of a negative number. All the test cases will be for equations with real roots.
========================================
URL: https://www.codewars.com/kata/5863f97fb3a675d9a700003f
–ó–∞–¥–∞—á–∞:
Remember all those quadratic equations you had to solve by hand in highschool? Well, no more! You're going to solve all the quadratic equations you might ever[1] have to wrangle with in the future once and for all by coding up the quadratic formula to handle them automatically.
Write a function quadratic_formula() that takes three arguments, a, b, and c that represent the coefficients in a formula of the form ax^2 + bx + c = 0. Your function shoud return a list with two elements where each element is one of the two roots. If the formula produces a double root the result should be a list where both elements are that value.
For example, quadratic_formula(2, 16, 1) should return the list [-0.06299606299409444, -7.937003937005906].
The order of the roots is not important.
[1] Well, not ever ever. You don't need to worry about getting quadratic equations with complex roots where you need the square root of a negative number. All the test cases will be for equations with real roots.
========================================
URL: https://www.codewars.com/kata/58640340b3a675d9a70000b9
–ó–∞–¥–∞—á–∞:
Remember all those quadratic equations you had to solve by hand in highschool? Well, no more! You're going to solve all the quadratic equations you might ever[1] have to wrangle with in the future once and for all by coding up the quadratic formula to handle them automatically.
Write a function quadratic_formula() that takes three arguments, a, b, and c that represent the coefficients in a formula of the form ax^2 + bx + c = 0. Your function shoud return a list with two elements where each element is one of the two roots. If the formula produces a double root the result should be a list where both elements are that value.
For example, quadratic_formula(2, 16, 1) should return the list [-0.06299606299409444, -7.937003937005906].
The order of the roots is not important.
[1] Well, not ever ever. You don't need to worry about getting quadratic equations with complex roots where you need the square root of a negative number. All the test cases will be for equations with real roots.
========================================
URL: https://www.codewars.com/kata/58635f1b2489549be50003f1
–ó–∞–¥–∞—á–∞:
Remember all those quadratic equations you had to solve by hand in highschool? Well, no more! You're going to solve all the quadratic equations you might ever[1] have to wrangle with in the future once and for all by coding up the quadratic formula to handle them automatically.
Write a function quadratic_formula() that takes three arguments, a, b, and c that represent the coefficients in a formula of the form ax^2 + bx + c = 0. Your function shoud return a list with two elements where each element is one of the two roots. If the formula produces a double root the result should be a list where both elements are that value.
For example, quadratic_formula(2, 16, 1) should return the list [-0.06299606299409444, -7.937003937005906].
The order of the roots is not important.
[1] Well, not ever ever. You don't need to worry about getting quadratic equations with complex roots where you need the square root of a negative number. All the test cases will be for equations with real roots.
========================================
URL: https://www.codewars.com/kata/5862eeeae20244d5eb000005
–ó–∞–¥–∞—á–∞:
Write a program to determine if the two given numbers are coprime. A pair of numbers are coprime if their greatest shared factor is 1.
The inputs will always be two positive integers between 2 and 99.
Examples
20 and 27:

Factors of 20: 1, 2, 4, 5, 10, 20
Factors of 27: 1, 3, 9, 27
Greatest shared factor: 1
Result: 20 and 27 are coprime

12 and 39:

Factors of 12: 1, 2, 3, 4, 6, 12
Factors of 39: 1, 3, 13, 39
Greatest shared factor: 3
Result: 12 and 39 are not coprimes
========================================
URL: https://www.codewars.com/kata/585eaef9851516fcae00004d
–ó–∞–¥–∞—á–∞:
Write a program to determine if the two given numbers are coprime. A pair of numbers are coprime if their greatest shared factor is 1.
The inputs will always be two positive integers between 2 and 99.
Examples
20 and 27:

Factors of 20: 1, 2, 4, 5, 10, 20
Factors of 27: 1, 3, 9, 27
Greatest shared factor: 1
Result: 20 and 27 are coprime

12 and 39:

Factors of 12: 1, 2, 3, 4, 6, 12
Factors of 39: 1, 3, 13, 39
Greatest shared factor: 3
Result: 12 and 39 are not coprimes
========================================
URL: https://www.codewars.com/kata/5862e7c63f8628a126000e18
–ó–∞–¥–∞—á–∞:
Write a program to determine if the two given numbers are coprime. A pair of numbers are coprime if their greatest shared factor is 1.
The inputs will always be two positive integers between 2 and 99.
Examples
20 and 27:

Factors of 20: 1, 2, 4, 5, 10, 20
Factors of 27: 1, 3, 9, 27
Greatest shared factor: 1
Result: 20 and 27 are coprime

12 and 39:

Factors of 12: 1, 2, 3, 4, 6, 12
Factors of 39: 1, 3, 13, 39
Greatest shared factor: 3
Result: 12 and 39 are not coprimes
========================================
URL: https://www.codewars.com/kata/585d7b4685151614190001fd
–ó–∞–¥–∞—á–∞:
Write a program to determine if the two given numbers are coprime. A pair of numbers are coprime if their greatest shared factor is 1.
The inputs will always be two positive integers between 2 and 99.
Examples
20 and 27:

Factors of 20: 1, 2, 4, 5, 10, 20
Factors of 27: 1, 3, 9, 27
Greatest shared factor: 1
Result: 20 and 27 are coprime

12 and 39:

Factors of 12: 1, 2, 3, 4, 6, 12
Factors of 39: 1, 3, 13, 39
Greatest shared factor: 3
Result: 12 and 39 are not coprimes
========================================
URL: https://www.codewars.com/kata/585c50e75d0930e6a7000336
–ó–∞–¥–∞—á–∞:
Write a program to determine if the two given numbers are coprime. A pair of numbers are coprime if their greatest shared factor is 1.
The inputs will always be two positive integers between 2 and 99.
Examples
20 and 27:

Factors of 20: 1, 2, 4, 5, 10, 20
Factors of 27: 1, 3, 9, 27
Greatest shared factor: 1
Result: 20 and 27 are coprime

12 and 39:

Factors of 12: 1, 2, 3, 4, 6, 12
Factors of 39: 1, 3, 13, 39
Greatest shared factor: 3
Result: 12 and 39 are not coprimes
========================================
URL: https://www.codewars.com/kata/585ba66ce08bae791b00011b
–ó–∞–¥–∞—á–∞:
You just took a contract with the Jedi council. They need you to write a function, greet_jedi(), which takes two arguments (a first name and a last name), works out the corresponding Jedi name, and returns a string greeting the Jedi.
A person's Jedi name is the first three letters of their last name followed by the first two letters of their first name. For example:
>>> greet_jedi('Beyonce', 'Knowles')
'Greetings, master KnoBe'

Note the capitalization: the first letter of each name is capitalized. Your input may or may not be capitalized. Your function should handle it and return the Jedi name in the correct case no matter what case the input is in:
>>> greet_jedi('grae', 'drake')
'Greetings, master DraGr'

You can trust that your input names will always be at least three characters long.
If you're stuck, check out the python.org tutorial section on strings and search "slice".
========================================
URL: https://www.codewars.com/kata/585b1fafe08bae9988000314
–ó–∞–¥–∞—á–∞:
You just took a contract with the Jedi council. They need you to write a function, greet_jedi(), which takes two arguments (a first name and a last name), works out the corresponding Jedi name, and returns a string greeting the Jedi.
A person's Jedi name is the first three letters of their last name followed by the first two letters of their first name. For example:
>>> greet_jedi('Beyonce', 'Knowles')
'Greetings, master KnoBe'

Note the capitalization: the first letter of each name is capitalized. Your input may or may not be capitalized. Your function should handle it and return the Jedi name in the correct case no matter what case the input is in:
>>> greet_jedi('grae', 'drake')
'Greetings, master DraGr'

You can trust that your input names will always be at least three characters long.
If you're stuck, check out the python.org tutorial section on strings and search "slice".
========================================
URL: https://www.codewars.com/kata/585af8f645376cda59000200
–ó–∞–¥–∞—á–∞:
You just took a contract with the Jedi council. They need you to write a function, greet_jedi(), which takes two arguments (a first name and a last name), works out the corresponding Jedi name, and returns a string greeting the Jedi.
A person's Jedi name is the first three letters of their last name followed by the first two letters of their first name. For example:
>>> greet_jedi('Beyonce', 'Knowles')
'Greetings, master KnoBe'

Note the capitalization: the first letter of each name is capitalized. Your input may or may not be capitalized. Your function should handle it and return the Jedi name in the correct case no matter what case the input is in:
>>> greet_jedi('grae', 'drake')
'Greetings, master DraGr'

You can trust that your input names will always be at least three characters long.
If you're stuck, check out the python.org tutorial section on strings and search "slice".
========================================
URL: https://www.codewars.com/kata/585a36b445376cbc22000072
–ó–∞–¥–∞—á–∞:
You just took a contract with the Jedi council. They need you to write a function, greet_jedi(), which takes two arguments (a first name and a last name), works out the corresponding Jedi name, and returns a string greeting the Jedi.
A person's Jedi name is the first three letters of their last name followed by the first two letters of their first name. For example:
>>> greet_jedi('Beyonce', 'Knowles')
'Greetings, master KnoBe'

Note the capitalization: the first letter of each name is capitalized. Your input may or may not be capitalized. Your function should handle it and return the Jedi name in the correct case no matter what case the input is in:
>>> greet_jedi('grae', 'drake')
'Greetings, master DraGr'

You can trust that your input names will always be at least three characters long.
If you're stuck, check out the python.org tutorial section on strings and search "slice".
========================================
URL: https://www.codewars.com/kata/585a29183d357b31f700023f
–ó–∞–¥–∞—á–∞:
You just took a contract with the Jedi council. They need you to write a function, greet_jedi(), which takes two arguments (a first name and a last name), works out the corresponding Jedi name, and returns a string greeting the Jedi.
A person's Jedi name is the first three letters of their last name followed by the first two letters of their first name. For example:
>>> greet_jedi('Beyonce', 'Knowles')
'Greetings, master KnoBe'

Note the capitalization: the first letter of each name is capitalized. Your input may or may not be capitalized. Your function should handle it and return the Jedi name in the correct case no matter what case the input is in:
>>> greet_jedi('grae', 'drake')
'Greetings, master DraGr'

You can trust that your input names will always be at least three characters long.
If you're stuck, check out the python.org tutorial section on strings and search "slice".
========================================
URL: https://www.codewars.com/kata/585a033e3a36cdc50a00011c
–ó–∞–¥–∞—á–∞:
You need to cook pancakes, but you are very hungry. As known, one needs to fry a pancake one minute on each side. What is the minimum time you need to cook n pancakes, if you can put on the frying pan only m pancakes at a time? n and m are positive integers between 1 and 1000.
========================================
URL: https://www.codewars.com/kata/5859c82bd41fc6207900007a
–ó–∞–¥–∞—á–∞:
You need to cook pancakes, but you are very hungry. As known, one needs to fry a pancake one minute on each side. What is the minimum time you need to cook n pancakes, if you can put on the frying pan only m pancakes at a time? n and m are positive integers between 1 and 1000.
========================================
URL: https://www.codewars.com/kata/58552bdb68b034a1a80001fb
–ó–∞–¥–∞—á–∞:
You need to cook pancakes, but you are very hungry. As known, one needs to fry a pancake one minute on each side. What is the minimum time you need to cook n pancakes, if you can put on the frying pan only m pancakes at a time? n and m are positive integers between 1 and 1000.
========================================
URL: https://www.codewars.com/kata/5857e8bb9948644aa1000246
–ó–∞–¥–∞—á–∞:
You need to cook pancakes, but you are very hungry. As known, one needs to fry a pancake one minute on each side. What is the minimum time you need to cook n pancakes, if you can put on the frying pan only m pancakes at a time? n and m are positive integers between 1 and 1000.
========================================
URL: https://www.codewars.com/kata/58558673b6b0e5a16b000028
–ó–∞–¥–∞—á–∞:
You need to cook pancakes, but you are very hungry. As known, one needs to fry a pancake one minute on each side. What is the minimum time you need to cook n pancakes, if you can put on the frying pan only m pancakes at a time? n and m are positive integers between 1 and 1000.
========================================
URL: https://www.codewars.com/kata/58545549b45c01ccab00058c
–ó–∞–¥–∞—á–∞:
Task
You need to create a function, helloWorld, that will return the String Hello, World! without actually using raw strings. This includes quotes, double quotes and template strings. You can, however, use the String constructor and any related functions.
You cannot use the following:
"Hello, World!"
'Hello, World!'
`Hello, World!`

 Good luck and try to be as creative as possible!
========================================
URL: https://www.codewars.com/kata/584dc1b7766c2bb158000226
–ó–∞–¥–∞—á–∞:
Task
You need to create a function, helloWorld, that will return the String Hello, World! without actually using raw strings. This includes quotes, double quotes and template strings. You can, however, use the String constructor and any related functions.
You cannot use the following:
"Hello, World!"
'Hello, World!'
`Hello, World!`

 Good luck and try to be as creative as possible!
========================================
URL: https://www.codewars.com/kata/584d2c19766c2b2f6a00004f
–ó–∞–¥–∞—á–∞:
Task
You need to create a function, helloWorld, that will return the String Hello, World! without actually using raw strings. This includes quotes, double quotes and template strings. You can, however, use the String constructor and any related functions.
You cannot use the following:
"Hello, World!"
'Hello, World!'
`Hello, World!`

 Good luck and try to be as creative as possible!
========================================
URL: https://www.codewars.com/kata/584d88622609c8bda30000cf
–ó–∞–¥–∞—á–∞:
Task
You need to create a function, helloWorld, that will return the String Hello, World! without actually using raw strings. This includes quotes, double quotes and template strings. You can, however, use the String constructor and any related functions.
You cannot use the following:
"Hello, World!"
'Hello, World!'
`Hello, World!`

 Good luck and try to be as creative as possible!
========================================
URL: https://www.codewars.com/kata/584c7b1e2cb5e1a727000047
–ó–∞–¥–∞—á–∞:
Task
You need to create a function, helloWorld, that will return the String Hello, World! without actually using raw strings. This includes quotes, double quotes and template strings. You can, however, use the String constructor and any related functions.
You cannot use the following:
"Hello, World!"
'Hello, World!'
`Hello, World!`

 Good luck and try to be as creative as possible!
========================================
URL: https://www.codewars.com/kata/584a6d9d7d22f8fa09000094
–ó–∞–¥–∞—á–∞:
Task:
Your job here is to implement a method, approx_root in Ruby/Python/Crystal and approxRoot in JavaScript/CoffeeScript, that takes one argument, n, and returns the approximate square root of that number, rounded to the nearest hundredth and computed in the following manner.

Start with n = 213 (as an example). 
To approximate the square root of n, we will first find the greatest perfect square that is below or equal to n. (In this example, that would be 196, or 14 squared.) We will call the square root of this number (which means sqrt 196, or 14) base.
Then, we will take the lowest perfect square that is greater than or equal to n. (In this example, that would be 225, or 15 squared.)
Next, subtract 196 (greatest perfect square less than or equal to n) from n. (213 - 196 = 17) We will call this value diff_gn.
Find the difference between the lowest perfect square greater than or equal to n and the greatest perfect square less than or equal to n. (225 ‚Äì 196 = 29) We will call this value diff_lg.
Your final answer is base + (diff_gn / diff_lg). In this example: 14 + (17 / 29) which is 14.59, rounded to the nearest hundredth.

Just to clarify, if the input is a perfect square itself, you should return the exact square of the input.
In case you are curious, the approximation (computed like above) for 213 rounded to four decimal places is 14.5862. The actual square root of 213 is 14.5945. 
Inputs will always be positive whole numbers. If you are having trouble understanding it, let me know with a comment, or take a look at the second group of the example cases.
Some examples:
approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

Also check out my other creations ‚Äî Square Roots: Simplifying/Desimplifying, Square and Cubic Factors, Keep the Order, Naming Files, Elections: Weighted Average, Identify Case, Split Without Loss, Adding Fractions,
Random Integers, Implement String#transpose, Implement Array#transpose!, Arrays and Procs #1, and Arrays and Procs #2.
If you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!
========================================
URL: https://www.codewars.com/kata/5848cd33c3689be0dc00175c
–ó–∞–¥–∞—á–∞:
Task:
Your job here is to implement a method, approx_root in Ruby/Python/Crystal and approxRoot in JavaScript/CoffeeScript, that takes one argument, n, and returns the approximate square root of that number, rounded to the nearest hundredth and computed in the following manner.

Start with n = 213 (as an example). 
To approximate the square root of n, we will first find the greatest perfect square that is below or equal to n. (In this example, that would be 196, or 14 squared.) We will call the square root of this number (which means sqrt 196, or 14) base.
Then, we will take the lowest perfect square that is greater than or equal to n. (In this example, that would be 225, or 15 squared.)
Next, subtract 196 (greatest perfect square less than or equal to n) from n. (213 - 196 = 17) We will call this value diff_gn.
Find the difference between the lowest perfect square greater than or equal to n and the greatest perfect square less than or equal to n. (225 ‚Äì 196 = 29) We will call this value diff_lg.
Your final answer is base + (diff_gn / diff_lg). In this example: 14 + (17 / 29) which is 14.59, rounded to the nearest hundredth.

Just to clarify, if the input is a perfect square itself, you should return the exact square of the input.
In case you are curious, the approximation (computed like above) for 213 rounded to four decimal places is 14.5862. The actual square root of 213 is 14.5945. 
Inputs will always be positive whole numbers. If you are having trouble understanding it, let me know with a comment, or take a look at the second group of the example cases.
Some examples:
approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

Also check out my other creations ‚Äî Square Roots: Simplifying/Desimplifying, Square and Cubic Factors, Keep the Order, Naming Files, Elections: Weighted Average, Identify Case, Split Without Loss, Adding Fractions,
Random Integers, Implement String#transpose, Implement Array#transpose!, Arrays and Procs #1, and Arrays and Procs #2.
If you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!
========================================
URL: https://www.codewars.com/kata/58488e89cc8feac6cb000941
–ó–∞–¥–∞—á–∞:
Task:
Your job here is to implement a method, approx_root in Ruby/Python/Crystal and approxRoot in JavaScript/CoffeeScript, that takes one argument, n, and returns the approximate square root of that number, rounded to the nearest hundredth and computed in the following manner.

Start with n = 213 (as an example). 
To approximate the square root of n, we will first find the greatest perfect square that is below or equal to n. (In this example, that would be 196, or 14 squared.) We will call the square root of this number (which means sqrt 196, or 14) base.
Then, we will take the lowest perfect square that is greater than or equal to n. (In this example, that would be 225, or 15 squared.)
Next, subtract 196 (greatest perfect square less than or equal to n) from n. (213 - 196 = 17) We will call this value diff_gn.
Find the difference between the lowest perfect square greater than or equal to n and the greatest perfect square less than or equal to n. (225 ‚Äì 196 = 29) We will call this value diff_lg.
Your final answer is base + (diff_gn / diff_lg). In this example: 14 + (17 / 29) which is 14.59, rounded to the nearest hundredth.

Just to clarify, if the input is a perfect square itself, you should return the exact square of the input.
In case you are curious, the approximation (computed like above) for 213 rounded to four decimal places is 14.5862. The actual square root of 213 is 14.5945. 
Inputs will always be positive whole numbers. If you are having trouble understanding it, let me know with a comment, or take a look at the second group of the example cases.
Some examples:
approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

Also check out my other creations ‚Äî Square Roots: Simplifying/Desimplifying, Square and Cubic Factors, Keep the Order, Naming Files, Elections: Weighted Average, Identify Case, Split Without Loss, Adding Fractions,
Random Integers, Implement String#transpose, Implement Array#transpose!, Arrays and Procs #1, and Arrays and Procs #2.
If you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!
========================================
URL: https://www.codewars.com/kata/58485a43d750d23bad0000e6
–ó–∞–¥–∞—á–∞:
Task:
Your job here is to implement a method, approx_root in Ruby/Python/Crystal and approxRoot in JavaScript/CoffeeScript, that takes one argument, n, and returns the approximate square root of that number, rounded to the nearest hundredth and computed in the following manner.

Start with n = 213 (as an example). 
To approximate the square root of n, we will first find the greatest perfect square that is below or equal to n. (In this example, that would be 196, or 14 squared.) We will call the square root of this number (which means sqrt 196, or 14) base.
Then, we will take the lowest perfect square that is greater than or equal to n. (In this example, that would be 225, or 15 squared.)
Next, subtract 196 (greatest perfect square less than or equal to n) from n. (213 - 196 = 17) We will call this value diff_gn.
Find the difference between the lowest perfect square greater than or equal to n and the greatest perfect square less than or equal to n. (225 ‚Äì 196 = 29) We will call this value diff_lg.
Your final answer is base + (diff_gn / diff_lg). In this example: 14 + (17 / 29) which is 14.59, rounded to the nearest hundredth.

Just to clarify, if the input is a perfect square itself, you should return the exact square of the input.
In case you are curious, the approximation (computed like above) for 213 rounded to four decimal places is 14.5862. The actual square root of 213 is 14.5945. 
Inputs will always be positive whole numbers. If you are having trouble understanding it, let me know with a comment, or take a look at the second group of the example cases.
Some examples:
approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

Also check out my other creations ‚Äî Square Roots: Simplifying/Desimplifying, Square and Cubic Factors, Keep the Order, Naming Files, Elections: Weighted Average, Identify Case, Split Without Loss, Adding Fractions,
Random Integers, Implement String#transpose, Implement Array#transpose!, Arrays and Procs #1, and Arrays and Procs #2.
If you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!
========================================
URL: https://www.codewars.com/kata/58475cce273e5560f40000fa
–ó–∞–¥–∞—á–∞:
Task:
Your job here is to implement a method, approx_root in Ruby/Python/Crystal and approxRoot in JavaScript/CoffeeScript, that takes one argument, n, and returns the approximate square root of that number, rounded to the nearest hundredth and computed in the following manner.

Start with n = 213 (as an example). 
To approximate the square root of n, we will first find the greatest perfect square that is below or equal to n. (In this example, that would be 196, or 14 squared.) We will call the square root of this number (which means sqrt 196, or 14) base.
Then, we will take the lowest perfect square that is greater than or equal to n. (In this example, that would be 225, or 15 squared.)
Next, subtract 196 (greatest perfect square less than or equal to n) from n. (213 - 196 = 17) We will call this value diff_gn.
Find the difference between the lowest perfect square greater than or equal to n and the greatest perfect square less than or equal to n. (225 ‚Äì 196 = 29) We will call this value diff_lg.
Your final answer is base + (diff_gn / diff_lg). In this example: 14 + (17 / 29) which is 14.59, rounded to the nearest hundredth.

Just to clarify, if the input is a perfect square itself, you should return the exact square of the input.
In case you are curious, the approximation (computed like above) for 213 rounded to four decimal places is 14.5862. The actual square root of 213 is 14.5945. 
Inputs will always be positive whole numbers. If you are having trouble understanding it, let me know with a comment, or take a look at the second group of the example cases.
Some examples:
approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# math.sqrt() isn't disabled.

approx_root(400) #=> 20
approx_root(401) #=> 
  # smallest perfect square above 401 is 441 or 21 squared
  # greatest perfect square below 401 is 400 or 20 squared
  # difference between 441 and 400 is 41
  # difference between 401 and 400 is 1
  # answer is 20 + (1 / 41) which becomes 20.02, rounded to the nearest hundredth
  # final answer = 20.02.
approx_root(2) #=>
  # smallest perfect square above 2 is 4 or 2 squared
  # greatest perfect square below 2 is 1 or 1 squared
  # difference between 4 and 1 is 3
  # difference between 2 and 1 is 1
  # answer is 1 + (1 / 3), which becomes 1.33, rounded to the nearest hundredth
  # final answer = 1.33.

# Math.sqrt() isn't disabled.

Also check out my other creations ‚Äî Square Roots: Simplifying/Desimplifying, Square and Cubic Factors, Keep the Order, Naming Files, Elections: Weighted Average, Identify Case, Split Without Loss, Adding Fractions,
Random Integers, Implement String#transpose, Implement Array#transpose!, Arrays and Procs #1, and Arrays and Procs #2.
If you notice any issues or have any suggestions/comments whatsoever, please don't hesitate to mark an issue or just comment. Thanks!
========================================
URL: https://www.codewars.com/kata/5846174c5955406d02000b59
–ó–∞–¥–∞—á–∞:
Given two numbers and an arithmetic operator (the name of it, as a string), return the result of the two numbers having that operator used on them. 
a and b will both be positive integers, and a will always be the first number in the operation, and b always the second.
The four operators are "add", "subtract", "divide", "multiply". 
A few examples:(Input1, Input2, Input3 --> Output)
5, 2, "add"      --> 7
5, 2, "subtract" --> 3
5, 2, "multiply" --> 10
5, 2, "divide"   --> 2.5

Try to do it without using if statements!
========================================
URL: https://www.codewars.com/kata/5844a422cbd2279a0c000281
–ó–∞–¥–∞—á–∞:
Given two numbers and an arithmetic operator (the name of it, as a string), return the result of the two numbers having that operator used on them. 
a and b will both be positive integers, and a will always be the first number in the operation, and b always the second.
The four operators are "add", "subtract", "divide", "multiply". 
A few examples:(Input1, Input2, Input3 --> Output)
5, 2, "add"      --> 7
5, 2, "subtract" --> 3
5, 2, "multiply" --> 10
5, 2, "divide"   --> 2.5

Try to do it without using if statements!
========================================
URL: https://www.codewars.com/kata/5840586b5225616069000001
–ó–∞–¥–∞—á–∞:
Given two numbers and an arithmetic operator (the name of it, as a string), return the result of the two numbers having that operator used on them. 
a and b will both be positive integers, and a will always be the first number in the operation, and b always the second.
The four operators are "add", "subtract", "divide", "multiply". 
A few examples:(Input1, Input2, Input3 --> Output)
5, 2, "add"      --> 7
5, 2, "subtract" --> 3
5, 2, "multiply" --> 10
5, 2, "divide"   --> 2.5

Try to do it without using if statements!
========================================
URL: https://www.codewars.com/kata/583f158ea20cfcbeb400000a
–ó–∞–¥–∞—á–∞:
Given two numbers and an arithmetic operator (the name of it, as a string), return the result of the two numbers having that operator used on them. 
a and b will both be positive integers, and a will always be the first number in the operation, and b always the second.
The four operators are "add", "subtract", "divide", "multiply". 
A few examples:(Input1, Input2, Input3 --> Output)
5, 2, "add"      --> 7
5, 2, "subtract" --> 3
5, 2, "multiply" --> 10
5, 2, "divide"   --> 2.5

Try to do it without using if statements!
========================================
URL: https://www.codewars.com/kata/5840946ea3d4c78e90000068
–ó–∞–¥–∞—á–∞:
Given two numbers and an arithmetic operator (the name of it, as a string), return the result of the two numbers having that operator used on them. 
a and b will both be positive integers, and a will always be the first number in the operation, and b always the second.
The four operators are "add", "subtract", "divide", "multiply". 
A few examples:(Input1, Input2, Input3 --> Output)
5, 2, "add"      --> 7
5, 2, "subtract" --> 3
5, 2, "multiply" --> 10
5, 2, "divide"   --> 2.5

Try to do it without using if statements!
========================================
URL: https://www.codewars.com/kata/583df40bf30065fa9900010c
–ó–∞–¥–∞—á–∞:
Print all numbers up to 3rd parameter which are multiple of both 1st and 2nd parameter.
Python, Javascript, Java, Ruby versions: return results in a list/array
NOTICE:

Do NOT worry about checking zeros or negative values.
To find out if 3rd parameter (the upper limit) is inclusive or not, check the tests, it differs in each translation
========================================
URL: https://www.codewars.com/kata/583ebb9328a0c034490001ba
–ó–∞–¥–∞—á–∞:
Print all numbers up to 3rd parameter which are multiple of both 1st and 2nd parameter.
Python, Javascript, Java, Ruby versions: return results in a list/array
NOTICE:

Do NOT worry about checking zeros or negative values.
To find out if 3rd parameter (the upper limit) is inclusive or not, check the tests, it differs in each translation
========================================
URL: https://www.codewars.com/kata/583989556754d6f4c700018e
–ó–∞–¥–∞—á–∞:
Print all numbers up to 3rd parameter which are multiple of both 1st and 2nd parameter.
Python, Javascript, Java, Ruby versions: return results in a list/array
NOTICE:

Do NOT worry about checking zeros or negative values.
To find out if 3rd parameter (the upper limit) is inclusive or not, check the tests, it differs in each translation
========================================
URL: https://www.codewars.com/kata/583ade15666df5a64e000058
–ó–∞–¥–∞—á–∞:
Print all numbers up to 3rd parameter which are multiple of both 1st and 2nd parameter.
Python, Javascript, Java, Ruby versions: return results in a list/array
NOTICE:

Do NOT worry about checking zeros or negative values.
To find out if 3rd parameter (the upper limit) is inclusive or not, check the tests, it differs in each translation
========================================
URL: https://www.codewars.com/kata/583ea278c68d96a5fd000abd
–ó–∞–¥–∞—á–∞:
Print all numbers up to 3rd parameter which are multiple of both 1st and 2nd parameter.
Python, Javascript, Java, Ruby versions: return results in a list/array
NOTICE:

Do NOT worry about checking zeros or negative values.
To find out if 3rd parameter (the upper limit) is inclusive or not, check the tests, it differs in each translation
========================================
URL: https://www.codewars.com/kata/583952fbc23341c7180002fd
–ó–∞–¥–∞—á–∞:
Agent 47, you have a new task!
Among citizens of the city X are hidden 2 dangerous criminal twins.
Your task is to identify them and eliminate!
Given an array of integers, your task is to find two same numbers and return one of them, for example in array [2, 3, 6, 34, 7, 8, 2] answer is 2.
If there are no twins in the city - return None or the equivalent in the language that you are using.
========================================
URL: https://www.codewars.com/kata/5834315e06f227a6ac000099
–ó–∞–¥–∞—á–∞:
Agent 47, you have a new task!
Among citizens of the city X are hidden 2 dangerous criminal twins.
Your task is to identify them and eliminate!
Given an array of integers, your task is to find two same numbers and return one of them, for example in array [2, 3, 6, 34, 7, 8, 2] answer is 2.
If there are no twins in the city - return None or the equivalent in the language that you are using.
========================================
URL: https://www.codewars.com/kata/5838e2978bbc04b7cd000008
–ó–∞–¥–∞—á–∞:
Agent 47, you have a new task!
Among citizens of the city X are hidden 2 dangerous criminal twins.
Your task is to identify them and eliminate!
Given an array of integers, your task is to find two same numbers and return one of them, for example in array [2, 3, 6, 34, 7, 8, 2] answer is 2.
If there are no twins in the city - return None or the equivalent in the language that you are using.
========================================
URL: https://www.codewars.com/kata/5838a66eaed8c259df000003
–ó–∞–¥–∞—á–∞:
Agent 47, you have a new task!
Among citizens of the city X are hidden 2 dangerous criminal twins.
Your task is to identify them and eliminate!
Given an array of integers, your task is to find two same numbers and return one of them, for example in array [2, 3, 6, 34, 7, 8, 2] answer is 2.
If there are no twins in the city - return None or the equivalent in the language that you are using.
========================================
URL: https://www.codewars.com/kata/58356a94f8358058f30004b5
–ó–∞–¥–∞—á–∞:
Agent 47, you have a new task!
Among citizens of the city X are hidden 2 dangerous criminal twins.
Your task is to identify them and eliminate!
Given an array of integers, your task is to find two same numbers and return one of them, for example in array [2, 3, 6, 34, 7, 8, 2] answer is 2.
If there are no twins in the city - return None or the equivalent in the language that you are using.
========================================
URL: https://www.codewars.com/kata/58342f14fa17ad4285000307
–ó–∞–¥–∞—á–∞:
Given 2 string parameters, show a concatenation of:

the reverse of the 2nd string with inverted case; e.g Fish -> HSIf
a separator in between both strings: @@@
the 1st string reversed with inverted case and then mirrored; e.g Water -> RETAwwATER 

** Keep in mind that this kata was initially designed for Shell, I'm aware it may be easier in other languages.**
========================================
URL: https://www.codewars.com/kata/5832db03d5bafb7d96000107
–ó–∞–¥–∞—á–∞:
Given 2 string parameters, show a concatenation of:

the reverse of the 2nd string with inverted case; e.g Fish -> HSIf
a separator in between both strings: @@@
the 1st string reversed with inverted case and then mirrored; e.g Water -> RETAwwATER 

** Keep in mind that this kata was initially designed for Shell, I'm aware it may be easier in other languages.**
========================================
URL: https://www.codewars.com/kata/58305403aeb69a460b00019a
–ó–∞–¥–∞—á–∞:
Given 2 string parameters, show a concatenation of:

the reverse of the 2nd string with inverted case; e.g Fish -> HSIf
a separator in between both strings: @@@
the 1st string reversed with inverted case and then mirrored; e.g Water -> RETAwwATER 

** Keep in mind that this kata was initially designed for Shell, I'm aware it may be easier in other languages.**
========================================
URL: https://www.codewars.com/kata/5831c204a31721e2ae000294
–ó–∞–¥–∞—á–∞:
Given 2 string parameters, show a concatenation of:

the reverse of the 2nd string with inverted case; e.g Fish -> HSIf
a separator in between both strings: @@@
the 1st string reversed with inverted case and then mirrored; e.g Water -> RETAwwATER 

** Keep in mind that this kata was initially designed for Shell, I'm aware it may be easier in other languages.**
========================================
URL: https://www.codewars.com/kata/58311faba317216aad000168
–ó–∞–¥–∞—á–∞:
Given 2 string parameters, show a concatenation of:

the reverse of the 2nd string with inverted case; e.g Fish -> HSIf
a separator in between both strings: @@@
the 1st string reversed with inverted case and then mirrored; e.g Water -> RETAwwATER 

** Keep in mind that this kata was initially designed for Shell, I'm aware it may be easier in other languages.**
========================================
URL: https://www.codewars.com/kata/582cb3a637c5583f2200005d
–ó–∞–¥–∞—á–∞:
Convert a linked list to a string
Related Kata
Although this Kata is not part of an official Series, you may also want to try out Parse a linked list from a string if you enjoyed this Kata.
Preloaded
Preloaded for you is a class, struct or derived data type Node ( depending on the language ) used to construct linked lists in this Kata:
typedef struct node {
  int data;
  struct node *next;
} Node;

      * Defined in the linkage section
       01  node.
           05 val     pic 9(4).
           05 nxt     usage pointer.

class Node {
  public $data, $next;
  public function __construct($data, $next = NULL) {
    $this->data = $data;
    $this->next = $next;
  }
}

class Node {
  constructor(data, next = null) {
    this.data = data;
    this.next = next;
  }
}

public class Node {
  public int Data { get; private set; }
  public Node Next { get; private set; }

  public Node(int data, Node next = null) {
    Data = data;
    Next = next;
  }
}

class Node():
    def __init__(self, data, next = None):
        self.data = data
        self.next = next

class Node {
    private int data;
    private Node next;
    
    public Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }
    
    public Node(int data) {
        this.data = data;
        this.next = null;
    }

    public int getData() {
        return data;
    }

    public Node getNext() {
        return next;
    }
}

class Node
  attr_reader :data, :next_node
  
  def initialize(data, next_node=nil)
    @data = data
    @next_node = next_node
  end
end

class Node
{
  public:
    int data;
    Node* next;
  
  Node(int data, Node* next = nullptr)
  {
    this->data = data;
    this->next = next;
  }
};

-- use regular lists, which are already singly-linked
data [a] = [] | a : [a]

typedef struct node {
  int data;
  struct node *next;
} Node;

type Node
  integer :: data
  type(Node), pointer :: next
end type Node

SYMBOL: +nil+
TUPLE: node data next ;
C: <node> node

Prerequisites
This Kata assumes that you are already familiar with the idea of a linked list.  If you do not know what that is, you may want to read this article on Wikipedia.  Specifically, the linked lists this Kata is referring to are singly linked lists, where the value of a specific node is stored in its data / $data / Data property, the reference to the next node is stored in its next / $next / Next / next_node property and the terminator for a list is null / NULL / None / nil / nullptr / null().
Task
Create a function stringify which accepts an argument list / $list and returns a string representation of the list.  The string representation of the list starts with the value of the current Node, specified by its data / $data / Data property, followed by a whitespace character, an arrow and another whitespace character (" -> "), followed by the rest of the list.  The end of the string representation of a list must always end with null / NULL / None / nil / nullptr / null() ( all caps or all lowercase depending on the language you are undertaking this Kata in ).  For example, given the following list:
&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

Node(1, Node(2, Node(3)))

new Node(1, new Node(2, new Node(3)))

Node.new(1, Node.new(2, Node.new(3)))

new Node(1, new Node(2, new Node(3)))

[1,2,3]

&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

type(Node), pointer :: oneTwoThree
! Where:
! oneTwoThree%data == 1
! oneTwoThree%next%data == 2
! oneTwoThree%next%next%data == 3
! oneTwoThree%next%next%next => null()

1 2 3 +nil+ <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 2.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 3.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3

... its string representation would be:
"1 -> 2 -> 3 -> null"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> None"

"1 -> 2 -> 3 -> nil"

"1 -> 2 -> 3 -> nullptr"

@"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> null()"

"1 -> 2 -> 3 -> +nil+"

       "1 -> 2 -> 3 -> NULL"

And given the following linked list:
new Node(0, new Node(1, new Node(4, new Node(9, new Node(16)))))

Node(0, Node(1, Node(4, Node(9, Node(16)))))

Node.new(0, Node.new(1, Node.new(4, Node.new(9, Node.new(16)))))

[ 0, 1, 4, 9, 16 ]

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

type(Node), pointer :: list
! Where:
! list%data == 0
! list%next%data == 1
! list%next%next%data == 4
! list%next%next%next%data == 9
! list%next%next%next%next%data == 16
! list%next%next%next%next%next => null()

0 1 4 9 16 +nil+ <node> <node> <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 0.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 4.
         05 nxt usage pointer.
       01 node4.
         05 val pic 9(4) value 9.
         05 nxt usage pointer.
       01 node5.
         05 val pic 9(4) value 16.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3
       set nxt of node3 to address of node4
       set nxt of node4 to address of node5

... its string representation would be:
"0 -> 1 -> 4 -> 9 -> 16 -> null"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> None"

"0 -> 1 -> 4 -> 9 -> 16 -> nil"

"0 -> 1 -> 4 -> 9 -> 16 -> nullptr"

@"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> null()"

"0 -> 1 -> 4 -> 9 -> 16 -> +nil+"

       "0 -> 1 -> 4 -> 9 -> 16 -> NULL"

Note that null / NULL / None / nil / nullptr / null() itself is also considered a valid linked list.  In that case, its string representation would simply be "null" / "NULL" / "None" / "nil" / "nullptr" / @"NULL" / "null()" ( again, depending on the language ).
For the simplicity of this Kata, you may assume that any Node in this Kata may only contain non-negative integer values.  For example, you will not encounter a Node whose data / $data / Data property is "Hello World".
Enjoy, and don't forget to check out my other Kata Series :D
========================================
URL: https://www.codewars.com/kata/582f52208278c6be55000067
–ó–∞–¥–∞—á–∞:
Convert a linked list to a string
Related Kata
Although this Kata is not part of an official Series, you may also want to try out Parse a linked list from a string if you enjoyed this Kata.
Preloaded
Preloaded for you is a class, struct or derived data type Node ( depending on the language ) used to construct linked lists in this Kata:
typedef struct node {
  int data;
  struct node *next;
} Node;

      * Defined in the linkage section
       01  node.
           05 val     pic 9(4).
           05 nxt     usage pointer.

class Node {
  public $data, $next;
  public function __construct($data, $next = NULL) {
    $this->data = $data;
    $this->next = $next;
  }
}

class Node {
  constructor(data, next = null) {
    this.data = data;
    this.next = next;
  }
}

public class Node {
  public int Data { get; private set; }
  public Node Next { get; private set; }

  public Node(int data, Node next = null) {
    Data = data;
    Next = next;
  }
}

class Node():
    def __init__(self, data, next = None):
        self.data = data
        self.next = next

class Node {
    private int data;
    private Node next;
    
    public Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }
    
    public Node(int data) {
        this.data = data;
        this.next = null;
    }

    public int getData() {
        return data;
    }

    public Node getNext() {
        return next;
    }
}

class Node
  attr_reader :data, :next_node
  
  def initialize(data, next_node=nil)
    @data = data
    @next_node = next_node
  end
end

class Node
{
  public:
    int data;
    Node* next;
  
  Node(int data, Node* next = nullptr)
  {
    this->data = data;
    this->next = next;
  }
};

-- use regular lists, which are already singly-linked
data [a] = [] | a : [a]

typedef struct node {
  int data;
  struct node *next;
} Node;

type Node
  integer :: data
  type(Node), pointer :: next
end type Node

SYMBOL: +nil+
TUPLE: node data next ;
C: <node> node

Prerequisites
This Kata assumes that you are already familiar with the idea of a linked list.  If you do not know what that is, you may want to read this article on Wikipedia.  Specifically, the linked lists this Kata is referring to are singly linked lists, where the value of a specific node is stored in its data / $data / Data property, the reference to the next node is stored in its next / $next / Next / next_node property and the terminator for a list is null / NULL / None / nil / nullptr / null().
Task
Create a function stringify which accepts an argument list / $list and returns a string representation of the list.  The string representation of the list starts with the value of the current Node, specified by its data / $data / Data property, followed by a whitespace character, an arrow and another whitespace character (" -> "), followed by the rest of the list.  The end of the string representation of a list must always end with null / NULL / None / nil / nullptr / null() ( all caps or all lowercase depending on the language you are undertaking this Kata in ).  For example, given the following list:
&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

Node(1, Node(2, Node(3)))

new Node(1, new Node(2, new Node(3)))

Node.new(1, Node.new(2, Node.new(3)))

new Node(1, new Node(2, new Node(3)))

[1,2,3]

&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

type(Node), pointer :: oneTwoThree
! Where:
! oneTwoThree%data == 1
! oneTwoThree%next%data == 2
! oneTwoThree%next%next%data == 3
! oneTwoThree%next%next%next => null()

1 2 3 +nil+ <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 2.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 3.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3

... its string representation would be:
"1 -> 2 -> 3 -> null"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> None"

"1 -> 2 -> 3 -> nil"

"1 -> 2 -> 3 -> nullptr"

@"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> null()"

"1 -> 2 -> 3 -> +nil+"

       "1 -> 2 -> 3 -> NULL"

And given the following linked list:
new Node(0, new Node(1, new Node(4, new Node(9, new Node(16)))))

Node(0, Node(1, Node(4, Node(9, Node(16)))))

Node.new(0, Node.new(1, Node.new(4, Node.new(9, Node.new(16)))))

[ 0, 1, 4, 9, 16 ]

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

type(Node), pointer :: list
! Where:
! list%data == 0
! list%next%data == 1
! list%next%next%data == 4
! list%next%next%next%data == 9
! list%next%next%next%next%data == 16
! list%next%next%next%next%next => null()

0 1 4 9 16 +nil+ <node> <node> <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 0.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 4.
         05 nxt usage pointer.
       01 node4.
         05 val pic 9(4) value 9.
         05 nxt usage pointer.
       01 node5.
         05 val pic 9(4) value 16.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3
       set nxt of node3 to address of node4
       set nxt of node4 to address of node5

... its string representation would be:
"0 -> 1 -> 4 -> 9 -> 16 -> null"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> None"

"0 -> 1 -> 4 -> 9 -> 16 -> nil"

"0 -> 1 -> 4 -> 9 -> 16 -> nullptr"

@"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> null()"

"0 -> 1 -> 4 -> 9 -> 16 -> +nil+"

       "0 -> 1 -> 4 -> 9 -> 16 -> NULL"

Note that null / NULL / None / nil / nullptr / null() itself is also considered a valid linked list.  In that case, its string representation would simply be "null" / "NULL" / "None" / "nil" / "nullptr" / @"NULL" / "null()" ( again, depending on the language ).
For the simplicity of this Kata, you may assume that any Node in this Kata may only contain non-negative integer values.  For example, you will not encounter a Node whose data / $data / Data property is "Hello World".
Enjoy, and don't forget to check out my other Kata Series :D
========================================
URL: https://www.codewars.com/kata/582c81d982a0a65424000201
–ó–∞–¥–∞—á–∞:
Convert a linked list to a string
Related Kata
Although this Kata is not part of an official Series, you may also want to try out Parse a linked list from a string if you enjoyed this Kata.
Preloaded
Preloaded for you is a class, struct or derived data type Node ( depending on the language ) used to construct linked lists in this Kata:
typedef struct node {
  int data;
  struct node *next;
} Node;

      * Defined in the linkage section
       01  node.
           05 val     pic 9(4).
           05 nxt     usage pointer.

class Node {
  public $data, $next;
  public function __construct($data, $next = NULL) {
    $this->data = $data;
    $this->next = $next;
  }
}

class Node {
  constructor(data, next = null) {
    this.data = data;
    this.next = next;
  }
}

public class Node {
  public int Data { get; private set; }
  public Node Next { get; private set; }

  public Node(int data, Node next = null) {
    Data = data;
    Next = next;
  }
}

class Node():
    def __init__(self, data, next = None):
        self.data = data
        self.next = next

class Node {
    private int data;
    private Node next;
    
    public Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }
    
    public Node(int data) {
        this.data = data;
        this.next = null;
    }

    public int getData() {
        return data;
    }

    public Node getNext() {
        return next;
    }
}

class Node
  attr_reader :data, :next_node
  
  def initialize(data, next_node=nil)
    @data = data
    @next_node = next_node
  end
end

class Node
{
  public:
    int data;
    Node* next;
  
  Node(int data, Node* next = nullptr)
  {
    this->data = data;
    this->next = next;
  }
};

-- use regular lists, which are already singly-linked
data [a] = [] | a : [a]

typedef struct node {
  int data;
  struct node *next;
} Node;

type Node
  integer :: data
  type(Node), pointer :: next
end type Node

SYMBOL: +nil+
TUPLE: node data next ;
C: <node> node

Prerequisites
This Kata assumes that you are already familiar with the idea of a linked list.  If you do not know what that is, you may want to read this article on Wikipedia.  Specifically, the linked lists this Kata is referring to are singly linked lists, where the value of a specific node is stored in its data / $data / Data property, the reference to the next node is stored in its next / $next / Next / next_node property and the terminator for a list is null / NULL / None / nil / nullptr / null().
Task
Create a function stringify which accepts an argument list / $list and returns a string representation of the list.  The string representation of the list starts with the value of the current Node, specified by its data / $data / Data property, followed by a whitespace character, an arrow and another whitespace character (" -> "), followed by the rest of the list.  The end of the string representation of a list must always end with null / NULL / None / nil / nullptr / null() ( all caps or all lowercase depending on the language you are undertaking this Kata in ).  For example, given the following list:
&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

Node(1, Node(2, Node(3)))

new Node(1, new Node(2, new Node(3)))

Node.new(1, Node.new(2, Node.new(3)))

new Node(1, new Node(2, new Node(3)))

[1,2,3]

&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

type(Node), pointer :: oneTwoThree
! Where:
! oneTwoThree%data == 1
! oneTwoThree%next%data == 2
! oneTwoThree%next%next%data == 3
! oneTwoThree%next%next%next => null()

1 2 3 +nil+ <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 2.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 3.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3

... its string representation would be:
"1 -> 2 -> 3 -> null"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> None"

"1 -> 2 -> 3 -> nil"

"1 -> 2 -> 3 -> nullptr"

@"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> null()"

"1 -> 2 -> 3 -> +nil+"

       "1 -> 2 -> 3 -> NULL"

And given the following linked list:
new Node(0, new Node(1, new Node(4, new Node(9, new Node(16)))))

Node(0, Node(1, Node(4, Node(9, Node(16)))))

Node.new(0, Node.new(1, Node.new(4, Node.new(9, Node.new(16)))))

[ 0, 1, 4, 9, 16 ]

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

type(Node), pointer :: list
! Where:
! list%data == 0
! list%next%data == 1
! list%next%next%data == 4
! list%next%next%next%data == 9
! list%next%next%next%next%data == 16
! list%next%next%next%next%next => null()

0 1 4 9 16 +nil+ <node> <node> <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 0.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 4.
         05 nxt usage pointer.
       01 node4.
         05 val pic 9(4) value 9.
         05 nxt usage pointer.
       01 node5.
         05 val pic 9(4) value 16.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3
       set nxt of node3 to address of node4
       set nxt of node4 to address of node5

... its string representation would be:
"0 -> 1 -> 4 -> 9 -> 16 -> null"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> None"

"0 -> 1 -> 4 -> 9 -> 16 -> nil"

"0 -> 1 -> 4 -> 9 -> 16 -> nullptr"

@"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> null()"

"0 -> 1 -> 4 -> 9 -> 16 -> +nil+"

       "0 -> 1 -> 4 -> 9 -> 16 -> NULL"

Note that null / NULL / None / nil / nullptr / null() itself is also considered a valid linked list.  In that case, its string representation would simply be "null" / "NULL" / "None" / "nil" / "nullptr" / @"NULL" / "null()" ( again, depending on the language ).
For the simplicity of this Kata, you may assume that any Node in this Kata may only contain non-negative integer values.  For example, you will not encounter a Node whose data / $data / Data property is "Hello World".
Enjoy, and don't forget to check out my other Kata Series :D
========================================
URL: https://www.codewars.com/kata/582c297e56373f0426000098
–ó–∞–¥–∞—á–∞:
Convert a linked list to a string
Related Kata
Although this Kata is not part of an official Series, you may also want to try out Parse a linked list from a string if you enjoyed this Kata.
Preloaded
Preloaded for you is a class, struct or derived data type Node ( depending on the language ) used to construct linked lists in this Kata:
typedef struct node {
  int data;
  struct node *next;
} Node;

      * Defined in the linkage section
       01  node.
           05 val     pic 9(4).
           05 nxt     usage pointer.

class Node {
  public $data, $next;
  public function __construct($data, $next = NULL) {
    $this->data = $data;
    $this->next = $next;
  }
}

class Node {
  constructor(data, next = null) {
    this.data = data;
    this.next = next;
  }
}

public class Node {
  public int Data { get; private set; }
  public Node Next { get; private set; }

  public Node(int data, Node next = null) {
    Data = data;
    Next = next;
  }
}

class Node():
    def __init__(self, data, next = None):
        self.data = data
        self.next = next

class Node {
    private int data;
    private Node next;
    
    public Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }
    
    public Node(int data) {
        this.data = data;
        this.next = null;
    }

    public int getData() {
        return data;
    }

    public Node getNext() {
        return next;
    }
}

class Node
  attr_reader :data, :next_node
  
  def initialize(data, next_node=nil)
    @data = data
    @next_node = next_node
  end
end

class Node
{
  public:
    int data;
    Node* next;
  
  Node(int data, Node* next = nullptr)
  {
    this->data = data;
    this->next = next;
  }
};

-- use regular lists, which are already singly-linked
data [a] = [] | a : [a]

typedef struct node {
  int data;
  struct node *next;
} Node;

type Node
  integer :: data
  type(Node), pointer :: next
end type Node

SYMBOL: +nil+
TUPLE: node data next ;
C: <node> node

Prerequisites
This Kata assumes that you are already familiar with the idea of a linked list.  If you do not know what that is, you may want to read this article on Wikipedia.  Specifically, the linked lists this Kata is referring to are singly linked lists, where the value of a specific node is stored in its data / $data / Data property, the reference to the next node is stored in its next / $next / Next / next_node property and the terminator for a list is null / NULL / None / nil / nullptr / null().
Task
Create a function stringify which accepts an argument list / $list and returns a string representation of the list.  The string representation of the list starts with the value of the current Node, specified by its data / $data / Data property, followed by a whitespace character, an arrow and another whitespace character (" -> "), followed by the rest of the list.  The end of the string representation of a list must always end with null / NULL / None / nil / nullptr / null() ( all caps or all lowercase depending on the language you are undertaking this Kata in ).  For example, given the following list:
&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

Node(1, Node(2, Node(3)))

new Node(1, new Node(2, new Node(3)))

Node.new(1, Node.new(2, Node.new(3)))

new Node(1, new Node(2, new Node(3)))

[1,2,3]

&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

type(Node), pointer :: oneTwoThree
! Where:
! oneTwoThree%data == 1
! oneTwoThree%next%data == 2
! oneTwoThree%next%next%data == 3
! oneTwoThree%next%next%next => null()

1 2 3 +nil+ <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 2.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 3.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3

... its string representation would be:
"1 -> 2 -> 3 -> null"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> None"

"1 -> 2 -> 3 -> nil"

"1 -> 2 -> 3 -> nullptr"

@"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> null()"

"1 -> 2 -> 3 -> +nil+"

       "1 -> 2 -> 3 -> NULL"

And given the following linked list:
new Node(0, new Node(1, new Node(4, new Node(9, new Node(16)))))

Node(0, Node(1, Node(4, Node(9, Node(16)))))

Node.new(0, Node.new(1, Node.new(4, Node.new(9, Node.new(16)))))

[ 0, 1, 4, 9, 16 ]

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

type(Node), pointer :: list
! Where:
! list%data == 0
! list%next%data == 1
! list%next%next%data == 4
! list%next%next%next%data == 9
! list%next%next%next%next%data == 16
! list%next%next%next%next%next => null()

0 1 4 9 16 +nil+ <node> <node> <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 0.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 4.
         05 nxt usage pointer.
       01 node4.
         05 val pic 9(4) value 9.
         05 nxt usage pointer.
       01 node5.
         05 val pic 9(4) value 16.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3
       set nxt of node3 to address of node4
       set nxt of node4 to address of node5

... its string representation would be:
"0 -> 1 -> 4 -> 9 -> 16 -> null"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> None"

"0 -> 1 -> 4 -> 9 -> 16 -> nil"

"0 -> 1 -> 4 -> 9 -> 16 -> nullptr"

@"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> null()"

"0 -> 1 -> 4 -> 9 -> 16 -> +nil+"

       "0 -> 1 -> 4 -> 9 -> 16 -> NULL"

Note that null / NULL / None / nil / nullptr / null() itself is also considered a valid linked list.  In that case, its string representation would simply be "null" / "NULL" / "None" / "nil" / "nullptr" / @"NULL" / "null()" ( again, depending on the language ).
For the simplicity of this Kata, you may assume that any Node in this Kata may only contain non-negative integer values.  For example, you will not encounter a Node whose data / $data / Data property is "Hello World".
Enjoy, and don't forget to check out my other Kata Series :D
========================================
URL: https://www.codewars.com/kata/582dace555a1f4d859000058
–ó–∞–¥–∞—á–∞:
Convert a linked list to a string
Related Kata
Although this Kata is not part of an official Series, you may also want to try out Parse a linked list from a string if you enjoyed this Kata.
Preloaded
Preloaded for you is a class, struct or derived data type Node ( depending on the language ) used to construct linked lists in this Kata:
typedef struct node {
  int data;
  struct node *next;
} Node;

      * Defined in the linkage section
       01  node.
           05 val     pic 9(4).
           05 nxt     usage pointer.

class Node {
  public $data, $next;
  public function __construct($data, $next = NULL) {
    $this->data = $data;
    $this->next = $next;
  }
}

class Node {
  constructor(data, next = null) {
    this.data = data;
    this.next = next;
  }
}

public class Node {
  public int Data { get; private set; }
  public Node Next { get; private set; }

  public Node(int data, Node next = null) {
    Data = data;
    Next = next;
  }
}

class Node():
    def __init__(self, data, next = None):
        self.data = data
        self.next = next

class Node {
    private int data;
    private Node next;
    
    public Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }
    
    public Node(int data) {
        this.data = data;
        this.next = null;
    }

    public int getData() {
        return data;
    }

    public Node getNext() {
        return next;
    }
}

class Node
  attr_reader :data, :next_node
  
  def initialize(data, next_node=nil)
    @data = data
    @next_node = next_node
  end
end

class Node
{
  public:
    int data;
    Node* next;
  
  Node(int data, Node* next = nullptr)
  {
    this->data = data;
    this->next = next;
  }
};

-- use regular lists, which are already singly-linked
data [a] = [] | a : [a]

typedef struct node {
  int data;
  struct node *next;
} Node;

type Node
  integer :: data
  type(Node), pointer :: next
end type Node

SYMBOL: +nil+
TUPLE: node data next ;
C: <node> node

Prerequisites
This Kata assumes that you are already familiar with the idea of a linked list.  If you do not know what that is, you may want to read this article on Wikipedia.  Specifically, the linked lists this Kata is referring to are singly linked lists, where the value of a specific node is stored in its data / $data / Data property, the reference to the next node is stored in its next / $next / Next / next_node property and the terminator for a list is null / NULL / None / nil / nullptr / null().
Task
Create a function stringify which accepts an argument list / $list and returns a string representation of the list.  The string representation of the list starts with the value of the current Node, specified by its data / $data / Data property, followed by a whitespace character, an arrow and another whitespace character (" -> "), followed by the rest of the list.  The end of the string representation of a list must always end with null / NULL / None / nil / nullptr / null() ( all caps or all lowercase depending on the language you are undertaking this Kata in ).  For example, given the following list:
&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

new Node(1, new Node(2, new Node(3)))

Node(1, Node(2, Node(3)))

new Node(1, new Node(2, new Node(3)))

Node.new(1, Node.new(2, Node.new(3)))

new Node(1, new Node(2, new Node(3)))

[1,2,3]

&((Node){
  .data = 1,
  .next = &((Node){
    .data = 2,
    .next = &((Node){
      .data = 3,
      .next = NULL
    })
  })
})

type(Node), pointer :: oneTwoThree
! Where:
! oneTwoThree%data == 1
! oneTwoThree%next%data == 2
! oneTwoThree%next%next%data == 3
! oneTwoThree%next%next%next => null()

1 2 3 +nil+ <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 2.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 3.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3

... its string representation would be:
"1 -> 2 -> 3 -> null"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> None"

"1 -> 2 -> 3 -> nil"

"1 -> 2 -> 3 -> nullptr"

@"1 -> 2 -> 3 -> NULL"

"1 -> 2 -> 3 -> null()"

"1 -> 2 -> 3 -> +nil+"

       "1 -> 2 -> 3 -> NULL"

And given the following linked list:
new Node(0, new Node(1, new Node(4, new Node(9, new Node(16)))))

Node(0, Node(1, Node(4, Node(9, Node(16)))))

Node.new(0, Node.new(1, Node.new(4, Node.new(9, Node.new(16)))))

[ 0, 1, 4, 9, 16 ]

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

&((Node){
  .data = 0,
  .next = &((Node){
    .data = 1,
    .next = &((Node){
      .data = 4,
      .next = &((Node){
        .data = 9,
        .next = &((Node){
          .data = 16,
          .next = NULL
        })
      })
    })
  })
})

type(Node), pointer :: list
! Where:
! list%data == 0
! list%next%data == 1
! list%next%next%data == 4
! list%next%next%next%data == 9
! list%next%next%next%next%data == 16
! list%next%next%next%next%next => null()

0 1 4 9 16 +nil+ <node> <node> <node> <node> <node>

       01 node1.
         05 val pic 9(4) value 0.
         05 nxt usage pointer.
       01 node2.
         05 val pic 9(4) value 1.
         05 nxt usage pointer.
       01 node3.
         05 val pic 9(4) value 4.
         05 nxt usage pointer.
       01 node4.
         05 val pic 9(4) value 9.
         05 nxt usage pointer.
       01 node5.
         05 val pic 9(4) value 16.
         05 nxt usage pointer value null.
       ...
       set nxt of node1 to address of node2
       set nxt of node2 to address of node3
       set nxt of node3 to address of node4
       set nxt of node4 to address of node5

... its string representation would be:
"0 -> 1 -> 4 -> 9 -> 16 -> null"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> None"

"0 -> 1 -> 4 -> 9 -> 16 -> nil"

"0 -> 1 -> 4 -> 9 -> 16 -> nullptr"

@"0 -> 1 -> 4 -> 9 -> 16 -> NULL"

"0 -> 1 -> 4 -> 9 -> 16 -> null()"

"0 -> 1 -> 4 -> 9 -> 16 -> +nil+"

       "0 -> 1 -> 4 -> 9 -> 16 -> NULL"

Note that null / NULL / None / nil / nullptr / null() itself is also considered a valid linked list.  In that case, its string representation would simply be "null" / "NULL" / "None" / "nil" / "nullptr" / @"NULL" / "null()" ( again, depending on the language ).
For the simplicity of this Kata, you may assume that any Node in this Kata may only contain non-negative integer values.  For example, you will not encounter a Node whose data / $data / Data property is "Hello World".
Enjoy, and don't forget to check out my other Kata Series :D
========================================
URL: https://www.codewars.com/kata/582ba36cc1901399a70005fc
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (associative arrays in PHP, tables in COBOL) representing data about developers who have signed up to attend the next coding meetup that you are organising.
Your task is to return either:

true if all developers in the list code in the same language; or
false otherwise.

For example, given the following input array:
var list1 = [
  { firstName: 'Daniel', lastName: 'J.', country: 'Aruba', continent: 'Americas', age: 42, language: 'JavaScript' },
  { firstName: 'Kseniya', lastName: 'T.', country: 'Belarus', continent: 'Europe', age: 22, language: 'JavaScript' },
  { firstName: 'Hanna', lastName: 'L.', country: 'Hungary', continent: 'Europe', age: 65, language: 'JavaScript' },
];

$list1 = [
  [
    "first_name" => "Daniel",
    "last_name" => "J.",
    "country" => "Aruba",
    "continent" => "Americas",
    "age" => 42,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Kseniya",
    "last_name" => "T.",
    "country" => "Belarus",
    "continent" => "Europe",
    "age" => 22,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Hanna",
    "last_name" => "L.",
    "country" => "Hungary",
    "continent" => "Europe",
    "age" => 65,
    "language" => "JavaScript"
  ]
];

list1 = [
  { 'firstName': 'Daniel', 'lastName': 'J.', 'country': 'Aruba', 'continent': 'Americas', 'age': 42, 'language': 'JavaScript' },
  { 'firstName': 'Kseniya', 'lastName': 'T.', 'country': 'Belarus', 'continent': 'Europe', 'age': 22, 'language': 'JavaScript' },
  { 'firstName': 'Hanna', 'lastName': 'L.', 'country': 'Hungary', 'continent': 'Europe', 'age': 65, 'language': 'JavaScript' },
]

       01  List.
          03 ListLength       pic 9 value 3.
          03  dev1.
              05 FirstName    pic a(9)  value 'Daniel'.
              05 LastName     pic x(2)  value 'J.'.
              05 Country      pic a(24) value 'Aruba'.
              05 Continent    pic a(8)  value 'Americas'.
              05 Age          pic 9(3)  value 42.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Kseniya'.
              05 LastName     pic x(2)  value 'T.'.
              05 Country      pic a(24) value 'Belarus'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Hanna'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Hungary'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.

your function should return true.
Notes:

The strings representing a given language will always be formatted in the same way (e.g. 'JavaScript' will always be formatted will upper-case 'J' and 'S' 
The input array will always be valid and formatted as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
<<<<<<<  mine
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/58287977ef8d4451f90001a0
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (associative arrays in PHP, tables in COBOL) representing data about developers who have signed up to attend the next coding meetup that you are organising.
Your task is to return either:

true if all developers in the list code in the same language; or
false otherwise.

For example, given the following input array:
var list1 = [
  { firstName: 'Daniel', lastName: 'J.', country: 'Aruba', continent: 'Americas', age: 42, language: 'JavaScript' },
  { firstName: 'Kseniya', lastName: 'T.', country: 'Belarus', continent: 'Europe', age: 22, language: 'JavaScript' },
  { firstName: 'Hanna', lastName: 'L.', country: 'Hungary', continent: 'Europe', age: 65, language: 'JavaScript' },
];

$list1 = [
  [
    "first_name" => "Daniel",
    "last_name" => "J.",
    "country" => "Aruba",
    "continent" => "Americas",
    "age" => 42,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Kseniya",
    "last_name" => "T.",
    "country" => "Belarus",
    "continent" => "Europe",
    "age" => 22,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Hanna",
    "last_name" => "L.",
    "country" => "Hungary",
    "continent" => "Europe",
    "age" => 65,
    "language" => "JavaScript"
  ]
];

list1 = [
  { 'firstName': 'Daniel', 'lastName': 'J.', 'country': 'Aruba', 'continent': 'Americas', 'age': 42, 'language': 'JavaScript' },
  { 'firstName': 'Kseniya', 'lastName': 'T.', 'country': 'Belarus', 'continent': 'Europe', 'age': 22, 'language': 'JavaScript' },
  { 'firstName': 'Hanna', 'lastName': 'L.', 'country': 'Hungary', 'continent': 'Europe', 'age': 65, 'language': 'JavaScript' },
]

       01  List.
          03 ListLength       pic 9 value 3.
          03  dev1.
              05 FirstName    pic a(9)  value 'Daniel'.
              05 LastName     pic x(2)  value 'J.'.
              05 Country      pic a(24) value 'Aruba'.
              05 Continent    pic a(8)  value 'Americas'.
              05 Age          pic 9(3)  value 42.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Kseniya'.
              05 LastName     pic x(2)  value 'T.'.
              05 Country      pic a(24) value 'Belarus'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Hanna'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Hungary'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.

your function should return true.
Notes:

The strings representing a given language will always be formatted in the same way (e.g. 'JavaScript' will always be formatted will upper-case 'J' and 'S' 
The input array will always be valid and formatted as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
<<<<<<<  mine
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/582b0d73c190130d550000c6
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (associative arrays in PHP, tables in COBOL) representing data about developers who have signed up to attend the next coding meetup that you are organising.
Your task is to return either:

true if all developers in the list code in the same language; or
false otherwise.

For example, given the following input array:
var list1 = [
  { firstName: 'Daniel', lastName: 'J.', country: 'Aruba', continent: 'Americas', age: 42, language: 'JavaScript' },
  { firstName: 'Kseniya', lastName: 'T.', country: 'Belarus', continent: 'Europe', age: 22, language: 'JavaScript' },
  { firstName: 'Hanna', lastName: 'L.', country: 'Hungary', continent: 'Europe', age: 65, language: 'JavaScript' },
];

$list1 = [
  [
    "first_name" => "Daniel",
    "last_name" => "J.",
    "country" => "Aruba",
    "continent" => "Americas",
    "age" => 42,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Kseniya",
    "last_name" => "T.",
    "country" => "Belarus",
    "continent" => "Europe",
    "age" => 22,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Hanna",
    "last_name" => "L.",
    "country" => "Hungary",
    "continent" => "Europe",
    "age" => 65,
    "language" => "JavaScript"
  ]
];

list1 = [
  { 'firstName': 'Daniel', 'lastName': 'J.', 'country': 'Aruba', 'continent': 'Americas', 'age': 42, 'language': 'JavaScript' },
  { 'firstName': 'Kseniya', 'lastName': 'T.', 'country': 'Belarus', 'continent': 'Europe', 'age': 22, 'language': 'JavaScript' },
  { 'firstName': 'Hanna', 'lastName': 'L.', 'country': 'Hungary', 'continent': 'Europe', 'age': 65, 'language': 'JavaScript' },
]

       01  List.
          03 ListLength       pic 9 value 3.
          03  dev1.
              05 FirstName    pic a(9)  value 'Daniel'.
              05 LastName     pic x(2)  value 'J.'.
              05 Country      pic a(24) value 'Aruba'.
              05 Continent    pic a(8)  value 'Americas'.
              05 Age          pic 9(3)  value 42.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Kseniya'.
              05 LastName     pic x(2)  value 'T.'.
              05 Country      pic a(24) value 'Belarus'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Hanna'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Hungary'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.

your function should return true.
Notes:

The strings representing a given language will always be formatted in the same way (e.g. 'JavaScript' will always be formatted will upper-case 'J' and 'S' 
The input array will always be valid and formatted as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
<<<<<<<  mine
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/582aafca2d44a4a4560000e7
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (associative arrays in PHP, tables in COBOL) representing data about developers who have signed up to attend the next coding meetup that you are organising.
Your task is to return either:

true if all developers in the list code in the same language; or
false otherwise.

For example, given the following input array:
var list1 = [
  { firstName: 'Daniel', lastName: 'J.', country: 'Aruba', continent: 'Americas', age: 42, language: 'JavaScript' },
  { firstName: 'Kseniya', lastName: 'T.', country: 'Belarus', continent: 'Europe', age: 22, language: 'JavaScript' },
  { firstName: 'Hanna', lastName: 'L.', country: 'Hungary', continent: 'Europe', age: 65, language: 'JavaScript' },
];

$list1 = [
  [
    "first_name" => "Daniel",
    "last_name" => "J.",
    "country" => "Aruba",
    "continent" => "Americas",
    "age" => 42,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Kseniya",
    "last_name" => "T.",
    "country" => "Belarus",
    "continent" => "Europe",
    "age" => 22,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Hanna",
    "last_name" => "L.",
    "country" => "Hungary",
    "continent" => "Europe",
    "age" => 65,
    "language" => "JavaScript"
  ]
];

list1 = [
  { 'firstName': 'Daniel', 'lastName': 'J.', 'country': 'Aruba', 'continent': 'Americas', 'age': 42, 'language': 'JavaScript' },
  { 'firstName': 'Kseniya', 'lastName': 'T.', 'country': 'Belarus', 'continent': 'Europe', 'age': 22, 'language': 'JavaScript' },
  { 'firstName': 'Hanna', 'lastName': 'L.', 'country': 'Hungary', 'continent': 'Europe', 'age': 65, 'language': 'JavaScript' },
]

       01  List.
          03 ListLength       pic 9 value 3.
          03  dev1.
              05 FirstName    pic a(9)  value 'Daniel'.
              05 LastName     pic x(2)  value 'J.'.
              05 Country      pic a(24) value 'Aruba'.
              05 Continent    pic a(8)  value 'Americas'.
              05 Age          pic 9(3)  value 42.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Kseniya'.
              05 LastName     pic x(2)  value 'T.'.
              05 Country      pic a(24) value 'Belarus'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Hanna'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Hungary'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.

your function should return true.
Notes:

The strings representing a given language will always be formatted in the same way (e.g. 'JavaScript' will always be formatted will upper-case 'J' and 'S' 
The input array will always be valid and formatted as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
<<<<<<<  mine
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/5829994cd04efd4373000468
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (associative arrays in PHP, tables in COBOL) representing data about developers who have signed up to attend the next coding meetup that you are organising.
Your task is to return either:

true if all developers in the list code in the same language; or
false otherwise.

For example, given the following input array:
var list1 = [
  { firstName: 'Daniel', lastName: 'J.', country: 'Aruba', continent: 'Americas', age: 42, language: 'JavaScript' },
  { firstName: 'Kseniya', lastName: 'T.', country: 'Belarus', continent: 'Europe', age: 22, language: 'JavaScript' },
  { firstName: 'Hanna', lastName: 'L.', country: 'Hungary', continent: 'Europe', age: 65, language: 'JavaScript' },
];

$list1 = [
  [
    "first_name" => "Daniel",
    "last_name" => "J.",
    "country" => "Aruba",
    "continent" => "Americas",
    "age" => 42,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Kseniya",
    "last_name" => "T.",
    "country" => "Belarus",
    "continent" => "Europe",
    "age" => 22,
    "language" => "JavaScript"
  ],
  [
    "first_name" => "Hanna",
    "last_name" => "L.",
    "country" => "Hungary",
    "continent" => "Europe",
    "age" => 65,
    "language" => "JavaScript"
  ]
];

list1 = [
  { 'firstName': 'Daniel', 'lastName': 'J.', 'country': 'Aruba', 'continent': 'Americas', 'age': 42, 'language': 'JavaScript' },
  { 'firstName': 'Kseniya', 'lastName': 'T.', 'country': 'Belarus', 'continent': 'Europe', 'age': 22, 'language': 'JavaScript' },
  { 'firstName': 'Hanna', 'lastName': 'L.', 'country': 'Hungary', 'continent': 'Europe', 'age': 65, 'language': 'JavaScript' },
]

       01  List.
          03 ListLength       pic 9 value 3.
          03  dev1.
              05 FirstName    pic a(9)  value 'Daniel'.
              05 LastName     pic x(2)  value 'J.'.
              05 Country      pic a(24) value 'Aruba'.
              05 Continent    pic a(8)  value 'Americas'.
              05 Age          pic 9(3)  value 42.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Kseniya'.
              05 LastName     pic x(2)  value 'T.'.
              05 Country      pic a(24) value 'Belarus'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Hanna'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Hungary'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 29.
              05 Language     pic a(10) value 'JavaScript'.

your function should return true.
Notes:

The strings representing a given language will always be formatted in the same way (e.g. 'JavaScript' will always be formatted will upper-case 'J' and 'S' 
The input array will always be valid and formatted as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
<<<<<<<  mine
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/5828713ed04efde70e000346
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (hashes in ruby) representing data about developers who have signed up to attend the coding meetup that you are organising for the first time.
Your task is to return the number of JavaScript developers coming from Europe.
For example, given the following list:
var list1 = [
  { firstName: 'Noah', lastName: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { firstName: 'Maia', lastName: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { firstName: 'Shufen', lastName: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { firstName: 'Sumayah', lastName: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
];

lst1 = [
  { 'firstName': 'Noah', 'lastName': 'M.', 'country': 'Switzerland', 'continent': 'Europe', 'age': 19, 'language': 'JavaScript' },
  { 'firstName': 'Maia', 'lastName': 'S.', 'country': 'Tahiti', 'continent': 'Oceania', 'age': 28, 'language': 'JavaScript' },
  { 'firstName': 'Shufen', 'lastName': 'L.', 'country': 'Taiwan', 'continent': 'Asia', 'age': 35, 'language': 'HTML' },
  { 'firstName': 'Sumayah', 'lastName': 'M.', 'country': 'Tajikistan', 'continent': 'Asia', 'age': 30, 'language': 'CSS' }
]

list1 = [
  { first_name: 'Noah', last_name: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { first_name: 'Maia', last_name: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { first_name: 'Shufen', last_name: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { first_name: 'Sumayah', last_name: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
]

       01  List.
          03  ListLength      pic 9(3) value 4.
          03  dev1.
              05 FirstName    pic a(9)  value 'Noah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Switzerland'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 19.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Maia'.
              05 LastName     pic x(2)  value 'S.'.
              05 Country      pic a(24) value 'Tahiti'.
              05 Continent    pic a(8)  value 'Oceania'.
              05 Age          pic 9(3)  value 28.
              05 Language     pic a(10) value 'Clojure'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Shufen'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Taiwan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 35.
              05 Language     pic a(10) value 'PHP'.
          03  dev4.
              05 FirstName    pic a(9)  value 'Sumayah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Tajikistan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 30.
              05 Language     pic a(10) value 'CSS'.

your function should return number 1.
If, there are no JavaScript developers from Europe then your function should return 0.
Notes:

The format of the strings will always be Europe and JavaScript.
All data will always be valid and uniform as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/5827bc50f524dd029d0005f2
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (hashes in ruby) representing data about developers who have signed up to attend the coding meetup that you are organising for the first time.
Your task is to return the number of JavaScript developers coming from Europe.
For example, given the following list:
var list1 = [
  { firstName: 'Noah', lastName: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { firstName: 'Maia', lastName: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { firstName: 'Shufen', lastName: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { firstName: 'Sumayah', lastName: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
];

lst1 = [
  { 'firstName': 'Noah', 'lastName': 'M.', 'country': 'Switzerland', 'continent': 'Europe', 'age': 19, 'language': 'JavaScript' },
  { 'firstName': 'Maia', 'lastName': 'S.', 'country': 'Tahiti', 'continent': 'Oceania', 'age': 28, 'language': 'JavaScript' },
  { 'firstName': 'Shufen', 'lastName': 'L.', 'country': 'Taiwan', 'continent': 'Asia', 'age': 35, 'language': 'HTML' },
  { 'firstName': 'Sumayah', 'lastName': 'M.', 'country': 'Tajikistan', 'continent': 'Asia', 'age': 30, 'language': 'CSS' }
]

list1 = [
  { first_name: 'Noah', last_name: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { first_name: 'Maia', last_name: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { first_name: 'Shufen', last_name: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { first_name: 'Sumayah', last_name: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
]

       01  List.
          03  ListLength      pic 9(3) value 4.
          03  dev1.
              05 FirstName    pic a(9)  value 'Noah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Switzerland'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 19.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Maia'.
              05 LastName     pic x(2)  value 'S.'.
              05 Country      pic a(24) value 'Tahiti'.
              05 Continent    pic a(8)  value 'Oceania'.
              05 Age          pic 9(3)  value 28.
              05 Language     pic a(10) value 'Clojure'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Shufen'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Taiwan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 35.
              05 Language     pic a(10) value 'PHP'.
          03  dev4.
              05 FirstName    pic a(9)  value 'Sumayah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Tajikistan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 30.
              05 Language     pic a(10) value 'CSS'.

your function should return number 1.
If, there are no JavaScript developers from Europe then your function should return 0.
Notes:

The format of the strings will always be Europe and JavaScript.
All data will always be valid and uniform as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/582746fa14b3892727000c4f
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (hashes in ruby) representing data about developers who have signed up to attend the coding meetup that you are organising for the first time.
Your task is to return the number of JavaScript developers coming from Europe.
For example, given the following list:
var list1 = [
  { firstName: 'Noah', lastName: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { firstName: 'Maia', lastName: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { firstName: 'Shufen', lastName: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { firstName: 'Sumayah', lastName: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
];

lst1 = [
  { 'firstName': 'Noah', 'lastName': 'M.', 'country': 'Switzerland', 'continent': 'Europe', 'age': 19, 'language': 'JavaScript' },
  { 'firstName': 'Maia', 'lastName': 'S.', 'country': 'Tahiti', 'continent': 'Oceania', 'age': 28, 'language': 'JavaScript' },
  { 'firstName': 'Shufen', 'lastName': 'L.', 'country': 'Taiwan', 'continent': 'Asia', 'age': 35, 'language': 'HTML' },
  { 'firstName': 'Sumayah', 'lastName': 'M.', 'country': 'Tajikistan', 'continent': 'Asia', 'age': 30, 'language': 'CSS' }
]

list1 = [
  { first_name: 'Noah', last_name: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { first_name: 'Maia', last_name: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { first_name: 'Shufen', last_name: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { first_name: 'Sumayah', last_name: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
]

       01  List.
          03  ListLength      pic 9(3) value 4.
          03  dev1.
              05 FirstName    pic a(9)  value 'Noah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Switzerland'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 19.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Maia'.
              05 LastName     pic x(2)  value 'S.'.
              05 Country      pic a(24) value 'Tahiti'.
              05 Continent    pic a(8)  value 'Oceania'.
              05 Age          pic 9(3)  value 28.
              05 Language     pic a(10) value 'Clojure'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Shufen'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Taiwan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 35.
              05 Language     pic a(10) value 'PHP'.
          03  dev4.
              05 FirstName    pic a(9)  value 'Sumayah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Tajikistan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 30.
              05 Language     pic a(10) value 'CSS'.

your function should return number 1.
If, there are no JavaScript developers from Europe then your function should return 0.
Notes:

The format of the strings will always be Europe and JavaScript.
All data will always be valid and uniform as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/5827acd5f524dd029d0005a4
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (hashes in ruby) representing data about developers who have signed up to attend the coding meetup that you are organising for the first time.
Your task is to return the number of JavaScript developers coming from Europe.
For example, given the following list:
var list1 = [
  { firstName: 'Noah', lastName: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { firstName: 'Maia', lastName: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { firstName: 'Shufen', lastName: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { firstName: 'Sumayah', lastName: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
];

lst1 = [
  { 'firstName': 'Noah', 'lastName': 'M.', 'country': 'Switzerland', 'continent': 'Europe', 'age': 19, 'language': 'JavaScript' },
  { 'firstName': 'Maia', 'lastName': 'S.', 'country': 'Tahiti', 'continent': 'Oceania', 'age': 28, 'language': 'JavaScript' },
  { 'firstName': 'Shufen', 'lastName': 'L.', 'country': 'Taiwan', 'continent': 'Asia', 'age': 35, 'language': 'HTML' },
  { 'firstName': 'Sumayah', 'lastName': 'M.', 'country': 'Tajikistan', 'continent': 'Asia', 'age': 30, 'language': 'CSS' }
]

list1 = [
  { first_name: 'Noah', last_name: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { first_name: 'Maia', last_name: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { first_name: 'Shufen', last_name: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { first_name: 'Sumayah', last_name: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
]

       01  List.
          03  ListLength      pic 9(3) value 4.
          03  dev1.
              05 FirstName    pic a(9)  value 'Noah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Switzerland'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 19.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Maia'.
              05 LastName     pic x(2)  value 'S.'.
              05 Country      pic a(24) value 'Tahiti'.
              05 Continent    pic a(8)  value 'Oceania'.
              05 Age          pic 9(3)  value 28.
              05 Language     pic a(10) value 'Clojure'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Shufen'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Taiwan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 35.
              05 Language     pic a(10) value 'PHP'.
          03  dev4.
              05 FirstName    pic a(9)  value 'Sumayah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Tajikistan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 30.
              05 Language     pic a(10) value 'CSS'.

your function should return number 1.
If, there are no JavaScript developers from Europe then your function should return 0.
Notes:

The format of the strings will always be Europe and JavaScript.
All data will always be valid and uniform as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/58279e13c983ca4a2a00002a
–ó–∞–¥–∞—á–∞:
You will be given an array of objects (hashes in ruby) representing data about developers who have signed up to attend the coding meetup that you are organising for the first time.
Your task is to return the number of JavaScript developers coming from Europe.
For example, given the following list:
var list1 = [
  { firstName: 'Noah', lastName: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { firstName: 'Maia', lastName: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { firstName: 'Shufen', lastName: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { firstName: 'Sumayah', lastName: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
];

lst1 = [
  { 'firstName': 'Noah', 'lastName': 'M.', 'country': 'Switzerland', 'continent': 'Europe', 'age': 19, 'language': 'JavaScript' },
  { 'firstName': 'Maia', 'lastName': 'S.', 'country': 'Tahiti', 'continent': 'Oceania', 'age': 28, 'language': 'JavaScript' },
  { 'firstName': 'Shufen', 'lastName': 'L.', 'country': 'Taiwan', 'continent': 'Asia', 'age': 35, 'language': 'HTML' },
  { 'firstName': 'Sumayah', 'lastName': 'M.', 'country': 'Tajikistan', 'continent': 'Asia', 'age': 30, 'language': 'CSS' }
]

list1 = [
  { first_name: 'Noah', last_name: 'M.', country: 'Switzerland', continent: 'Europe', age: 19, language: 'JavaScript' },
  { first_name: 'Maia', last_name: 'S.', country: 'Tahiti', continent: 'Oceania', age: 28, language: 'JavaScript' },
  { first_name: 'Shufen', last_name: 'L.', country: 'Taiwan', continent: 'Asia', age: 35, language: 'HTML' },
  { first_name: 'Sumayah', last_name: 'M.', country: 'Tajikistan', continent: 'Asia', age: 30, language: 'CSS' }
]

       01  List.
          03  ListLength      pic 9(3) value 4.
          03  dev1.
              05 FirstName    pic a(9)  value 'Noah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Switzerland'.
              05 Continent    pic a(8)  value 'Europe'.
              05 Age          pic 9(3)  value 19.
              05 Language     pic a(10) value 'JavaScript'.
          03  dev2.
              05 FirstName    pic a(9)  value 'Maia'.
              05 LastName     pic x(2)  value 'S.'.
              05 Country      pic a(24) value 'Tahiti'.
              05 Continent    pic a(8)  value 'Oceania'.
              05 Age          pic 9(3)  value 28.
              05 Language     pic a(10) value 'Clojure'.
          03  dev3.
              05 FirstName    pic a(9)  value 'Shufen'.
              05 LastName     pic x(2)  value 'L.'.
              05 Country      pic a(24) value 'Taiwan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 35.
              05 Language     pic a(10) value 'PHP'.
          03  dev4.
              05 FirstName    pic a(9)  value 'Sumayah'.
              05 LastName     pic x(2)  value 'M.'.
              05 Country      pic a(24) value 'Tajikistan'.
              05 Continent    pic a(8)  value 'Asia'.
              05 Age          pic 9(3)  value 30.
              05 Language     pic a(10) value 'CSS'.

your function should return number 1.
If, there are no JavaScript developers from Europe then your function should return 0.
Notes:

The format of the strings will always be Europe and JavaScript.
All data will always be valid and uniform as in the example above.





This kata is part of the Coding Meetup series which includes a number of short and easy to follow katas which have been designed to allow mastering the use of higher-order functions. In JavaScript this includes methods like: forEach, filter, map, reduce, some, every, find, findIndex. Other approaches to solving the katas are of course possible.
Here is the full list of the katas in the Coding Meetup series:
Coding Meetup #1 - Higher-Order Functions Series - Count the number of JavaScript developers coming from Europe
Coding Meetup #2 - Higher-Order Functions Series - Greet developers
Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?
Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer
Coding Meetup #5 - Higher-Order Functions Series - Prepare the count of languages
Coding Meetup #6 - Higher-Order Functions Series - Can they code in the same language?
Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer
Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?
Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?
Coding Meetup #10 - Higher-Order Functions Series - Create usernames
Coding Meetup #11 - Higher-Order Functions Series - Find the average age
Coding Meetup #12 - Higher-Order Functions Series - Find GitHub admins
Coding Meetup #13 - Higher-Order Functions Series - Is the meetup language-diverse?
Coding Meetup #14 - Higher-Order Functions Series - Order the food
Coding Meetup #15 - Higher-Order Functions Series - Find the odd names
Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details
========================================
URL: https://www.codewars.com/kata/5826f54cc60c7e5266000baf
–ó–∞–¥–∞—á–∞:
On Unix system type files can be identified with the ls -l command which displays the type of the file in the first alphabetic letter of the file system permissions field. You can find more information about file type on Unix system on the wikipedia page.

'-' A regular file ==> file.
'd' A directory ==> directory.
'l' A symbolic link ==> symlink.
'c' A character special file. It refers to a device that handles data as a stream of bytes (e.g: a terminal/modem) ==> character_file.
'b' A block special file. It refers to a device that handles data in blocks (e.g: such as a hard drive or CD-ROM drive) ==> block_file.
'p' a named pipe ==> pipe.
's' a socket ==> socket.
'D' a door ==> door.

In this kata you should complete a function that return the filetype as a string regarding the file_attribute given by the ls -l command. 
For example if the function receive -rwxr-xr-x it should return file.
========================================
URL: https://www.codewars.com/kata/582642b1083e12521f0000da
–ó–∞–¥–∞—á–∞:
On Unix system type files can be identified with the ls -l command which displays the type of the file in the first alphabetic letter of the file system permissions field. You can find more information about file type on Unix system on the wikipedia page.

'-' A regular file ==> file.
'd' A directory ==> directory.
'l' A symbolic link ==> symlink.
'c' A character special file. It refers to a device that handles data as a stream of bytes (e.g: a terminal/modem) ==> character_file.
'b' A block special file. It refers to a device that handles data in blocks (e.g: such as a hard drive or CD-ROM drive) ==> block_file.
'p' a named pipe ==> pipe.
's' a socket ==> socket.
'D' a door ==> door.

In this kata you should complete a function that return the filetype as a string regarding the file_attribute given by the ls -l command. 
For example if the function receive -rwxr-xr-x it should return file.
========================================
URL: https://www.codewars.com/kata/58249d08b81f70a2fc0001a4
–ó–∞–¥–∞—á–∞:
On Unix system type files can be identified with the ls -l command which displays the type of the file in the first alphabetic letter of the file system permissions field. You can find more information about file type on Unix system on the wikipedia page.

'-' A regular file ==> file.
'd' A directory ==> directory.
'l' A symbolic link ==> symlink.
'c' A character special file. It refers to a device that handles data as a stream of bytes (e.g: a terminal/modem) ==> character_file.
'b' A block special file. It refers to a device that handles data in blocks (e.g: such as a hard drive or CD-ROM drive) ==> block_file.
'p' a named pipe ==> pipe.
's' a socket ==> socket.
'D' a door ==> door.

In this kata you should complete a function that return the filetype as a string regarding the file_attribute given by the ls -l command. 
For example if the function receive -rwxr-xr-x it should return file.
========================================
URL: https://www.codewars.com/kata/5822d89270ca28c85c0000f3
–ó–∞–¥–∞—á–∞:
On Unix system type files can be identified with the ls -l command which displays the type of the file in the first alphabetic letter of the file system permissions field. You can find more information about file type on Unix system on the wikipedia page.

'-' A regular file ==> file.
'd' A directory ==> directory.
'l' A symbolic link ==> symlink.
'c' A character special file. It refers to a device that handles data as a stream of bytes (e.g: a terminal/modem) ==> character_file.
'b' A block special file. It refers to a device that handles data in blocks (e.g: such as a hard drive or CD-ROM drive) ==> block_file.
'p' a named pipe ==> pipe.
's' a socket ==> socket.
'D' a door ==> door.

In this kata you should complete a function that return the filetype as a string regarding the file_attribute given by the ls -l command. 
For example if the function receive -rwxr-xr-x it should return file.
========================================
URL: https://www.codewars.com/kata/5822b65bb81f702016000026
–ó–∞–¥–∞—á–∞:
On Unix system type files can be identified with the ls -l command which displays the type of the file in the first alphabetic letter of the file system permissions field. You can find more information about file type on Unix system on the wikipedia page.

'-' A regular file ==> file.
'd' A directory ==> directory.
'l' A symbolic link ==> symlink.
'c' A character special file. It refers to a device that handles data as a stream of bytes (e.g: a terminal/modem) ==> character_file.
'b' A block special file. It refers to a device that handles data in blocks (e.g: such as a hard drive or CD-ROM drive) ==> block_file.
'p' a named pipe ==> pipe.
's' a socket ==> socket.
'D' a door ==> door.

In this kata you should complete a function that return the filetype as a string regarding the file_attribute given by the ls -l command. 
For example if the function receive -rwxr-xr-x it should return file.
========================================
URL: https://www.codewars.com/kata/581f4ac139dc423f04000b99
–ó–∞–¥–∞—á–∞:
Task
Find the volume of the largest cube that will fit inside a cylinder of given height h and radius r.
Don't round your result. The result needs to be within 0.01 error margin of the expected result.
HINT: There are two cases to consider. Will it be the cylinder's height or the cylinder's radius that determines the maximum size of your cube? An if/else statement might be useful here.
Two Examples
1. for height  3, radius 7 => should return  27.0
2. for height 11, radius 5 => should return 353.55
========================================
URL: https://www.codewars.com/kata/581e50555f59405743001813
–ó–∞–¥–∞—á–∞:
Task
Find the volume of the largest cube that will fit inside a cylinder of given height h and radius r.
Don't round your result. The result needs to be within 0.01 error margin of the expected result.
HINT: There are two cases to consider. Will it be the cylinder's height or the cylinder's radius that determines the maximum size of your cube? An if/else statement might be useful here.
Two Examples
1. for height  3, radius 7 => should return  27.0
2. for height 11, radius 5 => should return 353.55
========================================
URL: https://www.codewars.com/kata/581e1d083a4820eb4f00004f
–ó–∞–¥–∞—á–∞:
Task
Find the volume of the largest cube that will fit inside a cylinder of given height h and radius r.
Don't round your result. The result needs to be within 0.01 error margin of the expected result.
HINT: There are two cases to consider. Will it be the cylinder's height or the cylinder's radius that determines the maximum size of your cube? An if/else statement might be useful here.
Two Examples
1. for height  3, radius 7 => should return  27.0
2. for height 11, radius 5 => should return 353.55
========================================
URL: https://www.codewars.com/kata/581e476d5f59408553000a4b
–ó–∞–¥–∞—á–∞:
Task
Find the volume of the largest cube that will fit inside a cylinder of given height h and radius r.
Don't round your result. The result needs to be within 0.01 error margin of the expected result.
HINT: There are two cases to consider. Will it be the cylinder's height or the cylinder's radius that determines the maximum size of your cube? An if/else statement might be useful here.
Two Examples
1. for height  3, radius 7 => should return  27.0
2. for height 11, radius 5 => should return 353.55
========================================
URL: https://www.codewars.com/kata/581e09652228a337c20001ac
–ó–∞–¥–∞—á–∞:
Task
Find the volume of the largest cube that will fit inside a cylinder of given height h and radius r.
Don't round your result. The result needs to be within 0.01 error margin of the expected result.
HINT: There are two cases to consider. Will it be the cylinder's height or the cylinder's radius that determines the maximum size of your cube? An if/else statement might be useful here.
Two Examples
1. for height  3, radius 7 => should return  27.0
2. for height 11, radius 5 => should return 353.55
========================================
URL: https://www.codewars.com/kata/581de9a5b7bad5d369000150
–ó–∞–¥–∞—á–∞:
Congratulations! That Special Someone has given you their phone number.
But WAIT, is it a valid number? 
Your task is to write a function that verifies whether a given string contains a valid British mobile (cell) phone number or not. 
If valid, return 'In with a chance'.
If invalid, or if you're given an empty string, return 'Plenty more fish in the sea'.
A number can be valid in the following ways: 
Here in the UK mobile numbers begin with '07' followed by 9 other digits, e.g. '07454876120'.
Sometimes the number is preceded by the country code, the prefix '+44', which replaces the '0' in ‚Äò07‚Äô, e.g. '+447454876120'.
And sometimes you will find numbers with dashes in-between digits or on either side, e.g. '+44--745---487-6120' or '-074-54-87-61-20-'. As you can see, dashes may be consecutive. 
Good Luck Romeo/Juliette!
========================================
URL: https://www.codewars.com/kata/581c867a33b9fe732e000076
–ó–∞–¥–∞—á–∞:
Congratulations! That Special Someone has given you their phone number.
But WAIT, is it a valid number? 
Your task is to write a function that verifies whether a given string contains a valid British mobile (cell) phone number or not. 
If valid, return 'In with a chance'.
If invalid, or if you're given an empty string, return 'Plenty more fish in the sea'.
A number can be valid in the following ways: 
Here in the UK mobile numbers begin with '07' followed by 9 other digits, e.g. '07454876120'.
Sometimes the number is preceded by the country code, the prefix '+44', which replaces the '0' in ‚Äò07‚Äô, e.g. '+447454876120'.
And sometimes you will find numbers with dashes in-between digits or on either side, e.g. '+44--745---487-6120' or '-074-54-87-61-20-'. As you can see, dashes may be consecutive. 
Good Luck Romeo/Juliette!
========================================
URL: https://www.codewars.com/kata/581a52d305fe7756720002eb
–ó–∞–¥–∞—á–∞:
Congratulations! That Special Someone has given you their phone number.
But WAIT, is it a valid number? 
Your task is to write a function that verifies whether a given string contains a valid British mobile (cell) phone number or not. 
If valid, return 'In with a chance'.
If invalid, or if you're given an empty string, return 'Plenty more fish in the sea'.
A number can be valid in the following ways: 
Here in the UK mobile numbers begin with '07' followed by 9 other digits, e.g. '07454876120'.
Sometimes the number is preceded by the country code, the prefix '+44', which replaces the '0' in ‚Äò07‚Äô, e.g. '+447454876120'.
And sometimes you will find numbers with dashes in-between digits or on either side, e.g. '+44--745---487-6120' or '-074-54-87-61-20-'. As you can see, dashes may be consecutive. 
Good Luck Romeo/Juliette!
========================================
URL: https://www.codewars.com/kata/581c6b075cfa83852700021f
–ó–∞–¥–∞—á–∞:
Congratulations! That Special Someone has given you their phone number.
But WAIT, is it a valid number? 
Your task is to write a function that verifies whether a given string contains a valid British mobile (cell) phone number or not. 
If valid, return 'In with a chance'.
If invalid, or if you're given an empty string, return 'Plenty more fish in the sea'.
A number can be valid in the following ways: 
Here in the UK mobile numbers begin with '07' followed by 9 other digits, e.g. '07454876120'.
Sometimes the number is preceded by the country code, the prefix '+44', which replaces the '0' in ‚Äò07‚Äô, e.g. '+447454876120'.
And sometimes you will find numbers with dashes in-between digits or on either side, e.g. '+44--745---487-6120' or '-074-54-87-61-20-'. As you can see, dashes may be consecutive. 
Good Luck Romeo/Juliette!
========================================
URL: https://www.codewars.com/kata/581b30af1ef8ee6aea0015b9
–ó–∞–¥–∞—á–∞:
Congratulations! That Special Someone has given you their phone number.
But WAIT, is it a valid number? 
Your task is to write a function that verifies whether a given string contains a valid British mobile (cell) phone number or not. 
If valid, return 'In with a chance'.
If invalid, or if you're given an empty string, return 'Plenty more fish in the sea'.
A number can be valid in the following ways: 
Here in the UK mobile numbers begin with '07' followed by 9 other digits, e.g. '07454876120'.
Sometimes the number is preceded by the country code, the prefix '+44', which replaces the '0' in ‚Äò07‚Äô, e.g. '+447454876120'.
And sometimes you will find numbers with dashes in-between digits or on either side, e.g. '+44--745---487-6120' or '-074-54-87-61-20-'. As you can see, dashes may be consecutive. 
Good Luck Romeo/Juliette!
========================================
URL: https://www.codewars.com/kata/5819a6fdc929bae4f5000a33
–ó–∞–¥–∞—á–∞:
Don't give me five!
In this kata you get the start number and the end number of a region and should return the count of all numbers except numbers with a 5 in it. The start and the end number are both inclusive!
Examples:
1,9 -> 1,2,3,4,6,7,8,9 -> Result 8
4,17 -> 4,6,7,8,9,10,11,12,13,14,16,17 -> Result 12

The result may contain fives. ;-)
The start number will always be smaller than the end number. Both numbers can be also negative!
I'm very curious for your solutions and the way you solve it. Maybe someone of you will find an easy pure mathematics solution.
Have fun coding it and please don't forget to vote and rank this kata! :-) 
I have also created other katas. Take a look if you enjoyed this kata!
========================================
URL: https://www.codewars.com/kata/58177df1e7f457b89d000327
–ó–∞–¥–∞—á–∞:
Don't give me five!
In this kata you get the start number and the end number of a region and should return the count of all numbers except numbers with a 5 in it. The start and the end number are both inclusive!
Examples:
1,9 -> 1,2,3,4,6,7,8,9 -> Result 8
4,17 -> 4,6,7,8,9,10,11,12,13,14,16,17 -> Result 12

The result may contain fives. ;-)
The start number will always be smaller than the end number. Both numbers can be also negative!
I'm very curious for your solutions and the way you solve it. Maybe someone of you will find an easy pure mathematics solution.
Have fun coding it and please don't forget to vote and rank this kata! :-) 
I have also created other katas. Take a look if you enjoyed this kata!
========================================
URL: https://www.codewars.com/kata/5813d19765d81c592200001a
–ó–∞–¥–∞—á–∞:
Don't give me five!
In this kata you get the start number and the end number of a region and should return the count of all numbers except numbers with a 5 in it. The start and the end number are both inclusive!
Examples:
1,9 -> 1,2,3,4,6,7,8,9 -> Result 8
4,17 -> 4,6,7,8,9,10,11,12,13,14,16,17 -> Result 12

The result may contain fives. ;-)
The start number will always be smaller than the end number. Both numbers can be also negative!
I'm very curious for your solutions and the way you solve it. Maybe someone of you will find an easy pure mathematics solution.
Have fun coding it and please don't forget to vote and rank this kata! :-) 
I have also created other katas. Take a look if you enjoyed this kata!
========================================
URL: https://www.codewars.com/kata/5815f7e789063238b30001aa
–ó–∞–¥–∞—á–∞:
Don't give me five!
In this kata you get the start number and the end number of a region and should return the count of all numbers except numbers with a 5 in it. The start and the end number are both inclusive!
Examples:
1,9 -> 1,2,3,4,6,7,8,9 -> Result 8
4,17 -> 4,6,7,8,9,10,11,12,13,14,16,17 -> Result 12

The result may contain fives. ;-)
The start number will always be smaller than the end number. Both numbers can be also negative!
I'm very curious for your solutions and the way you solve it. Maybe someone of you will find an easy pure mathematics solution.
Have fun coding it and please don't forget to vote and rank this kata! :-) 
I have also created other katas. Take a look if you enjoyed this kata!
========================================
URL: https://www.codewars.com/kata/58162692c2a518f03a000189
–ó–∞–¥–∞—á–∞:
Don't give me five!
In this kata you get the start number and the end number of a region and should return the count of all numbers except numbers with a 5 in it. The start and the end number are both inclusive!
Examples:
1,9 -> 1,2,3,4,6,7,8,9 -> Result 8
4,17 -> 4,6,7,8,9,10,11,12,13,14,16,17 -> Result 12

The result may contain fives. ;-)
The start number will always be smaller than the end number. Both numbers can be also negative!
I'm very curious for your solutions and the way you solve it. Maybe someone of you will find an easy pure mathematics solution.
Have fun coding it and please don't forget to vote and rank this kata! :-) 
I have also created other katas. Take a look if you enjoyed this kata!
========================================
URL: https://www.codewars.com/kata/580a429e1cb4028481000019
–ó–∞–¥–∞—á–∞:
Backstory

Ever the learned traveller, Alan Partridge has pretty strong views on London:
"Go to London. I guarantee you'll either be mugged or not appreciated.
Catch the train to London, stopping at Rejection, Disappointment, Backstabbing Central and Shattered Dreams Parkway."

Task
Your job is to check that the provided list / array of stations contains all of the stops Alan mentions. The list of stops are as follows:
Rejection
Disappointment
Backstabbing Central
Shattered Dreams Parkway

If all the stops appear in the given list / array, return Smell my cheese you mother!, if not,  return No, seriously, run. You will miss it..
Other katas in this series:
Alan Partridge I - Partridge Watch
Alan Partridge II - Apple Turnover
========================================
URL: https://www.codewars.com/kata/580dda86c40fa6c45f00028a
–ó–∞–¥–∞—á–∞:
Backstory

Ever the learned traveller, Alan Partridge has pretty strong views on London:
"Go to London. I guarantee you'll either be mugged or not appreciated.
Catch the train to London, stopping at Rejection, Disappointment, Backstabbing Central and Shattered Dreams Parkway."

Task
Your job is to check that the provided list / array of stations contains all of the stops Alan mentions. The list of stops are as follows:
Rejection
Disappointment
Backstabbing Central
Shattered Dreams Parkway

If all the stops appear in the given list / array, return Smell my cheese you mother!, if not,  return No, seriously, run. You will miss it..
Other katas in this series:
Alan Partridge I - Partridge Watch
Alan Partridge II - Apple Turnover
========================================
URL: https://www.codewars.com/kata/581214d54624a8232100005f
–ó–∞–¥–∞—á–∞:
Backstory

Ever the learned traveller, Alan Partridge has pretty strong views on London:
"Go to London. I guarantee you'll either be mugged or not appreciated.
Catch the train to London, stopping at Rejection, Disappointment, Backstabbing Central and Shattered Dreams Parkway."

Task
Your job is to check that the provided list / array of stations contains all of the stops Alan mentions. The list of stops are as follows:
Rejection
Disappointment
Backstabbing Central
Shattered Dreams Parkway

If all the stops appear in the given list / array, return Smell my cheese you mother!, if not,  return No, seriously, run. You will miss it..
Other katas in this series:
Alan Partridge I - Partridge Watch
Alan Partridge II - Apple Turnover
========================================
URL: https://www.codewars.com/kata/580a4734d6df748060000045
–ó–∞–¥–∞—á–∞:
Backstory

Ever the learned traveller, Alan Partridge has pretty strong views on London:
"Go to London. I guarantee you'll either be mugged or not appreciated.
Catch the train to London, stopping at Rejection, Disappointment, Backstabbing Central and Shattered Dreams Parkway."

Task
Your job is to check that the provided list / array of stations contains all of the stops Alan mentions. The list of stops are as follows:
Rejection
Disappointment
Backstabbing Central
Shattered Dreams Parkway

If all the stops appear in the given list / array, return Smell my cheese you mother!, if not,  return No, seriously, run. You will miss it..
Other katas in this series:
Alan Partridge I - Partridge Watch
Alan Partridge II - Apple Turnover
========================================
URL: https://www.codewars.com/kata/580a41b6d6df740d6100030c
–ó–∞–¥–∞—á–∞:
Backstory

Ever the learned traveller, Alan Partridge has pretty strong views on London:
"Go to London. I guarantee you'll either be mugged or not appreciated.
Catch the train to London, stopping at Rejection, Disappointment, Backstabbing Central and Shattered Dreams Parkway."

Task
Your job is to check that the provided list / array of stations contains all of the stops Alan mentions. The list of stops are as follows:
Rejection
Disappointment
Backstabbing Central
Shattered Dreams Parkway

If all the stops appear in the given list / array, return Smell my cheese you mother!, if not,  return No, seriously, run. You will miss it..
Other katas in this series:
Alan Partridge I - Partridge Watch
Alan Partridge II - Apple Turnover
========================================
URL: https://www.codewars.com/kata/580a4001d6df740d61000301
–ó–∞–¥–∞—á–∞:
In this kata, you will do addition and subtraction on a given string. The return value must be also a string.
Note: the input will not be empty.
Examples
"1plus2plus3plus4"  --> "10"
"1plus2plus3minus4" -->  "2"
========================================
URL: https://www.codewars.com/kata/580a1a4af195dbc9ed00006c
–ó–∞–¥–∞—á–∞:
In this kata, you will do addition and subtraction on a given string. The return value must be also a string.
Note: the input will not be empty.
Examples
"1plus2plus3plus4"  --> "10"
"1plus2plus3minus4" -->  "2"
========================================
URL: https://www.codewars.com/kata/5809c661f15835266900010a
–ó–∞–¥–∞—á–∞:
In this kata, you will do addition and subtraction on a given string. The return value must be also a string.
Note: the input will not be empty.
Examples
"1plus2plus3plus4"  --> "10"
"1plus2plus3minus4" -->  "2"
========================================
URL: https://www.codewars.com/kata/580a0347430590220e000091
–ó–∞–¥–∞—á–∞:
In this kata, you will do addition and subtraction on a given string. The return value must be also a string.
Note: the input will not be empty.
Examples
"1plus2plus3plus4"  --> "10"
"1plus2plus3minus4" -->  "2"
========================================
URL: https://www.codewars.com/kata/5809b62808ad92e31b000031
–ó–∞–¥–∞—á–∞:
In this kata, you will do addition and subtraction on a given string. The return value must be also a string.
Note: the input will not be empty.
Examples
"1plus2plus3plus4"  --> "10"
"1plus2plus3minus4" -->  "2"
========================================
URL: https://www.codewars.com/kata/5808c8eff0ed4210de000008
–ó–∞–¥–∞—á–∞:
vowelOne
Write a function that takes a string and outputs a strings of 1's and 0's where vowels become 1's and non-vowels become 0's.
All non-vowels including non alpha characters (spaces,commas etc.) should be included.
Examples:
vowelOne "abceios" -- "1001110"

vowelOne "aeiou, abc" -- "1111100100"

vowelOne( "abceios" ) // "1001110"

vowelOne( "aeiou, abc" ) // "1111100100"
========================================
URL: https://www.codewars.com/kata/580878d5d27b84b64c000b51
–ó–∞–¥–∞—á–∞:
vowelOne
Write a function that takes a string and outputs a strings of 1's and 0's where vowels become 1's and non-vowels become 0's.
All non-vowels including non alpha characters (spaces,commas etc.) should be included.
Examples:
vowelOne "abceios" -- "1001110"

vowelOne "aeiou, abc" -- "1111100100"

vowelOne( "abceios" ) // "1001110"

vowelOne( "aeiou, abc" ) // "1111100100"
========================================
URL: https://www.codewars.com/kata/580755730b5a77650500010c
–ó–∞–¥–∞—á–∞:
vowelOne
Write a function that takes a string and outputs a strings of 1's and 0's where vowels become 1's and non-vowels become 0's.
All non-vowels including non alpha characters (spaces,commas etc.) should be included.
Examples:
vowelOne "abceios" -- "1001110"

vowelOne "aeiou, abc" -- "1111100100"

vowelOne( "abceios" ) // "1001110"

vowelOne( "aeiou, abc" ) // "1111100100"
========================================
URL: https://www.codewars.com/kata/580777ee2e14accd9f000165
–ó–∞–¥–∞—á–∞:
vowelOne
Write a function that takes a string and outputs a strings of 1's and 0's where vowels become 1's and non-vowels become 0's.
All non-vowels including non alpha characters (spaces,commas etc.) should be included.
Examples:
vowelOne "abceios" -- "1001110"

vowelOne "aeiou, abc" -- "1111100100"

vowelOne( "abceios" ) // "1001110"

vowelOne( "aeiou, abc" ) // "1111100100"
========================================
URL: https://www.codewars.com/kata/580751a40b5a777a200000a1
–ó–∞–¥–∞—á–∞:
vowelOne
Write a function that takes a string and outputs a strings of 1's and 0's where vowels become 1's and non-vowels become 0's.
All non-vowels including non alpha characters (spaces,commas etc.) should be included.
Examples:
vowelOne "abceios" -- "1001110"

vowelOne "aeiou, abc" -- "1111100100"

vowelOne( "abceios" ) // "1001110"

vowelOne( "aeiou, abc" ) // "1111100100"
========================================
